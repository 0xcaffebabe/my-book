{"content":"# 面向对象\n\n## 世界观\n\n数据职责（对象的本质特征）与行为职责（拥有数据后体现的行为）绑定\n\n```java\nclass Person {\n  Date birthday;\n  getAge();\n}\n```\n\n通过封装暴露接口 只要接口文档 内部实现随便改 达到了模块化与解耦的需求 隔离了变化的范围\n\n## 三大特性\n\n### 封装\n\n> 利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体，将需求的变更封装在类里\n\n- 减少耦合\n- 有利于维护\n- 提供代码复用\n- 降低重构风险\n\n### 继承\n\n继承实现了 IS-A 关系，子类可以继承父类，获得父类的非private属性与方法\n\n继承的表现在于提供一种归一化的视角，就像unix的一切皆文件 通过这种归一化视角来简化代码的使用 降低软件的复杂度\n\n父类引用指向子类对象称为 向上转型 \n\n```java\nAniaml dog = new Dog()\n```\n\n### 组合与继承\n\n在继承中，如果父类是脆弱的，那么父类接口发生一点改变就会影响到子类的行为\n\n使用时，保证使用继承是一种is a的关系\n\n### 多态\n\n- 运行时多态\n  - 对象引用指向的具体类型到运行期间才确定\n- 编译时多态\n\n## 类\n\n- 对现实世界进行建模\n- 抽象、隐藏细节\n\n### 协作\n\n- 自底向上职责聚合\n- 自顶向下职责拆分\n\n### 确定类\n\n- 确定名词概念\n- 确定所有数据与行为是否为必要\n  - 有行为有状态 -> 概念类\n  - 有状态无行为 -> 其他类\n  - 无状态有行为 -> 划分到概念类\n  - 无状态无行为 -> 抛弃\n\n## 类图\n\n### 泛化关系\n\n继承关系\n\n![202038191245](/assets/202038191245.png)\n\n### 实现关系\n\n![202038191327](/assets/202038191327.png)\n\n### 聚合关系\n\n整体和部分不是强依赖的，整体不存在了部分还是会存在\n\n![20203819147](/assets/20203819147.png)\n\n### 组合关系\n\n组合中整体和部分是强依赖的，整体不存在了部分也不存在了\n\n![20203819154](/assets/20203819154.png)\n\n### 关联关系\n\n这是一种静态关系，与运行过程的状态无关\n\n可以用 1 对 1、多对 1、多对多这种关联关系来表示\n\n![20203819164](/assets/20203819164.png)\n\n### 依赖关系\n\n依赖关系是在运行过程中起作用的\n\n两个类是依赖关系有三种形式：\n\n- 局部变量\n- 参数\n- 对象消息\n\n![202038191818](/assets/202038191818.png)\n\n## 其他一些原则\n\n- 迪米特法则\n\n又叫作最少知识原则（Least Knowledge Principle，简写 LKP），就是说一个对象应当对其他对象有尽可能少的了解\n\n- 合成复用原则\n\n多使用组合，少使用继承\n\n- 共同闭包原则\n\n一起修改的类，应该组合在一起\n\n- 稳定抽象原则\n\n最稳定的包应该是最抽象的包，不稳定的包应该是具体的包\n\n- 稳定依赖原则\n\n包要依赖的包要比自己更具有稳定性\n\n## 面向对象分析\n\nOOA\n\n### 概述\n\n- 基本任务\n- 模型\n\n  ![批注 2019-07-23 145316](/assets/批注%202019-07-23%20145316.png)\n\n- 过程\n\n  ![](http://img.wandouip.com/crawler/article/2019531/eca2964176f31ccd636c0a46a30f05d0)\n\n## 识别类\n\n- 研究用户需求，明确系统责任\n- 研究问题域\n- 确定系统边界\n\n--------------------------------------------------------------------------------\n\n- 考虑问题域\n\n  ![批注 2019-07-23 150223](/assets/批注%202019-07-23%20150223.png)\n\n- 审查筛选\n\n  - 舍弃无用对象\n  - 精简对象\n  - 与实现条件有关的对象\n\n- 识别主动对象\n\n- 对象分类\n\n### 识别属性和操作\n\n### 识别对象之间的关系\n\n- 继承\n\n  - 当前领域的分类学知识\n  - 常识\n  - 集合关系，特征关系\n  - 属性与操作的适用范围\n  - 领域范围内的复用\n\n- 关联\n- 聚合\n- 依赖\n\n## 面向对象设计\n\n- 提高软件生产率\n- 提高质量\n- 加强可维护性\n\n### 问题域\n\n- 编程语言\n- 基础设施\n- 复用支持\n- 数据管理系统\n- 界面支持系统\n\n### 设计\n\n- 为复用设计与编程的类增加结构\n- 增加一般类以建立共同协议\n- 按编程语言调整继承和多态\n- 提高性能\n- 为实现对象永久存储做修改\n- 为编程方便添加低层细节\n\n#### 人机交互部分\n\n- 设计准则\n\n  - 使用简便\n  - 减少人脑记忆负担\n  - 减少重复输入\n  - 容错性\n  - 及时反馈\n  - 防止灾难性错误\n\n#### 控制驱动部分\n\n#### 数据管理部分\n\n## 面向对象编程\n\n## 程序设计范型\n\n- 面向过程程序设计范型\n- 模块化程序设计范型\n\n## OOP语言\n\n### 选择\n\n### 评价标准\n\n- 能否描述类和对象\n- 能够实现一般-特殊结构\n- 如何实现整体-部分结构\n- 如何实现属性和操作\n- 如何实现关联和消息通讯\n\n## 用非OO编程语言实现OOD模型","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}