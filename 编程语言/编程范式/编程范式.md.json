{"content":"# 编程范式\n\n编程范式也就说开发者们看待编程的方式，以不同的视角看待编程，某些方式相比某些方式自然就会有优点，也自然会有缺点，这些在现代编程语言的多范式融合中得到了很好的中和。\n\n- 科学思维\n  - 理想化\n  - 将未知问题转换为已知问题\n- 工程思维\n  - 受到实际因素制约\n  - 局部最优解\n\n如何降低软件开发的复杂度：\n\n- 分解与抽象\n- 分层：分解与抽象组合使用对系统进行分层，缩小关注点，降低复杂性\n\n![202185213811](/assets/202185213811.jpg)\n\n非结构化 -> 结构化 -> 面向对象 -> 多范式\n\n另一条线：函数式(多核、垃圾回收)\n\n总体来看，共有3种方式：1. 命令式编程 2. 声明式编程 3. 逻辑式编程\n\n声明式编程跟逻辑式编程都将大量工作交给运行时，让运行时处理底层细节，让开发者更专注高层的业务逻辑抽象。\n\n## 关于软件开发\n\n软件，是由顺序结构，分支结构，循环结构和间接转移几种行为组成，无可增加，也缺一不可\n\n- 职责：执行一项任务或掌握某种信息的义务\n- 变更是不可避免的\n  - 做好对可以预期到的变更的设计\n- 可修改\n  - 可扩展\n  - 灵活\n- 可操作性\n\n## 结构化编程(命令式)\n\n程序 = 算法 + 数据结构\n\n主要表现：自顶向下/模块化/语句结构化（顺序、选择、循环）\n\n结构化编程是对程序的控制权的直接转移进行了限制和规范\n\n- 按算法分解\n- 结构化的方式，使代码更好地被理解\n- 是最接近计算机底层的编程方式（既是优点 也是缺点）\n  - 接近底层 性能高\n  - 接近底层 抽象能力弱\n\n**可推导性**\n\n- 错误地使用goto是有害的\n\n可将模块递归降解为可推导的单元\n\n测试只能证明程序存在错误，而不能证明其正确\n\n## 面向对象编程（命令式）\n\n程序 = 数据 + 行为\n\n面向对象编程是对程序的控制权的间接转移进行了限制和规范\n\n## 函数式编程(声明式)\n\n程序 = 数据(list) + 函数(filter, map...)\n\n函数式编程是对赋值操作进行限制和规范\n\n函数式编程中的变量是不可变的\n\n## 逻辑式编程\n\n抽象的能力就更强，计算细节干脆不见了\n\n通过描述逻辑来求解问题\n\n- prolog\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}