{"content":"# 启用缓存支持\n\n```java\n@Configuration\n@ComponentScan(\"wang.ismy.spring\")\n@EnableCaching\npublic class Config {\n\n    @Bean\n    public CacheManager cacheManager(){\n        return new ConcurrentMapCacheManager();\n    }\n\n\n}\n```\n\n- Spring 提供的几个缓存管理器 ![批注 2019-06-21 150246](/assets/批注%202019-06-21%20150246.png)\n\n## 让方法支持缓存\n\n```java\n@Cacheable(value = \"find\",key = \"#id\")\n    public String find(Integer id){\n        System.out.println(\"real find\");\n        return \"hello world\"+id;\n    }\n```\n\n- 将值放到缓存当中\n\n  ```java\n  /**\n     * 该方法肯定会被执行，但是返回结果会放到缓存当中\n     */\n    @CachePut(value = \"find\",key = \"#id\")\n    public String put(Integer id){\n\n        return \"new\"+id;\n    }\n  ```\n\n- 条件化缓存\n\n  - unless : 阻止将对象放入缓存，但是还会进行缓存查找\n  - condition : 不会进行缓存查找，也不会将结果放入缓存\n\n在id等于10时不会进行缓存\n\n```java\n@Cacheable(value = \"find\",key = \"#id\",condition = \"#id != 10\")\n    public String find(Integer id){\n        System.out.println(\"real find\");\n        return \"hello world\"+id;\n    }\n```\n\n- 移除缓存\n\n  ```java\n  @CacheEvict(value = \"find\",key = \"#id\")\n    public void remove(Integer id){\n\n    }\n  ```\n\n# 使用xml添加缓存\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}