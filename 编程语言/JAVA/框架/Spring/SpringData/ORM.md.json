{"content":"> ORM（Object-Relational Mapping） 表示对象关系映射。在面向对象的软件开发中，通过ORM，就可以把对象映射到关系型数据库中。只要有一套程序能够做到建立对象与数据库的关联，操作对象就可以直接操作数据库数据，就可以说这套程序实现了ORM对象关系映射\n\n# JPA\n\n# 需要的一些复杂特性\n\n- 延迟加载\n- 预先抓取\n- 级联\n\n# [集成 Hibernate](/后端开发/JakartaEE/JPA.md)\n\n# Spring与JAVA持久化API\n\n- 配置实体管理器工厂\n\n```java\n@Configuration\n@ComponentScan(\"wang.ismy.spring\")\n@EnableJpaRepositories(basePackages = \"wang.ismy.spring\",entityManagerFactoryRef = \"entityManagerFactoryBean\")\npublic class Config {\n\n    @Bean\n    public DataSource dataSourceDev(){\n\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n        dataSource.setUsername(\"root\");\n        dataSource.setPassword(\"Root@@715711877\");\n        dataSource.setUrl(\"jdbc:mysql:///manage\");\n        return dataSource;\n    }\n\n    @Bean\n    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean(DataSource dataSource,\n                                                                           JpaVendorAdapter adapter){\n        LocalContainerEntityManagerFactoryBean bean =\n                new LocalContainerEntityManagerFactoryBean();\n        bean.setDataSource(dataSource);\n        bean.setJpaVendorAdapter(adapter);\n        bean.setPackagesToScan(\"wang.ismy.spring\");\n        return bean;\n    }\n\n    @Bean\n    public JpaVendorAdapter jpaVendorAdapter(){\n        HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter();\n        adapter.setDatabase(Database.MYSQL);\n        adapter.setGenerateDdl(false);\n        adapter.setDatabasePlatform(\"org.hibernate.dialect.MySQL5InnoDBDialect\");\n        return adapter;\n    }\n\n    @Bean(name = \"transactionManager\")\n    public PlatformTransactionManager transactionManager(EntityManagerFactory bean, DataSource dataSource) {\n        JpaTransactionManager tm =\n                new JpaTransactionManager();\n        tm.setEntityManagerFactory(bean);\n        tm.setDataSource(dataSource);\n        return tm;\n    }\n}\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n     https://www.springframework.org/schema/beans/spring-beans.xsd\n     http://www.springframework.org/schema/data/jpa\n     https://www.springframework.org/schema/data/jpa/spring-jpa.xsd\">\n    <jpa:repositories base-package=\"wang.ismy.jms\" transaction-manager-ref=\"transactionManager\" entity-manager-factory-ref=\"entityManagerFactory\"/>\n    <bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n        <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n    </bean>\n    <bean id=\"dataSource\" class=\"com.alibaba.druid.pool.DruidDataSource\">\n        <property name=\"username\" value=\"root\"/>\n        <property name=\"password\" value=\"123\"/>\n        <property name=\"driverClassName\" value=\"com.mysql.cj.jdbc.Driver\"/>\n        <property name=\"url\" value=\"jdbc:mysql:///ssm\"/>\n    </bean>\n\n    <bean id=\"entityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n        <!--扫描实体类-->\n        <property name=\"packagesToScan\" value=\"wang.ismy.jms\"/>\n        <!--服务提供者-->\n        <property name=\"persistenceProvider\">\n            <bean class=\"org.hibernate.jpa.HibernatePersistenceProvider\"/>\n        </property>\n        <!--服务提供者适配器-->\n        <property name=\"jpaVendorAdapter\">\n            <bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\">\n                <property name=\"generateDdl\" value=\"false\" />\n                <property name=\"database\" value=\"MYSQL\" />\n                <property name=\"databasePlatform\" value=\"org.hibernate.dialect.MySQLDialect\" />\n                <property name=\"showSql\" value=\"true\" />\n            </bean>\n        </property>\n        <!--高级特性-->\n        <property name=\"jpaDialect\">\n            <bean class=\"org.springframework.orm.jpa.vendor.HibernateJpaDialect\"/>\n        </property>\n    </bean>\n</beans>\n```\n\n- 从JNDI中获取实体管理器工厂\n\n## 编写基于JPA的Repository\n\n- 实体类\n\n```java\n@Data\n@Entity\n@Table(name = \"admin\")\npublic class Admin {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Integer id;\n\n    private String username;\n\n    private String password;\n}\n```\n\n- Repository类\n\n```java\npublic interface AdminRepository extends JpaRepository<Admin,Integer> { }\n```\n\n- 使用\n\n```java\nadminRepository.findAll();\n```\n\n## 自定义查询方法\n\n```java\npublic interface AdminRepository extends JpaRepository<Admin,Integer> { \n\n    Admin findbyUsername(String username);\n}\n```\n\n- 一些关键词\n\nKeyword           | Sample                                  | JPQL\n----------------- | --------------------------------------- | ----------------------------------------------------------------\nAnd               | findByLastnameAndFirstname              | ... where x.lastname = ?1 and x.firstname = ?2\nOr                | findByLastnameOrFirstname               | ... where x.lastname = ?1 or x.firstname = ?2\nIs,Equals         | findByFirstnameIs,findByFirstnameEquals | ... where x.firstname = ?1\nBetween           | findByStartDateBetween                  | ... where x.startDate between ?1 and ?2\nLessThan          | findByAgeLessThan                       | ... where x.age < ?1\nLessThanEqual     | findByAgeLessThanEqual                  | ... where x.age ⇐ ?1\nGreaterThan       | findByAgeGreaterThan                    | ... where x.age > ?1\nGreaterThanEqual  | findByAgeGreaterThanEqual               | ... where x.age >= ?1\nAfter             | findByStartDateAfter                    | ... where x.startDate > ?1\nBefore            | findByStartDateBefore                   | ... where x.startDate < ?1\nIsNull            | findByAgeIsNull                         | ... where x.age is null\nIsNotNull,NotNull | findByAge(Is)NotNull                    | ... where x.age not null\nLike              | findByFirstnameLike                     | ... where x.firstname like ?1\nNotLike           | findByFirstnameNotLike                  | ... where x.firstname not like ?1\nStartingWith      | findByFirstnameStartingWith             | ... where x.firstname like ?1 (parameter bound with appended %)\nEndingWith        | findByFirstnameEndingWith               | ... where x.firstname like ?1 (parameter bound with prepended %)\nContaining        | findByFirstnameContaining               | ... where x.firstname like ?1 (parameter bound wrapped in %)\nOrderBy           | findByAgeOrderByLastnameDesc            | ... where x.age = ?1 order by x.lastname desc\nNot               | findByLastnameNot                       | ... where x.lastname <> ?1\nIn                | findByAgeIn(Collection ages)            | ... where x.age in ?1\nNotIn             | findByAgeNotIn(Collection age)          | ... where x.age not in ?1\nTRUE              | findByActiveTrue()                      | ... where x.active = true\nFALSE             | findByActiveFalse()                     | ... where x.active = false\nIgnoreCase        | findByFirstnameIgnoreCase               | ... where UPPER(x.firstame) = UPPER(?1)\n\n- 使用SQL\n\n```java\n@Query(value = \"SELECT * FROM admin WHERE username = 'admin'\",nativeQuery = true)\nAdmin selfCondition();\n```\n\n- 使用JPQL\n\n```java\n@Query(\"FROM Customer WHERE custName = ?1\")\nList<Customer> findByJPQL(String name);\n\n// 更新操作\n@Query(\"UPDATE Customer SET custName = ?2 WHERE custId = ?1\")\n@Modifying\nint update(Long id,String name);\n```\n\n## 动态查询\n\n_JpaSpecificationExecutor_\n\n_Specification_\n\n- 示例\n\n```java\n        Specification<Customer> spec = (Specification<Customer>) (root/*比较的属性*/, query, cb/*查询方式*/) -> {\n            Path<Object> custName = root.get(\"custName\");\n            return cb.equal(custName,\"老王八\");\n        };\n        Optional<Customer> one = repository.findOne(spec);\n\n        System.out.println(one.get());\n```\n\n- 条件拼接\n\n```java\n        Specification<Customer> spec = (Specification<Customer>) (root/*比较的属性*/, query, cb/*查询方式*/) -> {\n            Path<Object> custName = root.get(\"custName\");\n            Path<Object> custIndustry = root.get(\"custIndustry\");\n\n            var p1 = cb.equal(custName,\"老王八\");\n            var p2 = cb.equal(custIndustry,\"隔壁\");\n\n            return  cb.and(p1,p2);\n        };\n```\n\n- 模糊查询\n\n```java\n        Specification<Customer> spec = (Specification<Customer>) (root/*比较的属性*/, query, cb/*查询方式*/) -> {\n            Path<Object> custName = root.get(\"custName\");\n\n            return cb.like(custName.as(String.class),\"%老%\");\n        };\n        repository.findAll(spec).forEach(System.out::println);\n```\n\n- 排序\n\n```java\nrepository.findAll(spec, new Sort(Sort.Direction.DESC,\"custId\")).forEach(System.out::println);\n```\n\n- 分页\n\n```java\nrepository.findAll(PageRequest.of(0,3)).forEach(System.out::println);\n```\n\nPage接口\n\n```java\npublic interface Page<T> extends Slice<T> {\n\n\tstatic <T> Page<T> empty() {\n\t\treturn empty(Pageable.unpaged());\n\t}\n\n\tstatic <T> Page<T> empty(Pageable pageable) {\n\t\treturn new PageImpl<>(Collections.emptyList(), pageable, 0);\n\t}\n\n\tint getTotalPages();\n\n\tlong getTotalElements();\n\n\t<U> Page<U> map(Function<? super T, ? extends U> converter);\n}\n```\n\n## 多表操作\n\n### 一对多\n\n- 主表\n\n```java\n@OneToMany(targetEntity = LinkMan.class)\n    @JoinColumn(name = \"lkm_cust_id\",referencedColumnName = \"cust_id\")\n    private Set<LinkMan> linkMan = new HashSet<>(0);\n```\n\n- 从表\n\n```java\n   @ManyToOne(targetEntity = Customer.class)\n    @JoinColumn(name = \"lkm_cust_id\",referencedColumnName = \"cust_id\")\n    private Customer customer;\n```\n\n- 操作\n\n```java\n        Customer customer = new Customer();\n        customer.setCustName(\"20190908\");\n\n        LinkMan man = new LinkMan();\n        man.setLkmName(\"小婊砸\");\n        man.setCustomer(customer);\n        customerRepository.save(customer);\n        linkManRepository.save(man);\n```\n\n- 放弃外键维护\n\n```java\n@OneToMany(mappedBy = \"customer\")\n```\n\n- 级联添加\n\n```java\n@OneToMany(mappedBy = \"customer\",cascade = CascadeType.ALL)\n```\n\n```java\n        Customer customer = new Customer();\n        customer.setCustName(\"20190908\");\n\n        LinkMan man = new LinkMan();\n        man.setLkmName(\"小婊砸\");\n        man.setCustomer(customer);\n        customer.getLinkMans().add(man);\n\n        customerRepository.save(customer);\n```\n\n- 级联删除\n\n```java\nOptional<Customer> cus = customerRepository.findById(1L);\ncustomerRepository.delete(cus.get());\n```\n\n### 多对多\n\n```java\n    @ManyToMany(targetEntity = Role.class)\n    @JoinTable(name = \"user_role\",joinColumns = {@JoinColumn(name = \"user_id\",referencedColumnName = \"user_id\")},\n            inverseJoinColumns = {@JoinColumn(name = \"role_id\",referencedColumnName = \"role_id\")})\n    private Set<Role> roleSet  = new HashSet<>();\n```\n\n```java\n    @ManyToMany(targetEntity = User.class)\n    @JoinTable(name = \"user_role\",joinColumns ={@JoinColumn(name = \"role_id\",referencedColumnName = \"role_id\")},\n            inverseJoinColumns =  {@JoinColumn(name = \"user_id\",referencedColumnName = \"user_id\")})\n    private Set<User> userSet = new HashSet<>();\n```\n\n```java\n        User user = new User();\n        user.setUsername(\"老王\");\n\n        Role role = new Role();\n        role.setRoleName(\"隔壁\");\n        user.getRoleSet().add(role);\n        userDao.save(user);\n        roleDao.save(role);\n```\n\n- 级联\n\n## 对象导航\n\n```java\npublic enum FetchType {\n    LAZY,EAGER\n}\n```\n\n\n\n\n\n\n\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}