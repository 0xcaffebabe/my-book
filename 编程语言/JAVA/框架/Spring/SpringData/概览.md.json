{"content":"# Spring Data\n\n- Spring的数据访问哲学\n\n![202081191941](/assets/202081191941.png)\n\n## Spring的数据访问异常体系\n\n**SQLException**\n\n- 提供了挺多的异常\n- 数据访问模板化\n\n## 配置数据源\n\n- 使用JNDI\n- 使用数据源连接池\n\n```java\n@Bean\n    public DataSource dataSource(){\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n        dataSource.setUsername(\"root\");\n        dataSource.setPassword(\"Root@@715711877\");\n        dataSource.setUrl(\"jdbc:mysql:///manage\");\n        return dataSource;\n    }\n```\n\n- 使用嵌入式数据源\n\n## 使用profile选择数\n\n```java\n@Profile(\"product\")\n    @Bean\n    public DataSource dataSource(){\n\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setUrl(\"jdbc:h2:~/test\");\n        return dataSource;\n    }\n\n    @Profile(\"dev\")\n    @Bean\n    public DataSource dataSourceDev(){\n\n        DruidDataSource dataSource = new DruidDataSource();\n        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n        dataSource.setUsername(\"root\");\n        dataSource.setPassword(\"Root@@715711877\");\n        dataSource.setUrl(\"jdbc:mysql:///manage\");\n        return dataSource;\n    }\n```\n\n## 在Spring 当中使用JDBC\n\n### JDBC模板\n\n*JdbcDaoSupport*\n\n- update():执行DML语句。增、删、改语句\n- queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合\n\n  - 注意：这个方法查询的结果集长度只能是1\n\n- queryForList():查询结果将结果集封装为list集合\n\n  - 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中\n\n- query():查询结果，将结果封装为JavaBean对象\n\n  - query的参数：RowMapper\n\n    - 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装\n    - new BeanPropertyRowMapper<类型>(类型.class)\n\n- queryForObject：查询结果，将结果封装为对象\n\n  - 一般用于聚合函数的查询\n\n- 配置模板\n\n```java\n@Bean\n    public JdbcTemplate jdbcTemplate(){\n        JdbcTemplate jdbcTemplate = new JdbcTemplate();\n        jdbcTemplate.setDataSource(dataSourceDev());\n        return jdbcTemplate;\n    }\n```\n\n- 执行操作\n\n```java\n@org.springframework.stereotype.Service\npublic class Service {\n\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n\n    public void insert(Admin admin){\n        jdbcTemplate.update(\"INSERT INTO admin(username,password) VALUES(?,?)\",\n                admin.getUsername(),\n                admin.getPassword());\n    }\n}\n```\n\n#### 使用Lambda表达式\n\n```java\njdbcTemplate.query(\"select * from admin\",r->{\n\n            do{\n                System.out.println(\n                        r.getString(\"username\")+\"||\"+r.getString(\"password\")\n                );\n            }while (r.next());\n\n        });\n```\n\n#### 使用命名参数\n\n```java\npublic void insert(Admin admin){\n        jdbcTemplate.update(\"INSERT INTO admin(username,password) VALUES(:username,:password)\",\n                Map.of(\"username\",admin.getUsername(),\n                        \"password\",admin.getPassword()));\n    }\n```\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}