{"content":"# SpringSecurity\n\n> Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架\n\n- 组成模块\n\n![enter image description here](https://img-blog.csdn.net/20180511171241264)\n\n## 配置\n\n- 添加spring security 拦截链\n\n```java\n@Override\npublic void onStartup(ServletContext servletContext) throws ServletException {\n    var a= servletContext.addFilter(\"springSecurityFilterChain\", DelegatingFilterProxy.class);\n    a.addMappingForUrlPatterns(null,false,\"/*\");\n}\n```\n\n- 创建相关安全性配置\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n            .anyRequest().authenticated()\n            .and()\n            .formLogin().and().httpBasic();\n    }\n}\n```\n\n## 添加用户\n\n- 基于内存\n\n```java\n@Override\n@Bean\npublic UserDetailsService userDetailsService() {\n    User.UserBuilder users = User.builder();\n    InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n    manager.createUser(users.username(\"user\")\n            .password(new BCryptPasswordEncoder().encode(\"123\")).roles(\"USER\")\n            .authorities(\"play\")\n            .build()\n    );\n    manager.createUser(users.username(\"admin\").password(new BCryptPasswordEncoder().encode(\"123\")).roles(\"USER\", \"ADMIN\").build());\n    return manager;\n}\n```\n\n- 基于数据库\n- 基于LDAP\n\n## 限制访问\n\n```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n            .authorizeRequests()\n            .antMatchers(\"/\").hasAnyAuthority(\"play\")\n            .and()\n            .httpBasic();\n}\n```\n\n## 自定义错误页面\n\n```java\n@Configuration\npublic class WebServerAutoConfiguration {\n    @Bean\n    public ConfigurableServletWebServerFactory configurableServletWebServerFactory(){\n        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n        factory.addErrorPages(new ErrorPage(HttpStatus.FORBIDDEN,\"/error/403\"));\n        return factory;\n    }\n}\n```\n\n## 自定义登录页面\n\n```java\n.formLogin().loginPage(\"/login\").and().csrf().disable();\n```\n\n## 自定义认证成功失败处理\n\nAuthenticationFailureHandler 认证失败接口\nAuthenticationSuccessHandler 认证成功接口\n\n## 添加自定义用户服务\n\n实现该接口\n\n```java\npublic interface UserDetailsService {\n\tUserDetails loadUserByUsername(String username) throws UsernameNotFoundException;\n}\n```\n\nUserDetails需要实现的内容\n\n```java\npublic interface UserDetails extends Serializable {\n\t\n\tCollection<? extends GrantedAuthority> getAuthorities();\n\n\tString getPassword();\n\n\tString getUsername();\n\n\tboolean isAccountNonExpired();\n\n\tboolean isAccountNonLocked();\n\n\tboolean isCredentialsNonExpired();\n\n\tboolean isEnabled();\n}                                            \n```\n\n## 自定义拦截请求\n\n```java\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        System.out.println(\"auth pro run\");\n        http\n                .authorizeRequests()\n                .antMatchers(\"/home\").hasRole(\"ADMIN\").and().formLogin().and()\n                .authorizeRequests()\n                .anyRequest().permitAll();\n    }\n```\n\n### 使用Spring表达式\n\n```java\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        System.out.println(\"auth pro run\");\n        http\n                .authorizeRequests()\n                .antMatchers(\"/home\").access(\"hasRole('ADMIN') and hasIpAddress('::1')\").and().formLogin().and()\n                .authorizeRequests()\n                .anyRequest().permitAll();\n    }\n```\n\n### 强制使用Https\n\n```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    System.out.println(\"auth pro run\");\n    http\n            .authorizeRequests()\n            .antMatchers(\"/home\").access(\"hasRole('ADMIN') and hasIpAddress('::1')\").and().formLogin().and()\n            .authorizeRequests()\n            .anyRequest().permitAll().and().requiresChannel().anyRequest().requiresSecure();\n}\n```\n\n### CSRF防御\n\n### 使用HTTP Basic认证\n```java\n http\n                .authorizeRequests()\n                .antMatchers(\"/home\").access(\"hasRole('ADMIN') and hasIpAddress('::1')\").and().httpBasic().and()\n                .authorizeRequests()\n                .anyRequest().permitAll();\n```\n### 启用记住我功能\n```java\n.and().httpBasic().and().rememberMe()\n```\n\n# 保护视图\n- Spring Security的jsp标签库\n- 使用thymeleaf的spring security 方言\n\n## 保护方法调用\n\n### 使用注解保护方法\n\n- 配置\n\n```java\n@Configuration\n@EnableGlobalMethodSecurity(securedEnabled = true)\nclass Config1 extends GlobalMethodSecurityConfiguration{\n\n}\n```\n\n### @Secured\n\n```java\n@Secured(\"ROLE_ADMIN\")\n@RequestMapping(\"/home\")\n@ResponseBody\npublic String home(){\n    return \"home\";\n}\n```\n\n### 使用表达式保护方法\n\n- 启用相关配置支持\n\n  ```java\n  @EnableGlobalMethodSecurity(prePostEnabled = true)\n  ```\n\n- 相关注解\n\n  - @PreAuthorize :在方法调用前进行验证\n  - @PostAuthorize：在方法调用后进行验证\n  - @PreFilter :调用前对参数进行过滤\n  - @PostFilter ：调用后对返回结果进行过滤\n\n```java\n@PreAuthorize(\"#id == 10\")\npublic void invoke(Integer id){\n\n}\n```\n\n#### 定义许可计算器\n\n- 实现该接口\n\n```java\npublic interface PermissionEvaluator extends AopInfrastructureBean {\n\n    boolean hasPermission(Authentication authentication, Object targetDomainObject,\n            Object permission);\n\n    boolean hasPermission(Authentication authentication, Serializable targetId,\n            String targetType, Object permission);\n}\n```\n\n- 注册到Spring Security 中\n\n![批注 2019-06-22 153017](/assets/批注%202019-06-22%20153017.png)","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}