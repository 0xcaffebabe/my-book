{"content":"# 事务\n\n## 属性\n\n- read-only：是否是只读事务。默认false，不只读。\n- isolation：指定事务的隔离级别。默认值是使用数据库的默认隔离级别。\n- propagation：指定事务的传播行为。\n- timeout：指定超时时间。默认值为：-1。永不超时。\n- rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常，事务不回滚。没有默认值，任何异常都回滚。\n- no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回滚。没有默认值，任何异常都回滚。\n\n### 传播行为\n\n传播行为                       | 含义\n-------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------\nPROPAGATION_REQUIRED       | 表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务\nPROPAGATION_SUPPORTS       | 表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行\nPROPAGATION_PROPAGATION    | 表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常\nPROPAGATION_REQUIRED_NEW   | 表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\nPROPAGATION_NOT_ SUPPORTED | 表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager\nPROPAGATION_NEVER          | 表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常\nPROPAGATION_NESTED         | 表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_ REQUIRED- -样. 注意各厂商对这种传播行为的支持是有所差异的。可以参考资源管理器的文档来确认它们是否支持嵌套事务\n\n## 声明式事务\n\n- 声明式事务都是基于编程事务\n\n### XML 配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop\n        https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\">\n\n    <bean class=\"wang.ismy.spring.Dao\">\n        <constructor-arg ref=\"template\"/>\n    </bean>\n\n    <bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n        <property name=\"username\" value=\"root\"/>\n        <property name=\"password\" value=\"123\"/>\n        <property name=\"driverClassName\" value=\"com.mysql.cj.jdbc.Driver\"/>\n        <property name=\"url\" value=\"jdbc:mysql:///mybatis\"/>\n    </bean>\n\n    <bean id=\"template\" class=\"org.springframework.jdbc.core.JdbcTemplate\">\n        <constructor-arg name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <!--配置事务的通知-->\n    <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <tx:method name=\"transfer\" propagation=\"REQUIRED\" read-only=\"false\"/>\n        </tx:attributes>\n    </tx:advice>\n\n    <!--配置aop-->\n    <aop:config>\n        <aop:pointcut id=\"txPt\" expression=\"execution(* wang.ismy.spring.Dao.*(..))\"/>\n        <!--建立切入点表达式与事务通知的关系-->\n        <aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"txPt\"/>\n    </aop:config>\n</beans>\n```\n\n```java\npublic class Dao {\n\n    private JdbcTemplate jdbcTemplate;\n\n    public Dao(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public void transfer(){\n        String sql = \"UPDATE account SET money = money -200 WHERE uid = 41\";\n        String sql1 = \"UPDATE account SET money = money +200 WHERE uid = 45\";\n        jdbcTemplate.update(sql);\n        jdbcTemplate.update(sql1);\n    }\n}\n```\n\n### 注解配置\n\n```java\n@Configuration\n@EnableTransactionManagement\npublic class Config {\n\n    @Bean\n    public DataSource dataSource(){\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\n        dataSource.setUsername(\"root\");\n        dataSource.setPassword(\"123\");\n        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\n        dataSource.setUrl(\"jdbc:mysql:///mybatis\");\n        return dataSource;\n    }\n\n    @Bean\n    public JdbcTemplate jdbcTemplate(DataSource dataSource){\n        return new JdbcTemplate(dataSource);\n    }\n\n    @Bean\n    public PlatformTransactionManager transactionManager(DataSource dataSource){\n        return new DataSourceTransactionManager(dataSource);\n    }\n}\n```\n\n```java\n@Service\npublic class Dao {\n\n    private JdbcTemplate jdbcTemplate;\n\n    public Dao(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    public void transfer(){\n        String sql = \"UPDATE account SET money = money -200 WHERE uid = 41\";\n        String sql1 = \"UPDATE account SET money = money +200 WHERE uid = 45\";\n\n        jdbcTemplate.update(sql);\n        jdbcTemplate.update(sql1);\n    }\n}\n```\n\n### 事务实现原理\n\n每个被事务支持的方法都会被切面增强， \n\n通过该方法 TransactionAspectSupport.invokeWithinTransaction  实现事务的提交、回滚等待。\n\n根据这个事务的实现原理，可以推断若是通过方法内部调用而非通过对象调用的方式，事务将不会生效。\n\n## 编程式事务\n\n```java\n@Bean\npublic TransactionTemplate transactionTemplate(PlatformTransactionManager manager){\n    return new TransactionTemplate(manager);\n}\n```\n\n```java\n@Service\npublic class Dao {\n\n    private JdbcTemplate jdbcTemplate;\n\n    private TransactionTemplate transactionTemplate;\n\n    public Dao(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public void transfer(){\n        transactionTemplate.execute((TransactionCallback<Void>) status -> {\n            String sql = \"UPDATE account SET money = money -200 WHERE uid = 41\";\n            String sql1 = \"UPDATE account SET money = money +200 WHERE uid = 45\";\n            jdbcTemplate.update(sql);\n            jdbcTemplate.update(sql1);\n            return null;\n        });\n    }\n\n    @Autowired\n    public void setTransactionTemplate(TransactionTemplate transactionTemplate) {\n        this.transactionTemplate = transactionTemplate;\n    }\n}\n```","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}