{"content":"# Spring MVC\n\n- 请求处理流程\n\n![202081194833](/assets/202081194833.png)\n\nStep 1: 请求会被 DispatcherServlet 接收.\n\nStep 2: DispatcherServlet 根据 HandlerMapping 查找 Controller 类名与 相对应请求路径的映射.\n\nStep 3: 请求被转发到 Controller, controller会处理请求执行相对应的方法并返回ModelAndView object (包含 Model data 和视图名称)返回 DispatcherServlet.\n\nStep 4: DispatcherServlet发送model object给 ViewResolver 获取实际的页面.\n\nStep 5: 最终 DispatcherServlet 通过 Model object 渲染页面展示结果.\n\n## DispatcherServlet：前端控制器\n\n> 用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。\n\n## HandlerMapping：处理器映射器\n\n> HandlerMapping负责根据用户请求找到Handler即处理器，SpringMVC提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。\n\n## Handler：处理器\n\n> 它就是我们开发中要编写的具体业务控制器。由DispatcherServlet把用户请求转发到Handler。由Handler对具体的用户请求进行处理。\n\n## View Resolver：视图解析器\n\n> View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。\n\n## View：视图\n\n> SpringMVC框架提供了很多的View视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是jsp。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。\n\n## 配置SpringMVC\n\n- 配置DispatcherServlet\n\n```java\npublic class Initalizer extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n\n        return new Class[0];\n    }\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class[]{MVCConfig.class};\n    }\n\n    @Override\n    protected String[] getServletMappings() {\n        return new String[]{\"/\"};\n    }\n}\n```\n\n```java\n// 启用web mvc 以及配置视图解析器\n@Configuration\n@EnableWebMvc\n@ComponentScan(\"wang.ismy.spring\")\npublic class MVCConfig extends WebMvcConfigurationSupport {\n\n    @Bean\n    public ViewResolver viewResolver() {\n        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n\n        viewResolver.setPrefix(\"/WEB-INF/classes/views/\");\n\n        viewResolver.setSuffix(\".jsp\");\n        viewResolver.setViewClass(JstlView.class);\n        return viewResolver;\n    }\n\n    @Override\n    protected void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n        configurer.enable();\n    }\n}\n```\n\n使用以上代码可以使用java代码配置dispatcherServlet 原因：servlet3.0中，容器会在类路径查找实现了ServletContainerInitializer的类 Spring提供了该实现，叫做SpringServletContainerInitializer 此类会反过来查找WebApplicationInitializer的实现,而AbstractAnnotationConfigDispatcherServletInitializer就是它的一个实现\n\n## 控制器编写\n\n```java\n@org.springframework.stereotype.Controller\npublic class Controller {\n\n    @RequestMapping(\"/home\")\n    public String hello(){\n        return \"home\";\n    }\n}\n```\n\n### @RequestMapping\n\n- 可用在类上以及方法上\n\n  - 最终映射路径=类上的路径+方法上的路径\n\n```java\npublic @interface RequestMapping {\n    // 控制器名称，一般不用\n    String name() default \"\";\n    // 同path\n    @AliasFor(\"path\")\n    String[] value() default {};\n    // 映射路径\n    @AliasFor(\"value\")\n    String[] path() default {};\n    // 请求方法\n    RequestMethod[] method() default {};\n    // 限定请求参数条件\n    String[] params() default {};\n    // 限定请求头\n    String[] headers() default {};\n\n    String[] consumes() default {};\n\n    String[] produces() default {};\n\n}\n```\n\n### 向视图传递数据\n\n```java\n@RequestMapping(\"/home\")\n    public String hello(ModelAndView modelAndView){\n\n        modelAndView.addObject(\"time\", LocalDate.now());\n        return \"home\";\n    }\n```\n\n### 接收请求的输入\n\n- @RequestParam\n- @PathVariable\n\n### 表单处理\n\n- 接收数据\n\n  ```java\n  @PostMapping(\"/form\")\n    public String form(Person person){\n        System.out.println(person);\n        return \"home\";\n  }\n  ```\n\n  ```html\n  <form action=\"./form\" method=\"post\">\n    <input name=\"user\" type=\"text\">\n    <input name=\"password\" type=\"password\">\n    <input type=\"submit\">\n  </form>\n  ```\n\n#### 绑定集合\n\n````/user/hello?names=1&names=2```\n\n### 自定义类型转换器\n\n```java\npublic class LocalDateConvert implements Converter<String, LocalDate> {\n    @Override\n    public LocalDate convert(String source) {\n        return LocalDate.parse(source);\n    }\n}\n````\n\n```xml\n<bean id=\"converterService\" class=\"org.springframework.context.support.ConversionServiceFactoryBean\">\n        <property name=\"converters\">\n            <set>\n                <bean class=\"wang.ismy.spring.mvc.LocalDateConvert\"/>\n            </set>\n        </property>\n    </bean>\n```\n\n- 表单校验\n\n```java\npublic class Person {\n    @NotBlank \n    private String username;\n    @NotBlank \n    private String password;\n}\n```\n\n```java\n@PostMapping(\"/form\")\n    public String form(@Valid Person person, Errors errors){\n        if (errors.hasErrors()){\n            throw new RuntimeException(errors.getAllErrors().get(0).getDefaultMessage());\n        }\n        System.out.println(person);\n        return \"home\";\n    }\n`\n```\n\nvalid api:\n\n![批注 2019-06-13 151452](/assets/批注%202019-06-13%20151452.png)\n\n## 获取servlet api\n\n```java\n@RequestMapping(\"/hello\")\n    public String hello(HttpServletRequest request, HttpServletResponse response){\n        System.out.println(request+\"\"+response);\n        return \"hello\";\n    }\n```\n\n## 注解\n\n- @RequestParam\n- @RequestBody\n- @PathVaribale\n- @RequestHeader\n- @CookieValue\n- @ModelAttribute\n- @SessionAttribute\n\n\n## XML配置\n\n- 配置前端控制器\n\n```xml\n<servlet>\n    <servlet-name>dispatcher</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath:spring-mvc.xml</param-value>\n    </init-param>\n  </servlet>\n\n  <servlet-mapping>\n    <servlet-name>dispatcher</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n```\n\n- spring配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd\">\n\n    <context:component-scan base-package=\"wang.ismy.spring.mvc\"/>\n\n    <!--视图解析器-->\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <property name=\"prefix\" value=\"/WEB-INF/views/\"/>\n        <property name=\"suffix\" value=\".jsp\"/>\n    </bean>\n\n    <!--开启MVC注解支持-->\n    <mvc:annotation-driven/>\n</beans>\n```\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}