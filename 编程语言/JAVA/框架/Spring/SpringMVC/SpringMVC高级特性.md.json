{"content":"# 更多的配置\n\n## 配置DispatcherServlet\n\n```java\n@Override\n    protected void customizeRegistration(ServletRegistration.Dynamic registration) {\n        registration.setMultipartConfig(\n                new MultipartConfigElement(\"./\")\n        );\n\n    }\n```\n\n## 配置Servlet与Filter\n\n```java\n@Override\n    public void onStartup(ServletContext servletContext) throws ServletException {\n        super.onStartup(servletContext);\n\n        var a=servletContext.addServlet(\"my-servlet\",MyServlet.class);\n        a.addMapping(\"/my\");\n\n        var b= servletContext.addFilter(\"my-fliter\",MyFliter.class);\n\n        b.addMappingForUrlPatterns(null,false,\"/*\");\n\n    }\n```\n\n# 处理multipart 数据\n\n## 必要前提\n\n- form表单的enctype取值必须是：multipart/form-data\n- method属性取值必须是Post\n- 提供一个文件选择域`<input type=”file” />`\n\n## 使用\n\n- 配置multipart解析器\n    - StandardServletMultipartResolver\n    - CommonsMultipartResolver\n\n```java\n@Bean\n    public MultipartResolver multipartResolver(){\n        return new StandardServletMultipartResolver();\n    }\n```\n\n```xml\n<bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"/>\n```\n\n- 处理multipart 请求\n\n```java\n@RequestMapping(\"/upload\")\n    @ResponseBody\n    public String upload(@RequestPart(\"file\")MultipartFile file) throws IOException {\n        FileUtils.writeByteArrayToFile(new File(\"d:/\"+file.getOriginalFilename()),file.getBytes());\n        return \"上传完成\";\n    }\n```\n\n```html\n<form action=\"./upload\" enctype=\"multipart/form-data\" method=\"post\">\n    <input type=\"file\" name=\"file\">\n    <input type=\"submit\">\n</form>\n```\n\n# 处理异常\n\n- 自定义异常\n\n```java\n@ResponseStatus(value = HttpStatus.NOT_FOUND,reason = \"未找到\")\npublic class MyException extends RuntimeException{ }\n```\n\n```java\n@RequestMapping(\"/home\")\n    public String hello(Model model){\n\n        model.addAttribute(\"time\", LocalDate.now());\n        if (true)\n        throw new MyException();\n        return \"home.html\";\n    }\n```\n\n## 定义异常处理\n\n```java\npublic class MyExceptionHandler implements HandlerExceptionResolver {\n    @Override\n    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        try {\n            response.getWriter().println(ex.getMessage());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n```xml\n<bean id=\"handlerExceptionResolver\" class=\"MyExceptionHandler\"/>\n```\n\n- 异常处理器\n```java\n@ExceptionHandler(Exception.class)\n@ResponseBody\npublic Object handler(Exception e){\n    return e.getMessage();\n}\n```\n\n# 控制器通知\n本质：对Controller进行AOP\n```java\n// 所有的controller发生异常都会通过这个类进行处理\n@ControllerAdvice\npublic class MyControllerAdvice {\n\n    @ExceptionHandler(Exception.class)\n    @ResponseBody\n    public Object handler(Exception e){\n        return e.getMessage();\n    }\n}\n```\n\n# 请求重定向转发数据\n*forward(服务器转发)与redirect(客户端重定向)*\n## 重定向传递数据的方法\n- url传递\n- flash属性传递\n\n\n# 拦截器\n\n```java\npublic class MyInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(\"进入controller前执行\");\n        return true;\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        System.out.println(\"完成controller方法后执行\");\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        System.out.println(\"请求完成执行\");\n    }\n}\n```\n\n```xml\n    <mvc:interceptors>\n        <mvc:interceptor>\n            <mvc:mapping path=\"/**\"/>\n            <bean class=\"wang.ismy.spring.mvc.MyInterceptor\"/>\n        </mvc:interceptor>\n    </mvc:interceptors>\n```\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}