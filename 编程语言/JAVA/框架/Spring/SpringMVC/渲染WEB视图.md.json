{"content":"# 视图解析\n\nViewResolver接口\n\n```java\npublic interface ViewResolver {\n\n    View resolveViewName(String viewName, Locale locale) throws Exception;\n\n}\n```\n\nView接口\n\n```java\npublic interface View {\n\n    @Nullable\n    default String getContentType() {\n        return null;\n    }\n\n\n    void render(@Nullable Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)\n            throws Exception;\n\n}\n```\n\n视图解析器的工作原理很简单，外部会传给视图解析器一个视图名和地区对象， 解析根据两个参数返回一个视图。 视图做的工作就是根据外部传入的模型，来渲染出html页面。\n\n## Spring提供的视图解析器\n\n![批注 2019-06-17 151441](/assets/批注%202019-06-17%20151441.png) ![批注 2019-06-17 151543](/assets/批注%202019-06-17%20151543.png)\n\n# 创建JSP视图\n\n- 配置视图解析器\n\n  ```java\n  @Bean\n    public ViewResolver viewResolver() {\n        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\n        viewResolver.setPrefix(\"/WEB-INF/views/\");\n        viewResolver.setSuffix(\".jsp\");\n        viewResolver.setViewClass(JstlView.class);\n        return viewResolver;\n    }\n  ```\n\n  访问home就相当于访问/WEB-INF/views/home.jsp\n\n  # 使用 Thymeleaf\n\n  ## 三个与spring集成的bean\n\n- 配置 thymeleaf\n\n  ```java\n  @Bean\n    public ViewResolver viewResolver() {\n        ThymeleafViewResolver resolver = new ThymeleafViewResolver();\n        resolver.setTemplateEngine((ISpringTemplateEngine) templateEngine());\n        resolver.setCharacterEncoding(\"UTF-8\");\n        return resolver;\n    }\n\n    @Bean\n    public TemplateEngine templateEngine() {\n        SpringTemplateEngine engine = new SpringTemplateEngine();\n        engine.setEnableSpringELCompiler(true);\n        engine.setTemplateResolver(templateResolver());\n        return engine;\n    }\n\n    private ITemplateResolver templateResolver() {\n        SpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();\n        resolver.setApplicationContext(applicationContext);\n        resolver.setPrefix(\"/WEB-INF/views/\");\n        resolver.setTemplateMode(TemplateMode.HTML);\n        return resolver;\n    }\n  ```\n\n- 使用thymeleaf\n\n  ```html\n  <p th:text=\"*{time}\"></p>\n  ```\n\n# 响应\n\n- 返回String类型\n\n  > 返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址\n  ```java\n  return \"redirect:http://baidu.com\"; // 重定向(浏览器地址栏发生变化)\n  return \"forward:/index.jsp\"; // 转发(地址栏不变化)\n  ```\n\n- 返回void类型\n\n  > 操作servlet api\n\n- 返回ModelAndView类型\n\n## 静态资源配置\n\n```xml\n    <!--配置静态资源过滤-->\n    <mvc:resources mapping=\"/js/**\" location=\"/js/\"/>\n```\n\n## 响应json\n\n@ResponseBody\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}