{"content":"# Bean 生命周期\n\n## 初始化与销毁\n\n### 使用@Bean时指定\n\n指定initMethod 和 destroyMethod 来指定相对应的初始化方法跟销毁方法。\n\n值得注意的是，销毁方法只有在Bean是单例的时候才会执行。\n\n### InitializingBean&DisposableBean接口\n\n```java\npublic class Man implements InitializingBean, DisposableBean {\n    public Man() {\n        System.out.println(\"调用无参构造器创建Man\");\n    }\n\n    @Override\n    public void destroy() {\n        System.out.println(\"销毁Man\");\n    }\n\n    @Override\n    public void afterPropertiesSet() {\n        System.out.println(\"初始化Man\");\n    }\n}\n```\n\n### @PostConstruct&@PreDestroy\n\n这两个注解非Spring提供，由JSR250定义\n\n```java\n@Component\npublic class Bean {\n\n    //创建后执行\n    @PostConstruct\n    public void init(){ System.out.println(\"init\"); }\n\n    //销毁前执行\n    @PreDestroy\n    public void destroy(){ System.out.println(\"destroy\"); }\n}\n```\n\n## BeanPostProcessor\n\n该接口定义了两个方法，为Spring定义的扩展点，实现该接口，所有Bean在初始化前后都会调用这个钩子，我们可根据自定义处理\n\n```java\n@Component\npublic class MyBeanPostProcessor implements BeanPostProcessor {\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(beanName + \" 初始化之前调用\");\n        return bean;\n    }\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(beanName + \" 初始化之后调用\");\n        return bean;\n    }\n}\n```\n\n### InstantiationAwareBeanPostProcessor\n\nBean实例化钩子\n\n```java\npublic interface InstantiationAwareBeanPostProcessor extends BeanPostProcessor {\n  // 可在该方法自定义Bean实例化过程 若返回null就代表走默认的实例化过程\n  default Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {\n\t\treturn null;\n\t}\n  // 若上方的方法不返回null 该方法不会被调用\n  // 该方法若返回false 不会调用下面的属性值处理方法\n  default boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException {\n\t\treturn true;\n\t}\n  @Nullable\n\tdefault PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName)\n\t\t\tthrows BeansException {\n\n\t\treturn null;\n\t}\n}\n```\n\n![屏幕截图 2021-05-27 152724](/assets/屏幕截图%202021-05-27%20152724.png)\n\n## BeanFactoryPostProcessor\n\n该钩子会在Bean定义加载完成后、Bean实例化前被调用，通常用于修改bean的定义，Bean的属性值等。\n\n### BeanDefinitionRegistryPostProcessor\n\nBeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry方法执行时机先于BeanFactoryPostProcessor的postProcessBeanFactory方法\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}