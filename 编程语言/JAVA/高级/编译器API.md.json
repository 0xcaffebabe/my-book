{"content":"- 对.java文件即时编译\n- 对字符串即时编译\n- 监听编译与错误\n\n![批注 2019-11-05 224948](/assets/批注%202019-11-05%20224948.png)\n\n# 编译文件\n\n```java\nJavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();\njavaCompiler.run(null,null,null,\"path\");\n```\n\n# 编译字符串\n\n```java\n    private static Class<?> compile(String className, String javaCodes) {\n\n        //将字符串包装为SimpleJavaFileObject对象\n        JavaSourceFromString srcObject = new JavaSourceFromString(className, javaCodes);\n        System.out.println(srcObject.getCode());\n        Iterable<? extends JavaFileObject> fileObjects = Arrays.asList(srcObject);\n\n\n        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n        StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);\n        DiagnosticCollector<JavaFileObject> diagnosticCollector = new DiagnosticCollector<JavaFileObject>();\n\n        //设置编译的输出目录，并包装在options中\n        String flag = \"-d\";\n        String outDir = \"\";\n        try {\n            File classPath = new File(Thread.currentThread().getContextClassLoader().getResource(\"\").toURI());\n            outDir = classPath.getAbsolutePath() + File.separator;\n            System.out.println(outDir);\n        } catch (URISyntaxException e1) {\n            e1.printStackTrace();\n        }\n        Iterable<String> options = Arrays.asList(flag, outDir);\n\n        //JavaCompiler.getTask方法：以future的任务形式(多线程)，来执行编译任务\n\n        // 第一个参数：额外输出流，null表示默认使用system.err\n        // 第二个参数：文件管理器，null表示编译器标准文件管理器\n        // 第三个参数：诊断监听器，null表示使用编译器默认方法来报告诊断信息\n        // 第四个参数：编译器参数，null表示无参数\n        // 第五个参数：需要经过annotation处理的类名，null表示没有类需要annotation处理\n        // 第六个参数：待编译的类\n\n        JavaCompiler.CompilationTask task =\n                compiler.getTask(null, fileManager, diagnosticCollector, options, null, fileObjects);\n\n        //等待编译结束\n        boolean result = task.call();\n        if (result == true) {\n            try {\n                return Class.forName(className);\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n        else\n        {\n            //print the Diagnostic's information\n            for  (Diagnostic diagnostic : diagnosticCollector\n                    .getDiagnostics())\n            {\n                System.out.println(\"Error on line: \"\n                        + diagnostic.getLineNumber() + \"; URI: \"\n                        + diagnostic.getSource().toString());\n            }\n        }\n        return null;\n    }\n```\n\n```java\npublic class JavaSourceFromString extends SimpleJavaFileObject {\n    private String code;\n\n    public JavaSourceFromString(String name, String code) {\n        super(URI.create(\"string:///\" + name.replace('.', '/') + Kind.SOURCE.extension), Kind.SOURCE);\n        this.code = code;\n    }\n\n    public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n        return code;\n    }\n    public String getCode()\n    {\n        return code;\n    }\n}\n```\n\n# 应用\n\n- JSP编译\n- 在线编程\n- 自动化构建和测试\n\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}