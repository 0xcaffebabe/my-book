{"content":"# 日志\n\n- 记录操作\n- 监控系统\n- 回溯故障\n\n## 日志规范\n\n文件命名：appName_logType_logName.log\n\n日志文件的保存时间衡量因素：\n\n1. 重要程度\n2. 文件大小\n3. 磁盘空间\n\n日志级别：\n\n- DEBUG 对调试有帮助的信息\n- INFO 未发生错误 但对其他错误排查有指导作用\n- WARN 偏向于此处有出现错误的可能\n- ERROR 发生了错误需要被关注 但没有影响系统运行\n- FATAL 严重错误 程序中断\n\n## 日志使用\n\n### 预先判断日志级别\n\n避免使用字符串的形式连接打印日志\n\n```java\nlog.debug(\"user \" + id + \"create new order \" + orderId) // bad\n\nif (log.enableDebug){ // good\n  log.debug(...)\n}\nlog.debug('user {} create new order {}', id, orderId) // good\n```\n\n主要是防止无谓的字符串连接消耗系统资源\n\n### 避免无效日志打印\n\n对于debug log 等低级别的日志 一定要控制好输出量 避免磁盘空间被快速吞掉\n\n### 区别对待错误日志\n\n不能将所有错误一股脑归类为ERROR级别\n\nERROR级别就代表是需要人工介入处理的级别\n\n### 日志记录的内容\n\n1. 一定要输出异常堆栈\n2. 输出对象实例时 要确保对象重写了 toString 方法\n\n## 日志框架\n\n![屏幕截图 2020-09-19 114841](/assets/屏幕截图%202020-09-19%20114841.png)","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}