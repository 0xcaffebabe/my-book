{"content":"# 反射\n\n>JAVA反射机制是在运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制\n\n- 框架\n\n好处： \n- 可以在程序运行过程中，操作这些对象。 \n-  可以解耦，提高程序的可扩展性。\n\n![批注 2019-11-01 151447](/assets/批注%202019-11-01%20151447.png)\n\n- 使用反射创建对象\n\n```java\nString s = String.class.getConstructor(String.class).newInstance(\"str\");\n```\n\n## 关键类\n\n![批注 2019-11-03 160316](/assets/批注%202019-11-03%20160316.png)\n\n### Class\n\n- cast：对象转型\n- isInstance：类型确认\n- isAssignableFrom：是否从某个类派生\n\n```java\nCharSequence.class.isAssignableFrom(String.class)\n```\n\n类型的比较可以通过 instanceof 或者 isInstance接口来进行 这两个接口的比较是有考虑继承关系。\n\n另外一种比较可以通过比较两个class对象，这种方式没有考虑继承关系。\n\n## 应用\n\n- 加载JDBC驱动\n- 任意类型数组扩容\n- 动态方法调用\n- JSON序列化与反序列化\n- Servlet创建\n- ORM\n- Bean容器\n\n## JAVA反射增强\n\n[org.reflections](https://github.com/ronmamo/reflections)\n\n### 功能\n\n- get all subtypes of some type\n- get all types/members annotated with some annotation\n- get all resources matching a regular expression\n- get all methods with specific signature including parameters, parameter annotations and return type\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}