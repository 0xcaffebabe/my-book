{"content":"# 泛型\n\n- 泛型类\n- 泛型接口\n- 泛型方法\n\n关于泛型的几点：\n\n1. 尖括号里的每个元素都代表一种未知类型\n2. 尖括号只能出现在类名之后（作用于类的泛型）或者方法返回值之前（方法泛型）\n\n使用泛型的好处：\n\n1. 类型安全 避免粗心导致的类转换异常\n2. 提升代码可读性 编码阶段即可知道对象类型\n3. 提升了代码的复用率\n\n## 泛型类\n\n```java\nclass Map<K>{\n    // 修饰成员变量\n    private K key;\n\n    // 修饰参数\n    public Map(K key){}\n\n    // 修饰返回值\n    public K get(){\n        // 修饰局部变量\n        K key1 = key;\n        return key1;\n    }\n}\n```\n\n## 泛型方法\n\n```java\n// <T> 声明的是这个方法的泛型参数 后面的T声明的是方法的返回类型\npublic static <T> T run(T obj){\n    return obj;\n}\n```\n\n## 泛型限定\n\n```java\n// 约定T必须是Comparable的子类\n<T extends Comparable> \n// 可同时指定多个父接口\n<T extends Comparable&Serializable> \n```\n\n## 通配符\n\n```java\n// 只能接受S的自身或子类\n<? extends S>\n// 能接收S自身及其超类\n<? super S>\n// 不限制类型，只能使用object接收\n<?>\n```\n\n## PESC原则\n\nProducer Extends Consumer Super\n\n- 上界<? extends T> 当只想从集合中获取元素，请把这个集合看成生产者\n\n```java\nList<Apple> apples = new ArrayList<>();\napples.add(new Apple());\nList<? extends Fruit> basket = apples;//按上一个例子，这个是可行的\nfor (Fruit fruit : basket)\n{\n    System.out.println(fruit);\n}\n\n//basket.add(new Apple()); //编译错误\n//basket.add(new Fruit()); //编译错误\n```\n\n- 下界<? super T> 当你仅仅想增加元素到集合，把这个集合看成消费者\n\n```java\nList<Apple> apples = new ArrayList<>();\napples.add(new Apple());\nList<? super Apple> basket = apples;//这里使用了super\n\nbasket.add(new Apple());\nbasket.add(new RedApple());\n//basket.add(new Fruit()); //编译错误\n\nObject object = basket.get(0);//正确\n//Fruit fruit =basket.get(0);//编译错误\n//Apple apple = basket.get(0);//编译错误\n//RedApple redApple = basket.get(0);//编译错误\n```\n\n出现这个原则的原因是因为 `List<Apple>` 跟 `List<Fruit>` 没有任何关系\n\n如Java API中对集合的复制：\n\n```java\npublic static <T> void copy(List<? super T> dest, List<? extends T> src) {\n  ...\n}\n```\n\n## 泛型擦除\n\n- 虚拟机中没有泛型，只有普通类和方法\n- 在编译阶段，泛型参数被擦除为限定类型，并进行相关类型转换\n- 虚拟机也会合成桥方法来保持方法多态\n\n补救：\n\n如果想要在运行时获取泛型的类型 那就必须通过某种手段记录泛型的 Class 对象\n\n## 类型变化关系\n\n![批注 2019-10-30 131946](/assets/批注%202019-10-30%20131946.png)\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}