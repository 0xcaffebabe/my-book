{"content":"# NIO\n\n## 与BIO的区别\n\n- BIO是面向流的，NIO是面向缓冲区的；\n- BIO流是阻塞的，NIO流是不阻塞的;\n- NIO有选择器，而IO没有。\n\n## 传统BIO模型的缺点\n\n- 严重依赖于线程 线程是很昂贵的\n  - 线程内存资源 上下文切换成本\n\n![202073116749](/assets/202073116749.jpg)\n\nNIO 的线程模型\n\n```java\n while(channel=Selector.select()){//选择就绪的事件和对应的连接\n      if(channel.event==accept){\n         registerNewChannelHandler(channel);//如果是新连接，则注册一个新的读写处理器\n      }\n      if(channel.event==write){\n         getChannelHandler(channel).channelWritable(channel);//如果可以写，则执行写事件\n      }\n      if(channel.event==read){\n          getChannelHandler(channel).channelReadable(channel);//如果可以读，则执行读事件\n      }\n    }\n   }\n```\n\n## NIO 的 Reactor Proactor\n\n### Reactor\n\n![屏幕截图 2021-07-23 110347](/assets/屏幕截图%202021-07-23%20110347.png)\n\n事件驱动思想\n\n- 多线程模型\n  - 一个接收线程，多个处理线程\n\n- 步骤1：等待事件到来（Reactor负责）。\n- 步骤2：将读就绪事件分发给用户定义的处理器（Reactor负责）。\n- 步骤3：读数据（用户处理器负责）。\n- 步骤4：处理数据（用户处理器负责）。\n\n### Proactor\n\n![202172311918](/assets/202172311918.png)\n\n- 步骤1：等待事件到来（Proactor负责）。\n- 步骤2：得到读就绪事件，执行读数据（现在由Proactor负责）。\n- 步骤3：将读完成事件分发给用户处理器（Proactor负责）。\n- 步骤4：处理数据（用户处理器负责）。\n\nProactor 中，直接监听读/写操作是否完成，也就是说读/写操作是否 OS 来完成，并将读写数据放入一个缓冲区提供给程序\n\n## Buffer\n\n- DirectByteBuffer 可以减少内存从内核到用户的拷贝 但是创建消费成本更高 需要池化\n- HeapByteBuffer 使用堆内存\n\n## 核心类\n\n![屏幕截图 2020-09-28 140403](/assets/屏幕截图%202020-09-28%20140403.png)\n\n### ByteBuffer\n\n属性：\n\n- capacity 缓冲区数组总长度\n- position 下一个要操作的数据元素位置\n- limit 缓冲区不可操作的下一个元素的位置 limit<=capacity\n- mark 类似于书签\n\n![屏幕截图 2020-09-28 141745](/assets/屏幕截图%202020-09-28%20141745.png)\n\n![屏幕截图 2020-09-28 141838](/assets/屏幕截图%202020-09-28%20141838.png)\n\n### NIO的文件读写\n\nFileChannel.transferXXX:\n\n![屏幕截图 2020-09-28 142245](/assets/屏幕截图%202020-09-28%20142245.png)\n\nFileChannel.map: 将文件映射为内存区域\n\n### 文件输出例子\n\n```java\nFileOutputStream fos = new FileOutputStream(\"file.txt\");\nFileChannel channel = fos.getChannel();\nByteBuffer buffer = ByteBuffer.allocate(1024);\nbuffer.put(\"20191204\".getBytes());\n// 翻转缓冲区\nbuffer.flip();\nchannel.write(buffer);\nfos.close();\n```\n\n### 文件输入\n\n```java\nFile file = new File(\"file.txt\");\nFileInputStream fis = new FileInputStream(file);\nByteBuffer buffer = ByteBuffer.allocate((int) file.length());\nFileChannel channel = fis.getChannel();\nchannel.read(buffer);\nSystem.out.println(new String(buffer.array()));\nfis.close();\n```\n\n### 文件复制\n\n```java\nFileInputStream fis = new FileInputStream(\"file.txt\");\nFileOutputStream fos = new FileOutputStream(\"file1.txt\");\nFileChannel source = fis.getChannel();\nFileChannel target = fos.getChannel();\ntarget.transferFrom(source,0,source.size());\nsource.close();\ntarget.close();\n```\n\n## 网络编程\n\n- Selector\n\n它是Java NIO核心组件中的一个，用于检查一个或多个NIO Channel（通道）的状态是否处于可读、可写。如此可以实现单线程管理多个channels,也就是可以管理多个网络链接\n\n![](https://pic3.zhimg.com/80/v2-5458e9182d8e2e002d82327273561172_hd.jpg)\n\n- SelectionKey\n\n一个SelectionKey键表示了一个特定的通道对象和一个特定的选择器对象之间的注册关系\n\n- ServerSocketChannel\n\nJava NIO 中的 ServerSocketChannel 是一个可以监听新进来的 TCP 连接的通道, 就像标准 IO 中的 ServerSocket一样\n\n- SocketChannel\n\nJava NIO 中的 SocketChannel 是一个连接到 TCP 网络套接字的通道\n\n### 客户端\n\n```java\n// 得到一个网络通道\nSocketChannel channel = SocketChannel.open();\n// 设置非阻塞方式\nchannel.configureBlocking(false);\n// 提供服务器IP与端口\nInetSocketAddress address = new InetSocketAddress(\"127.0.0.1\", 1999);\n// 连接\nif (!channel.connect(address)) {\n    while (!channel.finishConnect()) {\n        System.out.println(\"客户端：正在连接服务器\");\n    }\n}\n// 发送数据\nByteBuffer buffer = ByteBuffer.wrap(\"cxk 打篮球\".getBytes());\nchannel.write(buffer);\n```\n\n### 服务端框架\n\n```java\n// 获取网络通道\nServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n// 获取选择器\nSelector selector = Selector.open();\n// 绑定端口\nserverSocketChannel.bind(new InetSocketAddress(1999));\n// 设置为非阻塞方式(accept时不阻塞)\nserverSocketChannel.configureBlocking(false);\n// 注册选择器，让选择器监听连接事件\nserverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\nwhile (true) {\n    // 每2000ms轮询一次，select返回的结果是客户数\n    if (selector.select(2000) == 0){\n        System.out.println(\"等待客户连接\");\n        continue;\n    }\n    // 获取准备连接的所有客户\n    Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();\n    while (iterator.hasNext()){\n        SelectionKey key = iterator.next();\n        if (key.isAcceptable()){\n            // 客户端连接事件\n            System.out.println(\"客户端连接\");\n            SocketChannel socketChannel = serverSocketChannel.accept();\n            socketChannel.configureBlocking(false); // 读取客户端数据时不会阻塞\n            socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(1024));\n        }\n        if (key.isReadable()){\n            // 读取客户端数据事件\n            SocketChannel channel = (SocketChannel) key.channel();\n            ByteBuffer buffer = (ByteBuffer) key.attachment();\n            channel.read(buffer);\n            System.out.println(\"客户端发来数据:\"+new String(buffer.array()));\n        }\n        // 删除客户key，防止重复处理\n        iterator.remove();\n    }\n}\n```\n\n## 系统层面的NIO\n\n### BIO模型\n\n![批注 2020-06-18 143426](/assets/批注%202020-06-18%20143426.png)\n\n- socket=3 bind(3,port) listen(3) accept(3)=block|5\n- recv(5)=block|data\n\n弊端：每连接一线程\n\n### 同步非阻塞 NIO \n\n![批注 2020-06-18 143440](/assets/批注%202020-06-18%20143440.png)\n\n- fcntl 开启非阻塞\n\n使用一个线程处理N个连接读写\n\n每次循环会发生大量无用的系统调用\n\n### 多路复用器\n\n#### 同步IO模型\n\n**(select, pselect)：**\n\n- 传入fd列表，内核返回准备好的fd列表\n- 在用户空间对fd轮询\n\n弊端：需要在内核与用户空间之间拷贝fd\n\n![批注 2020-06-18 143959](/assets/批注%202020-06-18%20143959.png)\n\n**多路复用 无需再拷贝fd：**\n\n调用epoll_create创建一个fd指向共享空间\n\n将客户端fd存放在共享空间 使用 epoll_ctl_add epoll_ctl_mod  epoll_ctl_del \n\n使用epoll_wait会返回可用fd列表 程序再对fd列表操作\n\n![批注 2020-06-18 144854](/assets/批注%202020-06-18%20144854.png)\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}