{"content":"# 语法糖\n\n>语法糖（Syntactic sugar）是由英国计算机科学家彼得·兰丁发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能没有影响，但是更方便程序员使用。语法糖让程序更加简洁，有更高的可读性。\n\n## ForEach\n\n```java\nfor(type element: array){\n    System.out.println(element);\n}\n```\n\n![批注 2019-10-20 163312](/assets/批注%202019-10-20%20163312.png)\n\n## 枚举\n\n```java\npublic enum Size{\n    SMALL,MEDIUM,LARGE;\n}\n```\n\n- Enum的子类\n- 有多少值，则有多少实例对象\n- 无法直接创建\n- 可以添加属性、构造函数、方法\n- 构造函数只能为私有\n\n## 不定项参数\n\n```java\npublic void method(String a,String...b){ }\n```\n\n- 固定参数重载优先级比不定项高\n\n## 静态导入\n\n```java\nimport static org.junit.Assert.*;\n```\n\n- 导入一个类的静态方法与静态变量\n\n## 自动装拆箱\n\n```java\nInteger a = 1;\n```\n\n- 该功能由编译器提供\n- 基础类型与封装类型运算时，会触发拆装箱\n\n## 多异常并列\n\n```java\ntry{\n    //...\n}catch(Exception1 | Exception2 e){\n    //...\n}\n```\n\n- 不能有直接或间接的继承关系\n\n## 数值新特性\n\n```java\nint a = 0b11100111; // 可直接使用二进制\nint b = 9999_99999; // 可使用下划线分割\n```\n\n# 接口方法\n\n```java\ndefault boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n\t\t\tthrows Exception {\n    return true;\n}\n```\n\n![批注 2019-10-20 194253](/assets/批注%202019-10-20%20194253.png)\n\n## 接口静态方法\n\n```java\npublic interface Runnable {\n    static void run(){\n        System.out.println(\"!111\");\n    }\n}\n```\n\n- 只能通过接口名来调用\n\n## 接口私有方法\n\n```java\npublic interface Runnable {\n    static void run(){\n        say();\n    }\n    \n    private static void say(){\n        System.out.println(\"say\");\n    }\n        \n}\n```\n\n## try-with-resource\n\n```java\ntry(FileOutputStream fos = new FileOutputStream(\"\")){ //JDK7\n            \n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n```java\n        FileOutputStream fos = new FileOutputStream(\"\"); // JDK9\n        try(fos){\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n```\n\n- 资源类必须实现AutoCloseable接口\n\n## var\n\n```java\nvar a = 1;\n```\n\n- 由编译器进行类型推断\n\n```java\nvar obj = new Object(){\n    public void print(){\n        System.out.println(\"print\");\n    }\n};\n\nobj.print();\n```\n\n![批注 2019-10-22 204413](/assets/批注%202019-10-22%20204413.png)\n\n\n## switch表达式\n\n```java\nint ret = switch (a){\n    case 1-> 100;\n    case 2 -> 200;\n    default -> -1;\n};\n```\n\n## 文本块\n\n```java\nString template =\n                \"\"\"\n                welcome,\n                hello \"${name}\"\n                \"\"\";\nSystem.out.print(template);\n```\n\n## Records\n\n```java\nrecord Person(String firstname, String lastname) {\n    Person {\n        if (firstname == null || lastname == null) {\n            throw new IllegalArgumentException(\"firstname or lastname cannot be null\");\n        }\n    }\n}\n\nPerson person = new Person(\"c\", \"xk\");\nperson.firstname();\nperson.lastname();\n```\n\n## instanceof模式匹配\n\n```java\nObject obj = \"cxk\";\nif (obj instanceof String s) {\n    System.out.println(s);\n}\nif (obj instanceof String s && s.length() > 2) {\n    System.out.println(s);\n}\n```\n\n## 密封类\n\n密封类允许你控制类的继承体系结构\n\n```java\nabstract sealed class Animal permits Dog, Cat {}\n\nfinal class Dog extends Animal{}\nfinal class Cat extends Animal{}\n```\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}