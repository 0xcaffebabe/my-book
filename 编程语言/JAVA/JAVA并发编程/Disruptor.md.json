{"content":"# Disruptor\n\n## 设计方案\n\n- 环形数组结构\n  - 为了避免垃圾回收，采用数组而非链表。同时，数组对处理器的缓存机制更加友好。\n- 元素位置定位\n  - 数组长度2^n，通过位运算，加快定位的速度。下标采取递增的形式。不用担心index溢出的问题。index是long类型，即使100万QPS的处理速度，也需要30万年才能用完。\n- 无锁设计\n  - 每个生产者或者消费者线程，会先申请可以操作的元素在数组中的位置，申请到之后，直接在该位置写入或者读取数据。\n\n## 开发\n\n- 定义Event - 队列中需要处理的元素\n- 定义Event工厂，用于填充队列\n\ndisruptor初始化的时候，会调用Event工厂，对ringBuffer进行内存的提前分配 GC产生频率会降低\n\n```java\npublic class StringEventFactory implements EventFactory<String> {\n    @Override\n    public String newInstance() {\n        return UUID.randomUUID().toString();\n    }\n}\n```\n\n- 定义EventHandler（消费者），处理容器中的元素\n\n```java\npublic class StringEventHandler implements EventHandler<String> {\n    @Override\n    public void onEvent(String s, long l, boolean b) throws Exception {\n        System.out.println(Thread.currentThread().getName() + \"handle \" + s);\n    }\n}\n```\n\n```java\nStringEventFactory eventFactory = new StringEventFactory();\nint bufferSize = 1024;\n\nDisruptor<String> disruptor =\n        new Disruptor<>(eventFactory, bufferSize, Executors.defaultThreadFactory());\ndisruptor.handleEventsWith(new StringEventHandler());\ndisruptor.start();\n\nRingBuffer<String> ringBuffer = disruptor.getRingBuffer();\nfor (int i = 0; i < 10; i++) {\n    ringBuffer.publishEvent((s, l) -> {});\n}\n```\n\n## 生产者线程模式\n\nProducerType有两种模式 Producer.MULTI和Producer.SINGLE\n\n默认是MULTI，表示在多线程模式下产生sequence\n\n如果确认是单线程生产者，那么可以指定SINGLE，效率会提升\n\n## 等待策略\n\n1，(常用）BlockingWaitStrategy：通过线程阻塞的方式，等待生产者唤醒，被唤醒后，再循环检查依赖的sequence是否已经消费。\n\n2，BusySpinWaitStrategy：线程一直自旋等待，可能比较耗cpu\n\n3，LiteBlockingWaitStrategy：线程阻塞等待生产者唤醒，与BlockingWaitStrategy相比，区别在signalNeeded.getAndSet,如果两个线程同时访问一个访问waitfor,一个访问signalAll时，可以减少lock加锁次数.\n\n4，LiteTimeoutBlockingWaitStrategy：与LiteBlockingWaitStrategy相比，设置了阻塞时间，超过时间后抛异常。\n\n5，PhasedBackoffWaitStrategy：根据时间参数和传入的等待策略来决定使用哪种等待策略\n\n6，TimeoutBlockingWaitStrategy：相对于BlockingWaitStrategy来说，设置了等待时间，超过后抛异常\n\n7，（常用）YieldingWaitStrategy：尝试100次，然后Thread.yield()让出cpu\n\n8，（常用）SleepingWaitStrategy : sleep\n\n## 消费者异常处理\n\n默认：disruptor.setDefaultExceptionHandler()\n\n覆盖：disruptor.handleExceptionFor().with()","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}