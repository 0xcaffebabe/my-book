{"content":"# JUC\n\nJ.U.C java.util.concurrent\n\n主要分为几个类簇：\n\n- 线程同步类　使进程间的协调更加容易　CountDownLatch CyclicBarrier等\n- 并发集合类\n- 线程管理类　线程池等\n- 锁相关类　\n\n## ReentrantLock\n\n- 语义同 synchronized 锁，可重入互斥锁\n- 构造器接受 fairness 的参数，fairness 是 ture 时，保证获得锁时的顺序，false 不保证\n\n轻量级锁与重量级锁:“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的\n\nReentrantLock 和synchronized 都是 可重入锁\n\n可重入 是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响\n\n```java\ntry {\n    lock.lock();\n    // do something\n} catch (Exception e){\n    e.printStackTrace();\n}finally {\n    lock.unlock();\n}\n```\n\n- 尝试加锁\n\n```java\nlock.tryLock() // 可以进行“尝试锁定”tryLock，这样无法锁定，或者在指定时间内无法锁定，线程可以决定是否继续等待\n```\n\n- 可打断的加锁\n\n```java\nlock.lockInterruptibly(); // 可以通过interrupt()打断\n```\n\n- 公平锁\n\n公平锁：每个线程抢占锁的顺序为先后调用lock方法的顺序依次获取锁\n非公平锁：每个线程抢占锁的顺序不定，谁运气好，谁就获取到锁，和调用lock方法的先后顺序无关\n\n```java\nnew ReentrantLock(true); // true为公平锁\n```\n\n### synchronized vs ReentrantLock \n\n- synchronized 是 JVM 实现的，而 ReentrantLock 是 JDK 实现的\n- 新版本java 两者性能大致相同\n- ReentrantLock 可中断，而 synchronized 不行\n- synchronized 中的锁是非公平的，ReentrantLock 默认情况下也是非公平的，但是也可以是公平的\n-  ReentrantLock 可以同时绑定多个 Condition 对象\n\n应该优先选择synchronized:\n\n- synchronized的锁释放是自动的\n- jvm天生支持\n\n### 类层次结构\n\n![2020225152237](/assets/2020225152237.jfif)\n\n### 同步器\n\n- 非公平地获取锁\n\n```java\nfinal boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    // 代表锁还没被获取\n    if (c == 0) {\n        // 设置状态标记获取锁\n        if (compareAndSetState(0, acquires)) {\n            // 标记获取锁的线程是当前线程\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n    // 锁已经被获取了，并且获取锁的线程是当前线程\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0) // overflow\n            throw new Error(\"Maximum lock count exceeded\");\n        // 设置锁的状态+1\n        setState(nextc);\n        return true;\n    }\n    // 加入等待队列\n    return false;\n}\n```\n\n- 尝试释放锁\n\n```java\nprotected final boolean tryRelease(int releases) {\n    // 释放锁后线程持有的锁数\n    int c = getState() - releases;\n    // 当前的线程没有持有锁\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        throw new IllegalMonitorStateException();\n    boolean free = false;\n    // 锁释放完了\n    if (c == 0) {\n        // 可以让其他线程获取锁\n        free = true;\n        setExclusiveOwnerThread(null);\n    }\n    // 如果锁没有释放完，设置state为当前线程持有的锁数\n    setState(c);\n    return free;\n}\n```\n\n### FairSync公平锁\n\n```java\nprotected final boolean tryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    // 锁没有被持有\n    if (c == 0) {\n        // 如果当前线程处于同步队列的头节点，则获取锁成功，否则等待\n        if (!hasQueuedPredecessors() &&\n            compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n    // 锁被当前线程持有，重入\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0)\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    // 锁被其他线程持有，等待\n    return false;\n}\n```\n\n### NonfairSync非公平锁\n\n这里的非公平锁tryAcquire实现就是上面同步器sync中的实现\n\n## ReentrantReadWriteLock\n\n当读写锁是写加锁状态时, 在这个锁被解锁之前, 所有试图对这个锁加锁的线程都会被阻塞\n\n当读写锁在读加锁状态时, 所有试图以读模式对它进行加锁的线程都可以得到访问权, 但是如果线程希望以写模式对此锁进行加锁, 它必须直到所有的线程释放锁\n\n```java\nclass Cache {\n    private Map<String, Object> cache = new HashMap<>();\n    private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n\n    public void put(String key, Object value) {\n        ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();\n        writeLock.lock();\n        cache.put(key, value);\n        writeLock.unlock();\n    }\n\n    public Object get(String key) {\n        ReentrantReadWriteLock.ReadLock readLock = lock.readLock();\n        readLock.lock();\n        Object value = cache.get(key);\n        readLock.unlock();\n        return value;\n    }\n}\n```\n\n## CountDownLatch(闭锁)\n\n> 确保某些活动直到其他活动都完成后才继续执行\n\n![202031219448](/assets/202031219448.png)\n\n其最大的作用不是为了加锁，而是通过计数达到等待的功能，主要有两种形式的等待：\n\n- 让一组线程在全部启动完成之后，再一起执行\n- 主线程等待另外一组线程都执行完成之后，再继续执行\n\n```java\nCountDownLatch latch = new CountDownLatch(5);\n\nfor (int i = 0; i < 5; i++) {\n    int finalI = i;\n    new Thread(()->{\n        Random random = new Random();\n        try {\n            Thread.sleep(random.nextInt(5000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"线程\"+ finalI +\"完成\");\n        lock.latch();\n    }).start();\n}\n\nlatch.await();\nSystem.out.println(\"all mission complete\");\n```\n\n### await\n\n```java\n// await方法的实现是获取共享锁，如果获得后就返回，否则就等待\npublic void await() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n// 这里sync判断能否获得锁的标志是state是否=0\nprotected int tryAcquireShared(int acquires) {\n    return (getState() == 0) ? 1 : -1;\n}\n```\n\n### countDown\n\n```java\n// countDown的实现就是释放一个锁\npublic void countDown() {\n    sync.releaseShared(1);\n}\n// sync判断能否释放锁的标志是 释放这次锁之后，锁的个数为0\nprotected boolean tryReleaseShared(int releases) {\n    // Decrement count; signal when transition to zero\n    for (;;) {\n        int c = getState();\n        // 已经没有锁了\n        if (c == 0)\n            return false;\n        int nextc = c - 1;\n        if (compareAndSetState(c, nextc))\n            return nextc == 0;\n    }\n}\n```\n\n## CyclicBarrier（栅栏）\n\n>闭锁用于等待事件，而栅栏用于等待其他线程\n\n![2020312194816](/assets/2020312194816.png)\n\n```java\nCyclicBarrier barrier = new CyclicBarrier(5, () -> System.out.println(\"all thread run\"));\n// 调用await的线程会进行等待，直到第5个线程调用await，所有线程才会继续执行\nfor (int i = 0; i < 5; i++) {\n    new Thread(() -> {\n        Random rnd= new Random();\n        try {\n            Thread.sleep(rnd.nextInt(3000));\n            System.out.println(Thread.currentThread()+\"run\");\n            barrier.await();\n        } catch (InterruptedException | BrokenBarrierException e) {\n            e.printStackTrace();\n        }\n    }).start();\n}\n```\n\n## phaser\n\n## Semaphore(信号量)\n\n> 用来控制使用资源的主体数量\n\n```java\nSemaphore semaphore = new Semaphore(5);\n// Semaphore semaphore = new Semaphore(5,true); 公平的信号量\n// 最多只有5个线程能同时运行\nfor (int i = 0; i < 10; i++) {\n    new Thread(()->{\n        Random rnd = new Random();\n\n        try {\n            semaphore.acquire();\n            System.out.println(Thread.currentThread()+\"acquire lock\");\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }finally {\n            semaphore.release();\n        }\n    }).start();\n}\n```\n\n## Exchanger\n\n两个线程交换数据\n\n```java\nExchanger<String> exchanger = new Exchanger<>();\n\nnew Thread(()->{\n    try {\n        System.out.println(\"1st:\"+exchanger.exchange(\"1\"));\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n}).start();\nnew Thread(()->{\n    try {\n        System.out.println(\"2nd:\"+exchanger.exchange(\"2\"));\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n}).start();\n```\n\n## LockSupport\n\n```java\nvar t = new Thread(()->{\n    for (int i = 0; i < 10; i++) {\n        if (i == 5){\n            // 暂停线程\n            LockSupport.park();\n        }\n        System.out.println(i);\n    }\n});\nt.start();\nThread.sleep(3000);\n// 继续线程 可以在park之前调用\nLockSupport.unpark(t);\n```\n\n## VarHandle\n\n- 支持一些原子操作\n\n```java\npublic class Main {\n    int x = 8;\n    public static void main(String[] args) throws Exception{\n        Main main = new Main();\n        VarHandle varHandle = MethodHandles.lookup().findVarHandle(Main.class,\"x\",int.class);\n        varHandle.compareAndSet(main,8,9);\n        System.out.println(varHandle.get(main));\n    }\n}\n```\n\n## ThreadLocal\n\n供了一种方式，让在多线程环境下，每个线程都可以拥有自己独特的数据，并且可以在整个线程执行过程中，从上而下的传递\n\n```java\nThreadLocal<String> tl = new ThreadLocal<>();\nvar t1 = new Thread(()->{\n    tl.set(\"cxk\");\n    System.out.println(tl.get()); // \"cxk\"\n});\nvar t2 = new Thread(()->{\n    System.out.println(tl.get()); // null\n});\nt1.start();\nt1.join();\nt2.start();\n```\n\n使用ThreadLocal包装的对象只能在当前线程使用\n\n![截图录屏_选择区域_20200925150807](/assets/截图录屏_选择区域_20200925150807.png)\n\n原理: <https://ismy.wang/java/2019/05/10/%E5%88%9D%E6%8E%A2ThreadLocal.html>\n\nThreadLocal使用了弱引用防止内存泄漏\n\n注意：使用时，对象不再使用，必须手动remove，否则仍然会内存泄漏\n\n### 属性\n\n```java\n// 表示当前ThreadLocal在全局map中的存放位置\nprivate final int threadLocalHashCode = nextHashCode();\n// 它的hashCode是通过一个原子整数不断递增的形式给出的，这样可以保证每台机器的每一个ThreadLocal都有唯一的hashCode\nprivate static AtomicInteger nextHashCode = new AtomicInteger();\n// 用来存放各个ThreadLocal对应的数据\nstatic class ThreadLocalMap {\n    ...\n}\n```\n\n### set\n\n```java\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    // 获取当前线程的一个map\n    ThreadLocalMap map = getMap(t);\n    // 向map里面放数据（如果map为空，则创建map）\n    if (map != null) {\n        map.set(this, value);\n    } else {\n        // 这里创建map的时候，创建后会存入value\n        createMap(t, value);\n    }\n}\n// 也就是说每个线程都拥有一张map，这张map的可是ThreadLocal，这样当使用ThreadLocal存取数据时，就会通过ThreadLocal来在这张map上set/get数据\n```\n\n### get\n\n```java\npublic T get() {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    // 获取map进行get\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue();\n}\n```\n\n### 应用\n\n```java\n// 获取当前的请求\nRequestContextHolder.getCurrentRquest();\n```\n\n### 副作用\n\n1. 线程池复用线程会导致ThreadLocal 也被重用　从而会导致脏数据的产生\n2. 如果使用static修饰ThreadLocal　这个时候弱引用就无法防止内存泄露了\n\n解决上面这些问题只需要使用的时候注意remove即可\n\n## 锁的原理（AQS AbstractQueuedSynchronizer）\n\nAQS　定义了一个volatile int state 作为共享变量　如果线程获取资源失败　就进入FIFO队列等待　成功后去资源就执行临界区代码　执行完释放资源　会通知同步队列中的等待线程来获取资源后出队执行\n\nAQS 是一个锁框架，它定义了锁的实现机制，并开放出扩展的地方，让子类去实现，比如我们在 lock 的时候，AQS 开放出 state 字段，让子类可以根据 state 字段来决定是否能够获得锁，对于获取不到锁的线程 AQS 会自动进行管理，无需子类锁关心\n\n### 整体架构\n\n![20202251401](/assets/20202251401.jfif)\n\n- 提供了一种框架，自定义了先进先出的同步队列，让获取不到锁的线程能进入同步队列中排队\n- 同步器有个状态字段，子类需要实现一些方法，通过判断状态字段来判断能否得到锁\n\n### 属性\n\n```java\n// 这个状态用来判断是否可以获得锁，每次获得锁时+1，释放锁-1\n// 当子类继承AQS来实现锁时，要根据这个状态判断能否获得锁(为0才能获得)跟释放锁(为1才能释放)\nprivate volatile int state;\n\n// 同步队列的头与尾,底层是一个双向链表，用来阻塞获取不到锁的线程，并在适当时机释放这些线程\nprivate transient volatile Node head;\nprivate transient volatile Node tail;\n\n// 条件队列，管理获取不到锁的线程，但条件队列不直接和锁打交道，但常常和锁配合使用\npublic class ConditionObject implements Condition, java.io.Serializable {\n    // Condition 可以用来代替 Object 中相应的监控方法\n    // 它提供了一种线程协作方式，并且都有明确语义\n    \n    /** First node of condition queue. */\n    private transient Node firstWaiter;\n    /** Last node of condition queue. */\n    private transient Node lastWaiter;\n}\n\nstatic final class Node {\n    ...\n    volatile int waitStatus;\n    // 在共享锁中用来表示下一个等待线程，排它锁则用来表示当前节点是共享还是排它模式\n    Node nextWaiter;\n}\n```\n\n### 获取锁\n\n- 排它锁\n\n```java\n// 排它模式下，尝试获得锁\npublic final void acquire(int arg) {\n    // tryAcquire让子类实现的，思路一般是根据state的值决定是否能获取到锁\n    if (!tryAcquire(arg) &&\n        // 如果获取不到就调用addWaiter让线程进入同步队列，然后acquireQueued这个方法代表进入之后会阻塞，直到被唤醒获得锁\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n        // 获取锁失败，打断自身\n        selfInterrupt();\n}\n// 追加到同步队列的队尾\nprivate Node addWaiter(Node mode) {\n    Node node = new Node(mode);\n        \n    for (;;) {\n        Node oldTail = tail;\n        // 如果队尾不为空，就将node插入到队尾\n        if (oldTail != null) {\n            // 将原来队尾的node设置为新加入node的prev\n            node.setPrevRelaxed(oldTail);\n            // 原子方式将node设置为队尾\n            if (compareAndSetTail(oldTail, node)) {\n                oldTail.next = node;\n                return node;\n            }\n        // 队尾为空，需要初始化同步队列\n        } else {\n            initializeSyncQueue();\n        }\n    }\n}\n// 阻塞当前线程\nfinal boolean acquireQueued(final Node node, int arg) {\n    boolean interrupted = false;\n    try {\n        for (;;) {\n            final Node p = node.predecessor();\n            // 如果这个当前线程节点的前置节点是头节点，并且自己已经能获得锁了\n            if (p == head && tryAcquire(arg)) {\n                // 将自己设置为头节点\n                setHead(node);\n                p.next = null; // help GC\n                // 然后返回\n                return interrupted;\n            }\n            // 前一个节点状态为SIGNAL了，那么就阻塞自己(park)\n            if (shouldParkAfterFailedAcquire(p, node))\n                interrupted |= parkAndCheckInterrupt();\n        }\n    } catch (Throwable t) {\n        cancelAcquire(node);\n        if (interrupted)\n            selfInterrupt();\n        throw t;\n    }\n}\n```\n\n- 共享锁\n\n```java\npublic final void acquireShared(int arg) {\n    // 同样由子类实现\n    if (tryAcquireShared(arg) < 0)\n        // 里面的这个方法主要做的是不断自旋直到获取到锁，当获取到锁之后，会通知排在它后面的节点\n        doAcquireShared(arg);\n}\nprivate void doAcquireShared(int arg) {\n    final Node node = addWaiter(Node.SHARED);\n    boolean interrupted = false;\n    try {\n        for (;;) {\n            final Node p = node.predecessor();\n            // 当前节点的前置节点如果是头节点\n            if (p == head) {\n                // 尝试获取锁\n                int r = tryAcquireShared(arg);\n                // 获取锁成功\n                if (r >= 0) {\n                    setHeadAndPropagate(node, r);\n                    p.next = null; // help GC\n                    return;\n                }\n            }\n            if (shouldParkAfterFailedAcquire(p, node))\n                interrupted |= parkAndCheckInterrupt();\n        }\n    } catch (Throwable t) {\n        cancelAcquire(node);\n        throw t;\n    } finally {\n        if (interrupted)\n            selfInterrupt();\n    }\n}\n```\n\n### 释放锁\n\n- 排它锁\n\n```java\npublic final boolean release(int arg) {\n    // 同样留给子类实现判断是否能释放锁\n    if (tryRelease(arg)) {\n        Node h = head;\n        // 后面有一些等待唤醒的节点\n        if (h != null && h.waitStatus != 0)\n            // 从头开始唤醒等待锁的节点\n            unparkSuccessor(h);\n        return true;\n    }\n    return false;\n}\n```\n\n- 共享锁\n\n```java\npublic final boolean releaseShared(int arg) {\n    // 基本跟上面一样\n    if (tryReleaseShared(arg)) {\n        // 唤醒后面的线程\n        doReleaseShared();\n        return true;\n    }\n    return false;\n}\n```\n\n### 条件队列\n\n- 入队列等待 await\n\n获得锁的线程，如果在碰到队列满或空的时候，就会阻塞住，这个阻塞就是用条件队列实现的，这个动作我们叫做入条件队列\n\n- 单个唤醒 signal\n\n之前队列满了，有了一些线程因为 take 操作而被阻塞进条件队列中，突然队列中的元素被线程 A 消费了，线程 A 就会调用 signal 方法，唤醒之前阻塞的线程\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}