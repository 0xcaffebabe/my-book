{"content":"# jQuery\n\nj就是 JavaScript；Query 查询； 意思就是查询js，把js中的DOM操作做了封装\n\n**版本介绍**\n\n1x ：兼容 IE 678 等低版本浏览器， 官网不再更新\n\n2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新\n\n3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本\n\n## 基本操作\n\n### 入口函数\n\n```javascript\n$(function () {\n    ....\n});\n```\n\n不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css文件、图片加载完毕才执行内部代码\n\nwindow.onload 和 $(function) 区别\n\n- window.onload 只能定义一次,如果定义多次，后边的会将前边的覆盖掉\n- $(function)可以定义多次的。\n\n### jQuery中的顶级对象$\n\n$是 jQuery 的别称，在代码中可以使用 jQuery 代替\n\n$是jQuery的顶级对象，相当于原生JavaScript中的 window\n\n1. 用原生 JS 获取来的对象就是 DOM 对象\n2. jQuery 方法获取的元素就是 jQuery 对象。\n3. jQuery 对象本质是： 利用$对DOM 对象包装后产生的对象（伪数组形式存储）\n\n4. jq对象 -- > dom对象 : `jq对象[索引]` 或者 `jq对象.get(索引)`\n\n```javascript\nvar domObject1 = $('div')[0]\nvar domObject2 = $('div').get(0)\n```\n\n- dom对象 -- > jq对象 : `$(js对象)`\n\n```javascript\nvar jQueryObject = $(box);\n```\n\n## 事件绑定\n\n```javascript\n$(\"div\").click(function () {\n    alert(\"click\");\n});\n```\n\n## 选择器\n\n类型           | 语法                   | 作用\n------------ | -------------------- | -------------------\n-            | 基础选择器                | -\n标签选择器（元素选择器） | $(\"html标签名\")         | 获得所有匹配标签名称的元素\nID选择器        | $(\"#id的属性值\")         | 获得与指定id属性值匹配的元素\n类选择器         | $(\".class的属性值\")      | 获得与指定的class属性值匹配的元素\n并集选择器        | $(\"选择器1,选择器2....\")   | 获取多个选择器选中的所有元素\n交集选择器        | $(\"li.current\")      | 交集元素\n-            | 层级选择器                | -\n后代选择器        | $(\"A B \")            | 选择A元素内部的所有B元素\n子选择器         | $(\"A > B\")           | 选择A元素内部的所有B子元素\n-            | 属性选择器                | -\n属性名称选择器      | $(\"A[属性名]\")          | 包含指定属性的选择器\n属性选择器        | $(\"A[属性名='值']\")      | 包含指定属性等于指定值的选择器\n符合属性选择器      | $(\"A[属性名='值'][]...\") | 包含多个属性条件的选择器\n-            | 筛选选择器                | -\n过滤选择器        | :first               | 获得选择的元素中的第一个元素\n尾选择器         | :last                | 获得选择的元素中的最后一个元素\n非元素选择器       | :not(selector)       | 不包括指定内容的元素\n偶数选择器        | :even                | 偶数，从 0 开始计数\n奇数选择器        | :odd                 | 奇数，从 0 开始计数\n等于索引选择器      | :eq(index)           | 指定索引元素\n大于索引选择器      | :gt(index)           | 大于指定索引元素\n小于索引选择器      | :lt(index)           | 小于指定索引元素\n标题选择器        | :header              | 获得标题（h1~h6）元素，固定写法\n可用元素选择器      | :enabled             | 获得可用元素\n不可用元素选择器     | :disabled            | 获得不可用元素\n选中选择器        | :checked             | 获得单选/复选框选中的元素\n选中选择器        | :selected            | 获得下拉框选中的元素\n\n一些节点选择的辅助方法：\n\n![202002231554](/assets/202002231554.png)\n\n- 隐式迭代\n\n```javascript\n$('div').hide();  // 页面中所有的div全部隐藏，不用循环操作\n```\n\n## 样式控制\n\n- 修改简单元素样式\n\n```javascript\n// 1.参数只写属性名，则是返回属性值\nvar strColor = $(this).css('color');\n// 2.  参数是属性名，属性值，逗号分隔，是设置一组样式，属性必须加引号，值如果是数字可以不用跟单位和引号\n$(this).css(\"color\", \"red\");\n// 3.  参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开， 属性可以不用加引号\n$(this).css({ \"color\":\"white\",\"font-size\":\"20px\"});\n```\n\n- 设置类样式\n\n原生 JS 中 className 会覆盖元素原先里面的类名，jQuery 里面类操作只是对指定类进行操作，不影响原先的类名\n\n```js\n// 1.添加类\n$(\"div\").addClass(\"current\");\n// 2.删除类\n$(\"div\").removeClass(\"current\");\n// 3.切换类\n$(\"div\").toggleClass(\"current\");\n```\n\n## DOM操作\n\n### 内容操作\n\n- html(): 获取/设置元素的标签体内容\n\n```html\n<a><font>内容</font></a>\n```\n```js\n$(\"a\").html(); // <font>内容</font>\n```\n\n- text(): 获取/设置元素的标签体纯文本内容\n\n```html\n<a><font>内容</font></a>\n```\n```js\n$(\"a\").text(); // 内容\n```\n\n- val()： 获取/设置元素的value属性值\n\n### 属性操作\n\n- attr(): 获取/设置元素的属性(只能操作自定义属性)\n\n```js\nvar link = $(\"div\").prop('index'); // 获取自定义属性\n$(\"div\").prop('index','xx'); // 设置自定义属性\n```\n\n- removeAttr():删除属性，如果操作的是元素自定义的属性，则建议使用attr\n- prop():获取/设置元素的属性（只能操作固有属性）\n\n```js\nvar link = $(\"div\").prop('href'); // 获取属性\n$(\"div\").prop('href','xx'); // 设置属性\n```\n\n- removeProp():删除自定义属性\n- 数据缓存 data()，可以在指定的元素上存取数据，并不会修改 DOM 元素结构\n\n```js\n$(\"div\").data(\"key\",\"value\") //向元素添加数据\n$(\"div\").data(\"key\") //获取添加的数据\n```\n\n## 节点操作\n\n- append():父元素将子元素追加到末尾\n\n  - `对象1.append(对象2): 将对象2添加到对象1元素内部，并且在末尾`\n\n- prepend():父元素将子元素追加到开头\n\n  - 对象1.prepend(对象2):将对象2添加到对象1元素内部，并且在开头\n- after():添加在目标元素后面\n- before():添加在目标元素前面\n- appendTo():\n\n  - `对象1.appendTo(对象2):将对象1添加到对象2内部，并且在末尾`\n\n- prependTo():\n\n  - `对象1.prependTo(对象2):将对象1添加到对象2内部，并且在开头`\n\n- after():添加元素到元素后边\n\n  - `对象1.after(对象2)： 将对象2添加到对象1后边。对象1和对象2是兄弟关系`\n\n- before():添加元素到元素前边\n\n  - `对象1.before(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系`\n\n- insertAfter()\n\n  - `对象1.insertAfter(对象2)：将对象2添加到对象1后边。对象1和对象2是兄弟关系`\n\n- insertBefore()\n\n  - `对象1.insertBefore(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系`\n\n- remove():移除元素（自身）\n\n- empty():清空元素的所有后代元素\n\n## 动画\n\n参数：\n\n- speed：动画的速度。三个预定义的值(\"slow\",\"normal\", \"fast\")或表示动画时长的毫秒数值(如：1000)\n- easing：用来指定切换效果，默认是\"swing\"，可用参数\"linear\"\n\n  - swing：动画执行时效果是 先慢，中间快，最后又慢\n  - linear：动画执行时速度是匀速的\n\n- fn：在动画完成时执行的函数，每个元素执行一次。\n\n### 显示隐藏\n\n- show([speed,[easing],[fn]]) 显示\n- hide([speed,[easing],[fn]]) 引擎\n- toggle([speed],[easing],[fn]) 切换\n\n### 滑入滑出\n\n- slideDown([speed],[easing],[fn]) 下拉\n- slideUp([speed,[easing],[fn]]) 上拉\n- slideToggle([speed],[easing],[fn]) 切换\n\n### 淡入淡出\n\n- fadeIn([speed],[easing],[fn]) \n- fadeOut([speed],[easing],[fn])\n- fadeToggle([speed,[easing],[fn]])\n- fadeTo([speed],opacity,[easing],[fn])\n\n### 自定义动画\n\n- animate(params,[speed],[easing],[fn])\n\nparams代表要变化的css样式\n\n```js\n$(\"div\").animate({height:200})\n```\n\n### 动画排队\n\n动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行\n\n- stop() 写到动画或者效果的前面， 相当于停止结束上一次的动画\n\n## 元素操作\n\n### 遍历\n\n- jq对象.each(callback)\n\n```javascript\n$(\"div\").each(function (index,element) {\n    console.table(index,element);\n});\n```\n\n回调方法传入的element是dom元素\n\n如果当前function返回为false，则结束循环(break)。\n\n如果当前function返回为true，则结束本次循环，继续下次循环(continue)\n\n- $.each(object, [callback])\n\n```javascript\n$.each($(\"div\"),function (i, e) {\n    console.table(i,e);\n})\n```\n\n- for..of\n\n_ES6语法_\n\n```javascript\nfor (let i of $(\"div\")){\n  console.log(i);\n}\n```\n\n## 事件\n\n### 事件绑定\n\n#### 标准绑定\n\njq对象.事件方法(回调函数)，如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。\n\n#### on绑定\n\n```js\njq对象.on(\"事件名称\",回调函数)\n```\n\n或者\n```js\n  jq对象.on({\n  事件1:处理函数,\n  事件2:处理函数\n})\n```\n\n```js\n// 事件触发一次后失效\njq对象.one('click',fn)\n```\n\n#### 事件委托\n\n```js\n$(\"div\").on(\"click\",\"p\",function(){\n  // 将子元素发生的事件委托给父元素，这样就可以实现给动态创建的元素创建点击事件\n  alert('p元素触发');\n})\n```\n\n#### 事件解绑\n\n```js\n// 解绑某个事件\njq对象.off(\"事件名称\")\n// 解绑所有事件\njq对象.off()\n// 解绑事件委托\njq对象.off('click','a')\n```\n\n#### 事件触发\n\n```js\njq对象.trigger(\"click\")\n// 不会触发元素的默认行为（比如input focus之后会光标闪烁，使用这个方法光标就不会闪烁）\njq对象.triggerHandler(\"click\")\n```\n\n### 事件对象\n\n与DOM中的event基本一致\n\n## 对象拷贝\n\n```js\n$.extend([deep],target,sourceObject,[sourceObjectN])\n```\n\n## 多库共存\n\n```js\n// 让jquery 释放对$ 控制权 让用自己决定\nvar $x = jQuery.noConflict();\n```\n\n## 尺寸和位置操作\n\n- 尺寸\n\n```js\n// width height 获取或者设置\n$(\"div\").width();\n// innerWidth innerHeight 包含padding\n$(\"div\").outerWidth();\n// outerWidth outerHeight 包含padding、border,加上参数true就包含margin\n$(\"div\").outerWidth();\n```\n\n- 位置\n\n```js\n// 绝对定位的偏移\n$(\"div\").offset()\n// 设置\n$(\"div\").offset({\n  top:0,\n  left:0\n})\n\n// 获取相对于父级定位盒子的偏移,只能获取不能设置\n$(\"div\").position()\n\n// 设置或者获取被卷去的头部\n$(\"div\").scrollTop()\n// 设置或者获取被卷去的左部\n$(\"div\").scrollLeft()\n```","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}