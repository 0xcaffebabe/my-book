{"content":"# 前端开发的演变\n\n静态页面-AJAX-前端MVC-SPA\n\n# ReactJS\n\n>ReactJS把复杂的页面，拆分成一个个的组件，将这些组件一个个的拼装起来，就会呈现多样的页面。ReactJS可以用于 MVC 架构，也可以用于 MVVM 架构，或者别的架构\n\n## JSX语法\n\n>JSX语法就是，可以在js文件中插入html片段，是React自创的一种语法\n\n在JSX语法中，只能有一个根标签，不能有多个\n\n```jsx\nconst div1 = <div>right</div>;\nconst div2 = </div>error</div></div>error</div>;\n```\n\n- 函数调用\n\n```jsx\n<div>{f()}</div> // f是函数名\n```\n\n## 组件\n\n- 组件定义\n\n```jsx\nimport React from 'react';\n\nclass HelloWorld extends React.Component{\n    \n    render() { // 重写渲染方法\n        return <div>cxk：jntm</div>\n    }\n}\n\nexport default HelloWorld; // 导出该类\n```\n\n- 使用自定义组件\n\n```jsx\nimport React from 'react';\nimport HelloWorld from \"./HelloWorld\";\n\nclass Show extends React.Component{\n    \n    render() {\n        return <HelloWorld/>\n    }\n}\nexport default Show;\n```\n\n- 组件参数传递\n\n```jsx\n// 属性传递              标签包裹传递\n<HelloWorld name=\"cxk\"> 蔡徐坤</HelloWorld>\n// 接收\n<div>{this.props.name}：{this.props.children}</div>\n```\n\n- 组件状态\n\n每一个组件都有一个状态，其保存在this.state中，当状态值发生变化时，React框架会自动调用render()方法，重新渲染页面\n\n-  this.state值的设置要在构造参数中完成\n-  要修改this.state的值，需要调用this.setState()完成，不能直接对其进行修改\n\n```jsx\nclass HelloWorld extends React.Component{\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            dataList : [1,2,3]\n        };\n    }\n\n    render() { // 重写渲染方法\n        return <div>\n            <ul>\n                {\n                    this.state.dataList.map((value,index)=>{\n                      return <li>{value}</li>\n                    })\n                }\n            </ul>\n            <button onClick={()=>{\n                let list = this.state.dataList;\n                list.push(Math.random());\n                this.setState({dataList:list})\n            }}>click</button>\n        </div>\n    }\n}\n```\n\n- 生命周期\n\n![](https://user-gold-cdn.xitu.io/2017/11/11/88e11709488aeea3f9c6595ee4083bf3?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n添加钩子方法\n\n```jsx\nclass HelloWorld extends React.Component{\n\n    // 组件挂载后调用\n    componentDidMount() {\n        console.log(\"组件挂载后...\");\n    }\n\n    // 省略其他\n}\n```\n\n# 前端代码分层\n\n- Page 负责与用户直接打交道：渲染页面、接受用户的操作输入，侧重于展示型交互 性逻辑\n- Model 负责处理业务逻辑，为 Page 做数据、状态的读写、变换、暂存等\n- Service 负责与 HTTP 接口对接，进行纯粹的数据读写\n\n## 使用DVA进行数据分层管理\n\n- 添加models\n\n```js\nexport default {\n    namespace : 'list',\n    state:{\n        data:[1,2,3]\n    }\n}\n\n```\n\n- 使用数据\n\n```jsx\nimport React from 'react'\nimport {connect} from 'dva'\n\nconst namespace = 'list'\n\nconst map = (state)=>{\n    const list = state[namespace].data;\n    return {\n        list\n    }\n};\n\n@connect(map)\nclass List extends React.Component{\n    render() {\n        return <ul>\n            {\n                this.props.list.map((v,i)=>{\n                    return <li>{v}</li>\n                })\n            }\n        </ul>\n    }\n}\n\nexport default List;\n```\n\n- 修改数据\n\n```js\nexport default {\n    namespace: 'list',\n    state: {\n        data: [1, 2, 3]\n    }\n    ,\n    reducers: {\n        addNewData(state){\n            let list = [...state.data,Math.random()];\n\n            console.log(list);\n            return {\n                data:list\n            }\n        }\n    }\n}\n```\n\n```jsx\n// 省略导入\n\n// 省略map1\n\nconst map1 = (dispatch)=>{\n    return {\n        addNewData:()=>{\n            dispatch(\n                {\n                    type:namespace+\"/addNewData\"\n                }\n            )\n        }\n    }\n}\n\n@connect(map,map1)\nclass List extends React.Component{\n    render() {\n        return <ul>\n            {\n                this.props.list.map((v,i)=>{\n                    return <li>{v}</li>\n                })\n            }\n            <button onClick={()=>{\n                this.props.addNewData()\n            }}>\n                点击\n            </button>\n        </ul>\n    }\n}\n\nexport default List;\n```\n\n\n\n\n\n\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}