{"content":"# ES6\n\n## let\n\n所声明的变量，只在let命令所在的代码块内有效\n\n```javascript\n{\n  let a = 10; // 暂时性死区\n  var b = 1;\n}\n\nb = 1 // 1\na = 1 // ReferenceError: a is not defined.\n```\n\n- 不存在变量提升\n\n```javascript\nconsole.log(a); //  Cannot access 'a' before initialization\nlet a = 20;\n```\n\n## const\n\n声明一个只读的常量。一旦声明，常量的值就不能改变。\n\n- 具有块级作用域\n\n```javascript\n{\n    const PI = 3;\n}\nconsole.log(PI); // PI is not defined\n```\n\n- 声明时必须赋值\n\n```javascript\nconst PI; // Missing initializer in const declaration\n```\n\n- 不能重新赋值\n\n```javascript\nconst PI = 3.1415;\nPI = 3; // TypeError: Assignment to constant variable.\n```\n\n## var、let、const\n\nvar    | let     | const\n------ | ------- | -------\n函数级作用域 | 块级作用域   | 块级作用域\n变量提升   | 不存在变量提升 | 不存在变量提升\n值可更改   | 值可更改    | 值不可更改\n\n## 模板字符串\n\n```javascript\nlet name = \"cxk\"\n// 模板字符串中可以解析变量\nconsole.log(`your name is ${name}`)\n```\n\n```js\nconst fn = ()=>'fn function ';\n// 模板字符串可以调用函数\nlet text = `fn call: ${fn()}`;\n```\n\n```javascript\n// 模板字符串可以换行\nlet info =`123\n456\n789`\n```\n\n## 解构赋值\n\n解构赋值就是把数据结构分解，然后给变量进行赋值\n\n如果解构不成功，变量跟数值个数不匹配的时候，变量的值为undefined\n\n- 数组\n\n```javascript\nlet [a, b, c] = [1, 2, 3];\n// a=1 b=2 c=3\n```\n\n```javascript\nconst color = [1,2]\nconst color2=[...color,3,4]\n// color2 = [1,2,3,4],同样能用于对象\n```\n\n- 对象\n\n```javascript\nlet {name,age} = {name:\"123\",age:15}\n// name = \"123\" age = 15\nlet {name:myName,age:myAge} = {name:\"123\",age:15}\n// myName = \"123\" myAge = 15\n```\n\n## 函数默认值\n\n```javascript\nfunction a(a = 2){\n    console.log(a);\n}\n```\n\n## 剩余参数\n\n```js\nfunction f(...args){\n  console.log(args); // [1,2,3,4]\n}\nf(1,2,3,4);\n```\n\n## 箭头函数\n\n```javascript\n// 函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号\nlet sum = (a,b) => a+b;\n// 如果形参只有一个，可以省略小括号\nlet f = res => res.data;\n```\n\n```js\n// 箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this\nvar obj = {\n    f: () => {\n        console.log(this); // Window\n    }\n}\nobj.f();\n```\n\n## Array新增方法\n\n### Arrat.from\n\n```js\n//定义一个集合\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n}; \n//转成数组\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n let arrayLike = { \n     \"0\": 1,\n     \"1\": 2,\n     \"length\": 2\n }\n let newAry = Array.from(arrayLike, item => item *2)//[2,4]\n```\n\n### Array实例方法:find\n\n```js\n[1,2,3].find(i=>i/2==1) // 2\n```\n\n### Array实例方法:findIndex\n\n```js\n[1,2,3].findIndex(i=>i/2==1) // 1\n```\n\n### Array实例方法:includes\n\n```js\n[1,2,3].includes(4) // false\n```\n\n## String新增方法\n\n### 实例方法:startsWith,endsWith\n\n```js\n'javascript'.startsWith('java') // true\n'javascript'.endsWith('script') // true\n```\n\n### 实例方法:repeat\n\n```js\n'x'.repeat(3) // xxx\n```\n\n## 数据结构Set\n\nES6 提供了新的数据结构  Set。它类似于数组，但是成员的值都是唯一的，没有重复的值\n\n```js\nconst set = new Set([1,2,3,4,4]) // set = {1,2,3,4}\n```\n\n### 一些方法\n\n```js\nset.add(1); // 添加元素\nset.delete(1) // 删除元素\nset.has(1) // 判断是否有这个元素\nset.clear() // 清空集合\nset.forEach(v => console.log(v))\n```\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}