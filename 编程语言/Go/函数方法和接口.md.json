{"content":"# 函数方法和接口\n\nGo程序函数启动顺序的示意图：\n\n![2021916171125](/assets/2021916171125.png)\n\n## 函数\n\n```go\n// 具名函数\nfunc Add(a, b int) int {\n    return a+b\n}\n\n// 匿名函数\nvar Add = func(a, b int) int {\n    return a+b\n}\n\n// 多个参数和多个返回值\nfunc Swap(a, b int) (int, int) {\n    return b, a\n}\n\n// 可变数量的参数\n// more 对应 []int 切片类型\nfunc Sum(a int, more ...int) int {\n    for _, v := range more {\n        a += v\n    }\n    return a\n}\n```\n\n- Go语言函数的递归调用深度逻辑上没有限制\n\n因此内存地址可能会随时发生变化，不要假设变量在内存中的位置是固定不变的，指针随时可能会变化\n\n## 方法\n\n- 面向对象里的函数\n\n```go\n// 关闭文件\nfunc (f *File) CloseFile() error {\n    // ...\n}\n\n// 读文件数据\nfunc (f *File) ReadFile(offset int64, data []byte) int {\n    // ...\n}\n```\n\n## 接口\n\n```go\n// 定义接口\ntype Service interface {\n\tGetUser() string\n}\n// 实现类\ntype UserService struct {}\n// 隐式实现接口方法\nfunc (us *UserService)GetUser() string{\n\treturn \"user\"\n}\nfunc main(){\n\t// 多态\n\tvar service Service = new(UserService)\n\tfmt.Println(service.GetUser())\n}\n```","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}