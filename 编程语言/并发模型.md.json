{"content":"# 并发模型\n\n- 并发与并行\n\n并行架构：\n\n- bit-level并行：从32位到64位\n- 指令级并行：流水线技术、乱序执行\n- 数据级并行：GPU的几百个核心并行对图像处理\n- 任务级并行：多处理机系统\n\n## 线程与锁\n\n该模型是对底层硬件运行过程的形式化 适用面很广\n\n没有为并行提供直接的支持\n\n- 竞态条件\n- 内存可见性\n- 死锁\n\n## 函数式编程\n\n- 可变状态造成的风险\n\n函数式代码可以随意改变其执行顺序 所以可以让相互独立的函数并行执行\n\n## Actor\n\n- 保留了可变状态 只是不共享\n- 消息传输\n- 任其崩溃\n\n## 通信顺序进程\n\n## 数据并行\n\n- opencl\n\n![屏幕截图 2020-12-31 160516](/assets/屏幕截图%202020-12-31%20160516.png)\n\n## Lambda架构\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}