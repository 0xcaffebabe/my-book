{"content":"# 浏览器安全\n\n## 同源策略\n\n> 同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互\n\nURL                                               | 结果 | 原因\n------------------------------------------------- | -- | ----------------------\n<http://store.company.com/dir2/other.html>        | 成功 | 只有路径不同\n<http://store.company.com/dir/inner/another.html> | 成功 | 只有路径不同\n<https://store.company.com/secure.html>           | 失败 | 不同协议 ( https和http )\n<http://store.company.com:81/dir/etc.html>        | 失败 | 不同端口 ( http:// 80是默认的)\n<http://news.company.com/dir/other.html>          | 失败 | 不同域名 ( news和store )\n\n同源策略一旦出现漏洞被绕过，将会出现严重的后果\n\n## 浏览器沙箱\n\n>沙箱设计的目的是为了让不可信的代码运行在一定的环境中，从而限制这些代码访问隔离区之外的资源。如果因为某种原因，确实需要访问隔离区外的资源，那么就必须通过的指定的通道，这些通道会进行严格的安全检查，来判断请求的合法性。通道会采取默认拒绝的策略，一般采用封装 API 的方式来实现\n\n## 恶意网址拦截\n\n大部分都是通过识别上传到云，浏览器厂商共享数据库，从而识别恶意网站\n\n## 防盗链\n\n>盗链是指服务提供商自己不提供服务的内容，通过技术手段绕过其它有利益的最终用户界面（如广告），直接在自己的网站上向最终用户提供其它服务提供商的服务内容，骗取最终用户的浏览和点击率。受益者不提供资源或提供很少的资源，而真正的服务提供商却得不到任何的收益\n\n### 实现原理\n\n通过判断HTTP请求头referer（访问的来源）字段，服务端再根据该字段是否返回资源\n\n```java\npublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\tthrows IOException, ServletException {\n\tHttpServletRequest req = (HttpServletRequest) request;\n\tString referer = req.getHeader(\"Referer\");\n\tif (StringUtils.isEmpty(referer)) {\n\t\trequest.getRequestDispatcher(\"/imgs/error.png\").forward(request, response);\n\t\treturn;\n\t}\n\tString domain = getDomain(referer);\n\tif (!domain.equals(domainName)) {\n\t\trequest.getRequestDispatcher(\"/imgs/error.png\").forward(request, response);\n\t\treturn;\n\t}\n\tchain.doFilter(request, response);\n}\n```\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}