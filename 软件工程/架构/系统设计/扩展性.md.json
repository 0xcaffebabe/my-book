{"content":"# 扩展性\n\n添加新功能时对现有系统的其它应用无影响\n\n- AKF扩展立方体\n\n![屏幕截图 2021-09-25 210155](/assets/屏幕截图%202021-09-25%20210155.png)\n\n## 应用扩展\n\n实际应用场景中，一般会是3种扩展方式组合使用：\n\n![202192521355](/assets/202192521355.png)\n\n### X\n\n无状态服务，水平克隆出许多系统，通过负载均衡分配请求\n\n有状态服务则需要进行状态剥离，使用外部服务器存储状态\n\n这种扩展可以弹性扩缩容，做性能规划也可以通过量化的方式计算得到，不用考虑到业务，复制出来的机器环境应该都是同构的\n\n### Y\n\n基于功能或者服务分割\n\n不同的服务功能、资源互不干扰，数据一致性可以得到保证。这种扩展与业务耦合在一起\n\n### Z\n\n面向查找分割，基于用户、请求或者数据分割\n\n加速读操作，可以实现有状态服务，是一种技术上的扩展，没有业务耦合\n\n## 数据扩展\n\nES的数据存储架构就是通过扩展X、Z的方式来分布的\n\n当我们根据业务来扩展时，就是扩展的Y\n\n### X\n\n- 传统关系型数据的读写分离 一写多读\n- NoSQL的多副本\n- 缓存\n\n没有强一致性 只有最终一致性 但是复制起来很简单 多副本的数据可用性很高\n\n### Y\n\n根据不同的信息类型，分割为不同的数据库，即分库，例如产品库，用户库等\n\n拥有数据故障隔离、强一致性的优势 但是该方式与业务耦合\n\n### Z\n\n按照一定算法，进行分片\n\n可以加速读、没有扩展上线，不需要考虑业务、数据强一致性\n\n## 组织扩展\n\n每个团队内部有XZ扩展，各个团队通过Y划分\n\n## 流程扩展\n\n常见的流程：ITIL、ITSM、6西格玛、CI/CD\n\n架构流程：JAD联合架构设计、ARB架构评审会\n\nCMMI软件成熟度模型来评价流程\n\n## 扩展性实现\n\nX：无状态化 + 容器 + Serverless\n\nZ：多副本 + 读写分离 + 数据分片\n\nY：业务分离 + 服务化\n\n- 使用消息队列对上下游应用解耦\n- 使用分布式服务将业务与服务分离，服务都是一些可复用的服务，添加新功能时，只要调用已有的服务即可\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}