{"content":"# 安全\n\n## 认证\n\n### HTTP 认证\n\n如果需要认证，服务端会返回这样的信息：\n\n```http\nWWW-Authenticate: <认证方案> realm=<保护区域的描述信息>\nProxy-Authenticate: <认证方案> realm=<保护区域的描述信息>\n```\n\n客户端接收到后，需要遵循服务的指定的认证方案：\n\n```http\nAuthorization: <认证方案> <凭证内容>\nProxy-Authorization: <认证方案> <凭证内容>\n```\n\n服务端进行认证，根据成功与否返回200或者403\n\n对于凭证内容，默认是Base64编码，但还有其他的一些认证方案：\n\n- Digest\n- Bearer\n- HOBA\n\n### 表单认证\n\n对于表单认证 并没有一个通用的标准 应该这些内容必须放到应用层面解决\n\nWebAuthn：新的认证标准\n\n### Java的实现\n\n- JACC\n- JASPIC\n- EE Security\n\n但实际上 活跃在Java安全领域的是两个私有标准 Shiro 和 Spring Security\n\n## 授权\n\n>系统如何控制一个用户该看到哪些数据、能操作哪些功能\n\n### RBAC\n\n![屏幕截图 2020-11-16 145753](/assets/屏幕截图%202020-11-16%20145753.png)\n\n简化了配置操作 并且满足了最小特权原则\n\n- RBAC-1模型可以描述角色继承关系\n- RBAC02模型可以描述角色互斥\n\n### OAuth2\n\n> OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。同时，任何第三方都可以使用OAUTH认证服务，任何服务提供商都可以实现自身的OAUTH认证服务。\n\n![屏幕截图 2020-11-16 151158](/assets/屏幕截图%202020-11-16%20151158.png)\n\n#### 授权码模式\n\n![屏幕截图 2020-11-16 151328](/assets/屏幕截图%202020-11-16%20151328.png)\n\n这种模式考虑到了许多种情况 但是是在假设第三方应用有自己的服务器的基础上 而且授权过程也过分繁琐\n\n#### 隐式授权\n\n![屏幕截图 2020-11-16 151636](/assets/屏幕截图%202020-11-16%20151636.png)\n\nFragment是不会跟随请求被发送到服务端的，只能在客户端通过Script脚本来读取。所以隐式授权巧妙地利用这个特性，尽最大努力地避免了令牌从操作代理到第三方服务之间的链路存在被攻击而泄漏出去的可能性\n\n#### 密码模式\n\n![屏幕截图 2020-11-16 152000](/assets/屏幕截图%202020-11-16%20152000.png)\n\n这种情况下需要把密码提供给第三方 要求第三方必须十分可信\n\n#### 客户端模式\n\n![屏幕截图 2020-11-16 152320](/assets/屏幕截图%202020-11-16%20152320.png)\n\n## 凭证\n\n### Cookie-Session\n\n通过在响应头设置这么样的一项：\n\n```http\nSet-Cookie: id=cxk; Expires=Wed, 21 Feb 2020 07:28:00 GMT; Secure; HttpOnly\n```\n\n后客户端每次请求都会将这个Cookie带上到请求头\n\n```http\nGET /index.html HTTP/2.0\nHost: www.baidu.com\nCookie: id=cxk\n```\n\n但系统可以将这个Cookie以一个key看待，在服务端开辟一块内存，形成一个KV对，这就是Session\n\n但 Cookie会有跨域问题， Sesssion 在集群环境下又会有问题\n\n### JWT\n\n> JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于 在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公 钥/私钥对来签名，防止被篡改\n\n![批注 2019-10-27 140739](/assets/批注%202019-10-27%20140739.png)\n\n无状态，既是优点 也是缺点 虽然可以进行无状态服务节点水平扩展 但在某些业务场景下 实现某些功能还是优点困难\n\n- 缺点：令牌长度较长，这就意味着传输会有问题，某些服务器对Header是有限制的\n\n#### 组成\n\n- 头部\n\n```json\n{\"typ\":\"JWT\",\"alg\":\"HS256\"} // 经过base64加密后：eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\n```\n\n- 载荷\n  - 标准中注册的声明\n  - 公共的声明\n    - iss（Issuer）：签发人。\n    - exp（Expiration Time）：令牌过期时间。\n    - sub（Subject）：主题。\n    - aud （Audience）：令牌受众。\n    - nbf （Not Before）：令牌生效时间。\n    - iat （Issued At）：令牌签发时间。\n    - jti （JWT ID）：令牌编号\n  - 私有的声明\n\n```json\n{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"admin\":true} // eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n```\n\n- 签证\n\n```\nheader (base64后的)\npayload (base64后的)\n使用secret对header以及payload进行一个签名\n```\n\n>secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用 来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去\n\n#### JJWT\n\n- 依赖\n\n```xml\n<dependency>\n    <groupId>io.jsonwebtoken</groupId>\n    <artifactId>jjwt</artifactId>\n    <version>0.9.1</version>\n</dependency>\n```\n\n- 构建\n\n```java\nJwtBuilder jwtBuilder = Jwts.builder()\n        .setId(\"jntm\")\n        .setSubject(\"cxk\")\n        .setIssuedAt(new Date())\n        .signWith(SignatureAlgorithm.HS256,\"1234\")\n        .claim(\"role\",\"admin\")\n        .setExpiration(new Date(System.currentTimeMillis()+300));\nSystem.out.println(jwtBuilder.compact());\n```\n\n- 解析\n\n```java\nClaims body = Jwts.parser().setSigningKey(\"1234\")\n        .parseClaimsJws(\"jwt\")\n        .getBody();\nSystem.out.println(body.getId()+\"|\"+body.getSubject()+\"|\"+body.getIssuedAt());\n```\n\n## 保密\n\n保密是有成本的，追求越高的安全等级，就要付出越多的工作量与算力消耗\n\n### 客户端加密\n\n客户端加密并非是为了传输安全 传输安全应该由诸如HTTPS等的机制来进行保障 更多地 客户端加密是为了避免明文传输到服务端后造成的安全问题\n\n### 密码加密与存储\n\n#### 加密\n\n1. 客户端对自己的密码取摘要：\n\n```js\nconst passwd = 123456\nconst client_hash = MD5(passwd)\n```\n\n2. 得到摘要后进行加盐：\n\n```js\nclient_hash = MD5(client_hash + salt)\n```\n\n为了应对彩虹表类的暴力破解，摘要函数可以使用慢哈希函数 也就是执行时间可以调节的函数（比如Bcrypt）\n\n3. 为了防止服务端被脱库，服务端再使用一个盐：\n\n```java\nString salt = randomSalt();\nString serverHash = SHA256(client_hash + salt)\naddToDB(serverHash, salt)\n```\n\n#### 验证\n\n1. 客户端加密还是同上，进行加盐哈希\n\n```js\nclient_hash = MD5(MD5(passwd) + salt)\n```\n\n2. 服务端接收到client_hash 后，对其加盐哈希，判断是否与存储的一致：\n\n```java\ncompare(server_hash, SHA256(client_hash + server_salt))\n```\n\n## 传输\n\n三种基本算法：\n\n<table><thead><tr><th><div style=\"width: 80px;\">类型</div></th> <th>特点</th> <th>常见实现</th> <th>主要用途</th> <th>主要局限</th></tr></thead> <tbody><tr><td>哈希摘要</td> <td>不可逆，即不能解密，所以并不是加密算法，只是一些场景把它当作加密算法使用。<br>易变性，输入发生1Bit变动，就可能导致输出结果50%的内容发生改变。<br>无论输入长度多少，输出长度固定（2的N次幂）。</td> <td>MD2/4/5/6、SHA0/1/256/512</td> <td>摘要</td> <td>无法解密</td></tr> <tr><td>对称加密</td> <td>加密是指加密和解密是一样的密钥。<br>设计难度相对较小，执行速度相对较块。<br>加密明文长度不受限制。</td> <td>DES、AES、RC4、IDEA</td> <td>加密</td> <td>要解决如何把密钥安全地传递给解密者。</td></tr> <tr><td>非对称加密</td> <td>加密和解密使用的是不同的密钥。<br>明文长度不能超过公钥长度。</td> <td>RSA、BCDSA、ElGamal</td> <td>签名、传递密钥</td> <td>性能与加密明文长度受限。</td></tr></tbody></table>\n\n### 数字证书\n\nCA将用户的个人身份跟公开密钥链接在一起 可以防抵赖\n\n通过操作系统内置的证书 可以在不通过网络的情况下对证书进行认证\n\n### 传输安全层\n\n- TLS\n\n## 验证\n\n>系统如何确保提交到每项服务中的数据是合乎规则的，不会对系统稳定性、数据一致性、正确性产生风险\n\n- 分层校验\n- Bean Validation：好处就是做到了业务逻辑与校验逻辑相分离\n  - 更高级的用法：校验业务逻辑\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}