{"content":"# 高并发\n\n- 高并发读\n- 高并发写\n- 高并发读写\n\n单个数据库每秒两三千并发就基本扛不住了\n\n![批注 2020-03-20 185429](/assets/批注%202020-03-20%20185429.png)\n\n## 系统拆分\n\n将单体系统拆分成多个系统或者多个服务，每个子系统使用自己的数据库，提高并发度\n\n大部分的系统都是需要经过多轮拆分的，第一轮拆分将系统粒度划的小一点，可能随着业务的发展，单个系统会变得更复杂，所以需要进一步的拆分\n\n拆分的维度：\n\n- 业务维度\n- 功能维度\n- 资源维度 资源使用多与使用少的场景划分\n\n## 局部并发原则\n\n将同步调用的外部服务拆分为多个无关异步调用，来提升性能\n\n## 高性能流程\n\n### 容量规划\n\n使用压测监控预测等确定要支撑多少性能指标 确定哪些性能指标的基准水位线\n\n### 负载测试\n\n测试系统在正常运行压力下的各项指标，这个流程是一个长期的流程以保证系统性能可预测，出现问题也能发现问题在哪\n\n### 压力测试\n\n要压到发现系统失效点，远高于正常的负载 只对关键、瓶颈业务进行测试 好钢用在刀刃上\n\n失效点关注于响应时间、内存、失败率等异常指标\n\n### APM监控\n\n- 基础监控：通过时序数据等指标发现异常以告警\n- 追踪监控：通过链路追踪以发现出错的原因\n- 业务监控\n\n### 弹性扩缩容\n\n根据监控，使用策略，管理资源\n\n## 高并发读\n\n### 策略：加缓存\n\n大部分高并发的场景，都是写多读少，使用缓存，可以有效抗住高并发\n\n对于缓存需要考虑 雪崩 击穿 穿透 等缓存问题\n\n- 本地缓存或以Redis为代表的集中式缓存\n- 数据库主从复制分担主库压力\n- CDN 静态加速\n\n### 策略：并发读\n\n- 异步RPC 要求各个调用之间是独立的\n  - 既然数据库每秒能撑住的请求是有限的，那么就可以使用MQ，大量的请求灌入MQ，利用MQ的削峰，让下游系统慢慢消费\n- 冗余请求 通过每次调用多个服务器 哪个返回的快就使用的哪个\n- 分库分表 让每个表的数据少一点，提高SQL的执行速度\n\n### 策略：重写轻读\n\n某些事件产生的数据提前聚合好 等需要的时候直接读取即可 而非在需要的时候实时计算\n\n### 总结：读写分离\n\n![屏幕截图 2020-09-27 203436](/assets/屏幕截图%202020-09-27%20203436.png)\n\n- 数据库读写分离\n\n大部分对数据库的请求都是读多写少，所以读写分离，分配多一些机器给读请求，能有效提高性能\n\n## 高并发写\n\n### 策略：数据分片\n\n- 数据库分库分表\n- JDK的ConcurrentHashMap 通过分段(之前的版本) 来降低竞争\n- Kafka的分区 不同的分区可以并发地读写\n- ES分布式索引\n\n### 策略：任务分片\n\n- 指令流水线\n- mapreduce\n\n### 策略：异步化\n\n减少等待、Y轴扩展、削峰填谷\n\n- 系统层面：异步网络模型\n- JDK层面 NIO等\n- 接口层面 线程池 异步调用 Future等\n- 业务层面 RPC方式\n\n### 策略：批量\n\n- 批量写入数据\n- 将小操作合并成一整个大操作\n\n## 妥协\n\n资源是有限的 并发无上限\n\n- 排队系统\n  - 基于阻塞方式\n  - 基于令牌方式（令牌桶）\n- 熔断降级\n\n## 负载均衡\n\n>调度后方的多台机器，以统一的接口对外提供服务，承担此职责的技术组件被称为“负载均衡”。\n\n- 四层负载均衡优势是性能高，七层负载均衡的优势功能强\n- 做多级混合负载均衡，通常应是低层的负载均衡在前，高层的负载均衡在后\n\n“四层”的意思是说这些工作模式的共同特点是都维持着同一个TCP连接，而不是说它就只工作在第四层\n\n### 链路负载均衡\n\n通过DNS解析来完成\n\n实时性不强 一旦后端服务器宕机 这种负载方式无法及时发现\n\n![屏幕截图 2020-09-27 114654](/assets/屏幕截图%202020-09-27%20114654.png)\n\n### 操作系统负载均衡\n\n利用系统级别的中断以及多队列网卡等来充分利用资源 达到负载均衡的功能\n\n### 客户端负载均衡\n\n![20201119153626](/assets/20201119153626.png)\n\n- 传统微服务\n\n### 代理负载均衡\n\n![20201119153942](/assets/20201119153942.png)\n\n- 服务网格\n\n### 集群负载均衡\n\n#### 网络级别的负载均衡\n\n- 数据链路层负载均衡\n  直接修改请求的数据帧中的MAC目标地址，让用户原本是发送给负载均衡器的请求的数据帧，被二层交换机根据新的MAC目标地址转发到服务器集群中对应的服务器\n  二层负载均衡器直接改写目标MAC地址的工作原理决定了它与真实的服务器的通讯必须是二层可达的\n\t效率很高，但必须是二层可达，这就导致了它适合做第一级负载设备\n\t![屏幕截图 2020-11-15 124626](/assets/屏幕截图%202020-11-15%20124626.png)\n- 网络层负载均衡\n\t- IP隧道模式：对IP包进行封装，封装成一个新包发送到后端服务器\n\t\t这种方式需要后端服务器持有一个VIP 这样才能直接响应请求，不够透明\n\t\t![屏幕截图 2020-11-15 125319](/assets/屏幕截图%202020-11-15%20125319.png)\n\t- NAT模式：直接由均衡器对IP头进行修改 所有数据报都要经过均衡器\n\t\t这个均衡器很容易称为瓶颈\n\t\t![屏幕截图 2020-11-15 130127](/assets/屏幕截图%202020-11-15%20130127.png)\n\t- 更彻底的NAT模式：均衡器在转发时，不仅修改目标IP地址，连源IP地址也一起改了，源地址就改成均衡器自己的IP，称作Source NAT（SNAT）\n\t\t在后端服务器的视角看来，所有的流量都来自于负载均衡器\n- 应用层负载均衡\n\t该层的优势就在于比链路层 网络层可以得到更多的信息 从而做出更加智能的决策\n\n#### 均衡策略与实现\n\n- 轮循均衡\n- 权重轮循均衡\n- 随机均衡\n- 权重随机均衡\n- 一致性哈希均衡\n- 响应速度均衡\n- 最少连接数均衡\n\n均衡器的实现则有：\n\n- 硬件负载均衡\n  - F5\n\t![屏幕截图 2020-09-27 114917](/assets/屏幕截图%202020-09-27%20114917.png)\n\n- 软件负载均衡\n  - 构建在内核的：LVS\n\t- 应用程序的形式：Nginx、HAProxy、KeepAlived\n\t![屏幕截图 2020-09-27 114946](/assets/屏幕截图%202020-09-27%20114946.png)\n\t请求会经过多台服务器 会增加网络时延\n\n##### LVS\n\n- D-NAT模式\n\n![批注 2020-06-04 155213](/assets/批注%202020-06-04%20155213.png)\n\n- DR模式\n\n![批注 2020-06-04 155344](/assets/批注%202020-06-04%20155344.png)\n\n将RS的VIP配置在内核中\n\n- TUN模式\n\n![批注 2020-06-05 133425](/assets/批注%202020-06-05%20133425.png)\n\n调度算法:\n- 静态\n  - 轮询\n  - 加权轮询\n  - ...\n- 动态\n  - 最少连接\n  - 加权最少连接\n  - ...\n\n流程：\n\n![批注 2020-06-05 161431](/assets/批注%202020-06-05%20161431.png)\n\n```\nnode01:\n\tifconfig  eth0:8 192.168.150.100/24\nnode02~node03:\n\t1)修改内核：\n\t\techo 1  >  /proc/sys/net/ipv4/conf/eth0/arp_ignore \n\t\techo 1  >  /proc/sys/net/ipv4/conf/all/arp_ignore \n\t\techo 2 > /proc/sys/net/ipv4/conf/eth0/arp_announce \n\t\techo 2 > /proc/sys/net/ipv4/conf/all/arp_announce \n\t2）设置隐藏的vip：\n\t\tifconfig  lo:3  192.168.150.100  netmask 255.255.255.255\n\t\t\nRS中的服务：\nnode02~node03:\n\tyum install httpd -y\n\tservice httpd start\n\tvi   /var/www/html/index.html\n\t\tfrom 192.168.150.1x\n\nLVS服务配置\nnode01:\n\t\tyum install ipvsadm \n\tipvsadm -A  -t  192.168.150.100:80  -s rr\n\tipvsadm -a  -t 192.168.150.100:80  -r  192.168.150.12 -g -w 1\n\tipvsadm -a  -t 192.168.150.100:80  -r  192.168.150.13 -g -w 1\n\tipvsadm -ln\n\n验证：\n\t浏览器访问  192.168.150.100   看到负载  疯狂F5\n\tnode01：\n\t\tnetstat -natp   结论看不到socket连接\n\tnode02~node03:\n\t\tnetstat -natp   结论看到很多的socket连接\n\tnode01:\n\t\tipvsadm -lnc    查看偷窥记录本\n\t\tTCP 00:57  FIN_WAIT    192.168.150.1:51587 192.168.150.100:80 192.168.150.12:80\n\t\tFIN_WAIT： 连接过，偷窥了所有的包\n\t\tSYN_RECV： 基本上lvs都记录了，证明lvs没事，一定是后边网络层出问题\n```\n\n问题：\n- LVS可能会发生单点故障\n  - 主备\n- RS挂的话，部分请求会失败\n\n##### keepalived\n\n作为一个通用工具，解决高可用问题\n\n配置\n\n```\nvrrp_instance VI_1 {\n        state MASTER // 备服务器BACKUP\n        interface eth0\n        virtual_router_id 51\n        priority 100\n        advert_int 1\n        authentication {\n                auth_type PASS\n                auth_pass 1111\n        }\n        virtual_ipaddress {\n                172.17.0.100/16 dev eth0 label  eth0:3\n        }\n}\nvirtual_server 172.17.0.100 80 {\n        delay_loop 6\n        lb_algo rr\n        lb_kind DR\n        nat_mask 255.255.255.0\n        persistence_timeout 0\n        protocol TCP\n        real_server 172.17.0.4 80 {\n                weight 1\n                HTTP_GET {\n                        url {\n                                path /\n                                status_code 200\n                        }\n                        connect_timeout 3\n                        nb_get_retry 3\n\t\t\t\t\t\t\t\t\t\t\t\tdelay_before_retry 3\n                }\n        }\n        real_server 172.17.0.6 80 {\n                weight 1\n                HTTP_GET {\n                        url {\n                                path /\n                                status_code 200\n                        }\n                        connect_timeout 3\n                        nb_get_retry 3\n                        delay_before_retry 3\n                }\n        }\n}\n```","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}