{"content":"# 可用性\n\n## 本地可用\n\n- 解决的是硬件、网络故障\n\nCAP：\n\n- CA：集群架构\n- CP：\n- AP：分布式架构\n\n## 数据逻辑保护\n\n大部分影响可用性的原因是人为操作的失误\n\n- 预防：备份、变更审核\n- 监控：系统异常行为监控\n- 修复：版本回滚 数据恢复\n\n备份、快照、CDP、事件溯源\n\n## 容灾多活\n\n### 技术路线\n\n- 数据库（应用层）容灾：同构数据库下的数据同步 需要关注网络、主机资源问题\n- SAN网络层容灾\n- 存储层容灾：存储环境必须一致 依赖于特定厂商\n\n### DRP规划\n\n- 灾难恢复计划\n\n![202192721112](/assets/202192721112.png)\n\n业务影响分析：确定最核心业务\n\nRTO RPO\n\n### 容灾演练\n\n根据文档内容进行测试与排练\n\n在非生产环境进行模拟测试 在生产环境进行并行测试\n\n中断测试\n\n### BCP业务连续性计划\n\n### 多活方案\n\n- 双活\n  - 成本 = 1/(N-1) * N\n- 两地三中心\n\n## 冗余\n\n保证高可用的主要手段是使用冗余\n\n- 对于应用服务器来说，保证是无状态的，就可以实现冗余\n- 而对于存储服务器，需要通过主从复制来实现冗余\n\n## 隔离\n\n指将系统或资源分隔开 在发生故障时尽可能缩小影响范围\n\n### 线程隔离\n\n主要是在多线程环境下，对线程池进行治理，把核心业务和非核心业务分割开。\n\n使用线程池来进行隔离，不同线程池中的线程是互相隔离的\n\nTomcat 中的线程隔离：\n\n![2020779333](/assets/2020779333.png)\n\n**线程隔离，只能保证在分配线程这个资源上进行隔离，并不能保证整体稳定性**\n\n### 进程隔离\n\njava  cpu、内存这些资源可以通过不同的虚拟机进程来做隔离。\n\n1. 集群式\n2. 分布式\n\n### 集群隔离\n\n一些模块容易在并发量高的时候因为这种功能把整个模块占有的资源全部耗尽\n\n解决方案\n\n- 独立拆分模块\n- 微服务化\n\n### 机房隔离异地多活\n\n把服务建立整体副本（计算服务、数据存储），在多机房内做异地多活或冷备份、是微服务数据异构的放大版\n\n当在机房层面出现问题的时候，可以通过智能dns、httpdns、负载均衡等技术快速切换\n\n### 数据（读写）分离\n\n通过主从模式，将mysql、redis等数据存储服务集群化，读写分离，那么在写入数据不可用的时候，也可以通过**重试机制**临时通过其他节点读取到数据。\n\n多节点在做子网划分的时候，除了异地多活，还可以做数据中心，所有数据在本地机房crud 异步同步到数据中心，数据中心再去分发数据给其他机房\n\n### 动静分离\n\n- cdn\n\n### 爬虫隔离\n\n有的系统有时候就会因为爬虫流量过高而导致资源耗尽，服务不可用\n\n## 熔断\n\n限流是服务方对自己的保护 熔断是调用方对自己的保护\n\n- 某个接口请求失败率达到一定阈值 就直接熔断这个接口(调用方不再调用它)\n- 或者响应时间达到阈值 也可以熔断\n\n## 降级\n\n为了保证整体系统可用性，可以牺牲一部分功能依旧提供**有损服务**\n\n## 降级处理\n\n### 兜底数据\n\n默认值: 设置安全的默认值，不会引起数据问题，比如库存为0\n\n静态值:请求的页面或api无法返回数据，提供一套静态数据展示，比如加载失败提示重试，或默认菜单\n\n缓存: 缓存无法更新便使用旧的缓存\n\n## 降级原则\n\n距离用户越近 造成损失越小 避免滚雪球效应\n\n降级不是一种具体的技术手段 更多的与业务相关 需要根据业务来决定如何降级\n\n- 主动降级：通过配置中心关闭非核心功能\n- 多级降级：读缓存 -> 缓存压力过大 -> 返回默认值\n\n### 降级类型\n\n- 限流降级\n  - 当流量洪峰到达的时候，对于丢弃的用户可以提供友好的提示\n- 超时降级\n  - 对调用的数据设置超时时间，当调用失败，对服务降级\n- 重试/自动处理\n  - 当达到重试次数后，增加访问标记，服务降级，异步探测服务是否恢复(熔断器半开)\n  - 注意幂等性\n- 数据组装降级\n  - 多库/多维度组装JSON/XML时，如果有一些不重要的数据无法获取或数据出错，可以忽略继续\n- 爬虫降级\n  - 分析机器人行为 引到到静态页或缓存页\n- 读降级\n  - 多级缓存架构下，后端缓存或db不可用，可以使用前端缓存或兜底数据\n- 写降级\n  - 高并发场景下，写入操作无法及时到达或抗压，可以异步消费数据/cache更新/log等方式\n- 前端降级\n  - js 埋点\n  - 接入层降级 nginx\n  - 应用层降级 hystrix sentinel\n- 片段降级\n  - 忽略js文件加载\n- 静态化降级\n  - 缓存静态化html 作为兜底数据\n\n## 灰度发布与回滚\n\n- 新功能灰度上线\n  - 蓝绿部署\n  - 金丝雀发布\n- 旧系统灰度重构\n  - 新旧系统共存 通过在入口处进行流量分发\n- 回滚\n  - 通过开关停止将流量分发到新系统\n\n## 监控与报警\n\n监控体系：\n\n- 资源监控 内存 CPU等\n- 系统监控 接口请求信息 响应时间等等\n- 业务监控 订单交易数 支付成功率等等\n\n报警：\n\n- 日志\n\n## 可用性流程\n\n- SRE文化\n- 混沌工程\n- SAP业务高可用评估\n- 系统高可用评估\n  - MTBF\n  - MTTR\n- CAT应用监控\n\n![202192722726](/assets/202192722726.png)\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}