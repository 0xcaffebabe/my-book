{"content":"# 架构风格\n\n- 模式\n\n## 数据流风格\n\n所有的数据按照流的形式在执行过程中前进，不存在结构的反复和重构，数据在流水线的各个节点上被加工。每完成一个环节，数据流都会被送入下一个环节，最终输出处理后的完整结果\n\n该风格的特点就是\n\n- 解耦\n- 复用\n- 高吞吐\n\n### 批处理\n\n特点：\n\n- 强时间顺序：只有当前一步的计算任务处理完成后，后一步处理才能开始。计算任务前后顺序明确。\n- 强完整性：数据传送在计算单元之间通过指定的数据交互方式传递。每一步要确保数据完整，才可以向下一步发起数据传送。\n- 强控制力度：有独立的顺序控制和时间把控机制，并辅以数据检查等功能。\n\n### 管道过滤\n\n从用户或者上游管道获得输入数据，进行数据的变换及增量计算，处理完成后，通过下游管道传递给另一个过滤器\n\n![2021913233719](/assets/2021913233719.jpg)\n\n## 调用返回风格（请求响应）\n\n指在系统中增加了调用与返回机制。利用调用和返回，实现分而治之，将一个复杂的大系统分解为一些子系统，以便降低复杂度，并且增加可修改性\n\n### 主程序/子程序\n\n- 对应于面向过程开发\n\n### 面向对象风格\n\n- 面向对象编程\n\n### 层次结构风格\n\n每一层可以独立设计、开发，只要满足和上下层的接口定义即可。层间解耦\n\n## 独立构件风格\n\n描述了在一个应用系统中，各个构件是如何进行通信的\n\n### 进程通信\n\n通常以同步调用为主，辅以异步交互式通信方式\n\n### 事件驱动系统\n\n基于事件的隐式调用风格，构件不直接调用一个过程，而是触发或广播一个或多个事件。后续执行过程会被注册在一个或多个事件，当对应的事件被触发或者广播时，系统会自动调用该事件中注册的过程，执行相应的模块功能\n\n![202191423640](/assets/202191423640.jpg)\n\n## 虚拟机风格\n\n### 解释器\n\n可以仿真硬件的执行过程和一些关键应用，通常被用来弥合程序语义与硬件语义之间的差异。其缺点是执行效率较低\n\n### 基于规则的系统\n\n规则的细节被引擎所解析，来决定业务、监控等策略和措施的制定\n\n- 大数据/人工智能\n\n![202191423912](/assets/202191423912.jpg)\n\n## 仓库风格\n\n关注的重点是数据的存储和共享方式，最偏重数据共享的一种风格\n\n### 数据库系统\n\n### 超文本系统\n\n- 是用于共享静态网页\n\nCMS\n\n### 黑板\n\n用于记录组织推理步骤、控制状态数据和问题求解之领域知识的框架。它将问题的解空间组织成一个或多个应用相关的分级结构。这些分级结构将由不同的专家（系统），通过不同知识表达方法、推理框架和控制机制的组合来形成各自的知识源\n\n![202191423145](/assets/202191423145.jpg)\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}