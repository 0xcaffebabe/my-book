{"content":"# 架构\n\n架构满足了应用程序的非功能性需求：可维护性、可测试下、可扩展性、可部署性等。\n\n架构的分类：\n\n- 基础架构 以云平台 操作系统等基础设施为主\n- 中间件与大数据架构\n- 业务系统架构\n    - 通用软件系统 办公软件 浏览器等一类\n    - 离线业务系统 大数据分析 数据挖掘系统\n    - 在线业务系统 在线为特定业务服务的系统\n\n这些不同分类的架构界限不是很清晰 随着时间演进 各个类型之间的系统边界会互相渗透\n\n架构视图：\n\n![屏幕截图 2021-01-18 170117](/assets/屏幕截图%202021-01-18%20170117.png)\n\n- 逻辑\n- 物理\n- 应用\n- 技术\n- 功能\n- 部署\n\n架构体系框架：\n\n- ABSD\n- DSSA\n- AT\n\n## 架构的演进\n\n站在后端开发人员的角度上软件架构风格从大型机（Mainframe），到原始分布式（Distributed），到大型单体（Monolithic），到面向服务（Service-Oriented），到微服务（Microservices），到服务网格（Service Mesh），到无服务（Serverless）\n\n谈起微服务，会想到技术异构，便于部署，高性能等等，但这些似乎都只是锦上添花，架构的核心在于解决软件的存活问题，如果一个软件压根就不能提供服务，这些锦上添花的功能也毫无作用\n\n## 架构认知的派别\n\n### 组成派\n\n架构由 模块/服务/领域 组成\n\n本质在描述组件与组件之间的交互（画各种架构图）\n\n### 决策派\n\n软件架构由一个个决策组成的有机整体（把架构比作城市规划）\n\n每个做的决策都有它背后的原因\n\n## 架构的目标\n\n用最小的人力成本来满足构建和维护该系统的需求\n\n- 乱麻系统\n\n过度的自信导致软件维护成本持续上升\n\n### 两个维度\n\n- 行为价值\n  - 让系统正常运行\n- 架构价值\n  - 让系统更容易修改\n\n## 架构的意义\n\n### 项目干系人交流的手段\n\n语境不同、立场不同、渠道问题等导致的语义失真 所以使用架构作为手段沟通\n\n### 演进有助于原型的确定与设计\n\n- 拆迁者模式（直接替换转移）\n- 绞杀者模式（逐步替换转移，直至旧系统全部消失）\n- 修缮者模式（同上，老旧系统共存 逐步替换）\n\n### 早期设计决策的体现\n\n如果做架构决策：\n\n- SWOT分析\n- RASCI决策\n\n### 明确系统实现的约束条件\n\n![202191322132](/assets/202191322132.jpg)\n\nRAID矩阵：\n\n|-|Risk | Assumption | Issue | Dependency\n-|-|-|-|-\n决策1|||||\n决策2|||||\n决策3|||||\n\n### 是组织架构的反映 会影响组织架构\n\n- 康威定律\n\n### 是可复用、可传递的模型\n\n- 方法论\n- 模型\n\n架构可复用的内容一般都是比较少的，每个项目的架构肯定不能照搬 需要裁剪\n\n为了复用，需要对架构资产进行更新与保留，拥有一个知识传承的平台\n\n## 四种架构模式\n\n### 分层\n\n也就说传统的水平分层架构，在项目初期很合适\n\n```java\npackage controller{\n    Controller;\n}\npackage service {\n    Service;\n    ServiceImpl;\n}\npackage dao {\n    Dao;\n}\n```\n\n### 按功能封装\n\n即垂直切分\n\n```java\npackage Order {\n    OrderController;\n    OrderService;\n    OrderDao;\n}\n```\n\n### 端口与适配器\n\n```java\npackage controller{...}\n\npackage domain {\n    Service;\n    ServiceImpl;\n    Domain;\n}\n\npackage dao{...}\n```\n\n### 按组件封装\n\n优点服务架构的味道\n\n```java\npackage controller {...}\npackage order {\n    Service;\n    Dao;\n}\n```\n\n## COLA\n\n### 扩展设计\n\n在系统设计时，针对业务或者场景预留一些扩展点\n\n## 架构的未来\n\n- 云化：XaaS\n- 演进式\n\n## 具体技术下的架构\n\n- 单体架构：Spring Boot\n\n使用传统的分层，打成一个jar包 运行它\n\n![20201027154734](/assets/20201027154734.png)\n\n- 微服务：Spring Cloud\n\n高可用 高性能等需求使我们不得不对系统进行拆分，在前面的单体架构下，分成多个工程 业务代码与服务基础设施代码耦合在一起 构成了传统的微服务，也是目前最流行的架构\n\n![20201027154755](/assets/20201027154755.png)\n\n- 微服务：K8S\n\n在传统的微服务下，基础设施代码与业务代码耦合在一起，这个阶段下使用了K8S的容器基础设施来完成大部分服务治理功能，应用程序可以更专注我们的业务\n\n![20201027154819](/assets/20201027154819.png)\n\n- 服务网格：Istio\n\nK8S将服务治理沉淀到基础设施只是第一步，接下来服务网格将这事做的更加彻底，更加可管理 可观测\n\n![20201027154819](/assets/20201027154819_k1n1l7oa8.png)\n\n- 另外一条支线：无服务\n\n上传代码，某些事件会触发你的代码运行它，彻底不用管理基础设施，一切交给云\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}