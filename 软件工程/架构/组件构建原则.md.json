{"content":"# 组件构建原则\n\n## 组件\n\n> 组件是软件的部署单元，是可以独立完成部署的最小实体\n\n- 独立部署\n- 独立开发\n\n## 组件聚合\n\n### REP:复用/发布等同原则\n\n组件中的模块和类之间应该有一个共同的主题或者大方向\n\n### CCP:共同闭包原则\n\n应将那些会为了一个目的而同时修改的模块与类放到一个组件中\n\n### CRP:共同复用原则\n\n将经常共同复用的模块与类放在同一组件中\n\n- 不依赖不需要用到的东西\n\n## 组件耦合\n\n### ADP:无依赖环原则\n\n组件不应该出现循环依赖\n\n- 每周构建\n\n  - 将一周的前几天用来开发新代码，最后一天进行冲突解决\n\n- 消除循环依赖\n\n  - 通过划分独立组件进行独立开发及发布\n\n解决循环依赖\n\n- 依赖反转\n- 将相互依赖的模块提取到一个新模块\n\n_抖动_：随着项目的开发，组件结构会不断扩张变化\n\n### 自上而下的设计\n\n组件结构图更像是构建性与维护性方面的地图，组件结构图一个重要的目标是如何隔离频繁的组件变更\n\n组件的依赖关系是随着项目的逻辑设计而演进的，无法一开始就设计出完美的组件结构图\n\n### SDP:稳定依赖原则\n\n#### 稳定性\n\n与依赖于该模块的模块数量成正比\n\n- 越上层的组件越不稳定\n\n#### 抽象组件\n\n- 比如只存放接口的包\n\n抽象组件通常非常稳定\n\n### SAP:稳定抽象原则\n\n一个组件的抽象化程度应与其稳定性程度保持一致\n\n#### 抽象化衡量程度\n\n抽象程度 = 抽象类和接口的数量 / 组件中类的数量\n\n- 痛苦区：非常稳定且非常具体\n  - 如数据库表结构与工具类\n- 无用区\n  - 无限抽象，无人使用\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}