{"content":"# DevOps\n\n>DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。\n\n![](https://www.mendix.com/evaluation-guide/app-lifecycle/attachments/devops-cycle.png)\n\n- 代码托管\n- 虚拟化\n- 持续集成、交付\n- 无缺陷编程目标\n\n## 软件开发的困难\n\n- 复杂\n- 不可见\n- 可变\n- 一致性：兼容\n\n## 软件发展的三个阶段\n\n- 软件依附于硬件\n- 软件成为独立产品\n- 网络化服务化\n\n## 个体软件过程（PSP）\n\n- 与软件质量（满足用户的期望）息息相关\n\n### 典型的用户期望\n\n- 正常工作\n- 性能\n- 非功能需求（安全、可靠）\n\n### 质量策略\n\n- 缺陷管理\n\n### 基本流程\n\n- 策划\n- 设计\n- 编码\n- 单元测试\n- 总结\n\n### 基本原理\n\n- 软件系统的质量由组成该系统的质量最差组件决定\n- 软件质量与软件工程师息息相关\n- 建立持续自我改进机制\n\n### 过程度量\n\n- 规模\n  - 精确的规模度量在早期很难\n- 时间\n  - 良好的时间度量有助于工程师的能力\n- 缺陷\n- 日程\n\n#### 为什么要度量\n\n体现决策者对要实现目标的关切程度\n高质量的开发是计划出来的\n\n### 质量路径\n\n- 测试提高质量\n- 评审消除缺陷提高质量\n- PSP\n\n评审手段消除缺陷比测试消除效率更高\n\n#### 有效的评审\n\n- 评审检查表\n  - 分析整理历史项目的缺陷，辅助开展评审\n- 质量控制指标\n  - 设计质量：设计的时间应该大于编码的时间\n  - 设计评审质量:设计评审的时间应该大于设计时间的50%\n  - 代码评审质量:代码评审时间应该大于编码时间的50%\n  - 代码质量:代码的编译缺陷密度应当小于10个/千行\n  - 程序质量:代码单元测试缺陷密度应当小于5个/千行\n- 其他\n  - 环境\n    - 对阅读代码的辅助\n  - 时机\n    - 单元测试之前\n  - 个人评审与小组评审相结合\n  - 缺陷预防\n\n## 敏捷软件开发\n\n应对模糊需求、快速变化需求的最佳方法\n\n### 价值观\n\n- 个体和互动 高于 流程和工具\n- 工作的软件 高于 详尽的文档\n- 客户合作 高于 合同谈判\n- 响应变化 高于 遵循计划\n- 尽管右项有价值，但是左项大于右项\n\n简单 反馈 沟通 勇气 尊重\n\n### 原则\n\n快速反馈 及早交付 简洁为本\n\n### 方法\n\n极限编程 scrum kanban\n\n#### kanban\n\n渐进增量式过程改进方法学\n\n- 可视化工作流\n- 限制进行中的工作\n\n物理看板（信息辐射强）\n\n![批注 2020-05-05 135610](/assets/批注%202020-05-05%20135610.png)\n\n**使用**\n\n列非固定的，随时间空间变化而变化\n可以根据此看到工作状态与潜在问题\n\n记事贴写什么？\n\n- 工作描述·\n- 电子系统唯一标识\n- 完成期限\n- 负责人\n- 工作类型\n\n保证工作项的粒度粗细差别不大\n\n降低前置时间（任务从开始到结束的时间）是一个追求目标\n需要限制每列中的卡片\n\n### 实践\n\n技术实践：\n\n- CI\n- TDD\n- 重构\n- 结对编程\n\n### 精益思想\n\n- 消除浪费\n  - 不能增加价值的行为即为浪费\n- 增强学习（项目内容）\n- 尽量延迟决定\n- 尽快发布，尽快交付\n- 下放权力\n- 内置完整性\n- 全局优化\n\n### 工具\n\n任务板...\n\n## 软件架构演化\n\n### 单体架构\n\n全部功能被集成在一起作为一个单一的单元\n\n### 分层架构\n\n- 关注点分离\n\n每一层有特定的职责，上层只能直接访问下层\n\n### 面向服务架构\n\n- 关注点分离\n- 延迟绑定（设计到运行）\n\n消息总线与服务编排引擎\n\n### 微服务架构\n\n围绕**业务能力**构建的可独立开发部署的小型单元，使用远程调用进行通信\n\n- 核心模式\n  - 服务注册与发现\n  - api网关\n  - 熔断器\n\n挑战：\n\n- 对运维监控的挑战\n- 发布更复杂，出现分布式问题\n- 部署依赖性强\n- 通信成本高\n\n## 云原生与容器\n\n### 现代应用的十二范式\n\n![批注 2020-05-07 144500](/assets/批注%202020-05-07%20144500.png)\n\n### 云原生\n\n可快速可靠交付软件 微服务 DevOps\n\n### 持续交付\n\n使用敏捷开发来实现加快发布速度\n\n### 容器\n\n将不同特点的应用打包成一个标准化的应用\n\n- 有效分配与管理物理资源\n- 资源隔离\n\n### 容器编排与调度\n\n分布式应用由多个容器实例组成\n需要一种高效的方法来管理容器集群\n\n### 容器与devops\n\n此前交付的东西是代码\n当使用容器之后，交付的就是一个镜像\n\n## XaaS\n\n什么 即 服务\n\nSaaS 中心化的软件的分发方式，通过网络使用软件\nIaaS 虚拟化硬件资源给用户\nPaaS 提供给开发者使用\n\n![批注 2020-05-08 195722](/assets/批注%202020-05-08%20195722.png)\n\n### IT服务标准\n\n- CMMI-SVC\n- ITIL\n- ISO20000\n- ITSS\n\n## 工具链\n\n- 协同开发\n  - 工作可视化。加强沟通\n  - JIRA\n  - KanBan\n  - Rally\n- 持续集成\n  - jenkins\n- 版本管理\n  - git\n  - svn\n- 编译工具\n  - ant\n  - maven\n  - gradle\n  - msbuild\n- 测试工具\n  - junit\n  - selenium（ui测试）\n  - cucumber（自动化验收）\n  - fitnesse（管理）\n- 监控\n  - nagios\n  - zabbix\n\n## 持续交付\n\n![批注 2020-05-08 202538](/assets/批注%202020-05-08%20202538.png)","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}