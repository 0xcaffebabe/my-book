{"content":"# 领域驱动设计\n\n## 模型\n\n模型：对知识进行了选择性的简化和有意的结构化\n\n- 模型与设计相互影响\n- 模型是团队的通用语言\n- 模型是浓缩的知识\n\n### 有效建模的要素\n\n- 模型与实现绑定\n  - 如果模型不能帮助开发可运行的软件 那就毫无意义\n  - 寻找一种可以绑定模型与程序设计的设计\n- 建立了基于模型的语言\n- 蕴含丰富的知识\n- 提炼模型\n  - 不断对模型精简或者增加元素\n- 讨论\n\n### 语言\n\n领域模型可以作为一种语言\n\n文档与图\n\n文档不应重复表示代码已经明确表达的内容\n\n## 领域\n\n### 分层架构\n\n![批注 2020-07-21 125205](/assets/批注%202020-07-21%20125205.png)\n\n<table border=\"1\" width=\"90%\"> \n <tbody> \n  <tr> \n   <th> <p><span>用户界面层（或表示层）</span></p> </th> \n   <td> <p>负责向用户显示信息和解释用户指令。这里指的用户可以是另一个计算机系统，不一定是使用用户界面的人</p> </td> \n  </tr> \n  <tr> \n   <th> <p><span>应用层</span></p> </th> \n   <td> <p>定义软件要完成的任务，并且指挥表达领域概念的对象来解决问题。这一层所负责的工作对业务来说意义重大，也是与其他系统的应用层进行交互的必要渠道</p> <p>应用层要尽量简单，不包含业务规则或者知识，而只为下一层中的领域对象协调任务，分配工作，使它们互相协作。它没有反映业务情况的状态，但是却可以具有另外一种状态，为用户或程序显示某个任务的进度</p> </td> \n  </tr> \n  <tr> \n   <th> <p><span>领域层（或模型层）</span></p> </th> \n   <td> <p>负责表达业务概念，业务状态信息以及业务规则。尽管保存业务状态的技术细节是由基础设施层实现的，但是反映业务情况的状态是由本层控制并且使用的。**<span>领域层是业务软件的核心</span><span>**</span></p> </td> \n  </tr> \n  <tr> \n   <th> <p><span>基础设施层</span></p> </th> \n   <td> <p>为上面各层提供通用的技术能力：为应用层传递消息，为领域层提供持久化机制，为用户界面层绘制屏幕组件，等等。基础设施层还能够通过架构框架来支持4个层次间的交互模式</p> </td> \n  </tr> \n </tbody> \n</table>\n\n### 软件中的模型\n\n- 关联\n\n代表领域中两个实体的关联 以及技术里的关联\n\n- 实体 Entity\n\n由标志所定义的对象\n\n这个标识是什么？是一个ID\n\n- 值对象 Value Object\n\n没有概念标识的对象\n\n作为一个临时对象 通常用来传递消息\n\n- Service\n\n有些操作是无法归类到某个值对象或者实体上面\n\n需要使用Service来封装这些行为\n\n- 模块 Module\n\n对一些职责类似的对象进行边界上下文封装\n\n#### 建模范式\n\n- 对象范式\n- 非对象范式\n- 混合范式\n\n### 领域对象的生命周期\n\n![批注 2020-07-22 161447](/assets/批注%202020-07-22%20161447.png)\n\n- Aggregate\n\n>Aggregate就是一组相关对象的集合，我们把它作为数据修改的单元。每个Aggregate都有一个根（root）和一个边界（boundary）。边界定义了Aggregate的内部都有什么。根则是Aggregate所包含的一个特定Entity。对Aggregate而言，外部对象只可以引用根，而边界内部的对象之间则可以互相引用\n\n![批注 2020-07-22 161748](/assets/批注%202020-07-22%20161748.png)\n\n- Factory\n\n> 当创建一个对象或创建整个Aggregate时，如果创建工作很复杂，或者暴露了过多的内部结构，则可以使用Factory进行封装。\n\n创建方法要是原子的\n\n工厂应该创建抽象类型 而不是具体类\n\n- Repositry\n\n> 客户需要一种有效的方式来获取对已存在的领域对象的引用\n> Repository是一个简单的概念框架，它可用来封装对数据库的检索技术\n\n对类型进行抽象\n\n充分利用与客户端解耦的优点\n\n将事务的控制权交给客户\n\n## 重构\n\n为实现更深层次模型而进行重构\n\n### 突破\n\n### 提炼概念\n\n- 有没有一些术语能够简洁地表达出复杂的概念\n- 借助领域专家 书籍\n- 不断尝试\n\n#### 隐式概念\n\n- 注意约束\n  - Specification 模式就可以用来约束对象状态\n- 将过程提炼为领域对象\n\n### 柔性设计\n\n乐于使用 易于修改\n\n- 模式：Intention-Revealing Interfaces\n  - 使用封装来解释代码的意图\n- 模式：Side-Effect-Free Function\n  - 将操作粗略分为有副作用的命令以及无副作用的查询\n- 模式：Assertion\n  - 声明前置条件与后置条件\n- 模式：Conceptual Contour\n  - 概念轮廓 将设计元素组织成内聚的单元\n- 模式：Standalong Class\n  - 类尽可能保持与其他类的低耦合 以此降低依赖带来的复杂度\n- 模式：Closure Of Operation 闭合操作\n  - 入参类型与出参类型相同\n\n**声明式设计**\n\n把代码写成一种可执行的规则\n\n也就说必须遵守某种预先定义好的规则\n\n基于规则的编程\n\nDSL\n\n**切入问题**\n\n分割子领域 尽可能利用已有的形式\n\n## 战略设计\n\n### 保持模型的完整性\n\n看似相同的概念其实并不是同一个东西\n\n- 模式：Bounded Context\n  - 限定模型的工作范围\n- 模式：Continuous Integration\n  - 使用CI快速发现模型的错误\n- 模式：Context Map\n  - 使用该模式描述两个边界上下文之间的关系\n\n![批注 2020-07-26 152329](/assets/批注%202020-07-26%20152329.png)\n\n- 模式：Shared Kernel\n\n![批注 2020-07-26 152535](/assets/批注%202020-07-26%20152535.png)\n\n- 模式：Customer/SupplierDevelopment Team\n  - 建立上下游系统关系\n- 模式：Conformist\n  - 使用承诺维护上下游系统关系\n- 模式：Anticorruption Layer\n  - 封装遗留/外部系统\n\n![批注 2020-07-26 153136](/assets/批注%202020-07-26%20153136.png)\n\n- 模式：Separate Way\n  - 子系统分道扬镳 独立演化\n  - 继承总是代价高昂 而且又是获益却很小\n- 模式：Open Host Service\n  - 定义一套Service 暴露给其他系统\n- 模式：Published Language\n  - 使用一种通用的语言作为通信媒介\n\n### 精炼\n\n- 模式：Core Domain\n  - 针对核心领域模型进行优化、开发\n- 模式：Gneric Subdomain\n  - 降低非核心领域模型的优先级\n- 模式：Domain Vision Statement\n  - 简短描述领域模型\n- 模式：Highlighted Core\n  - 标记核心领域模型相关元素\n- 模式：Cohesive Mechanism\n  - 当模型的某些行为变得复杂时 将这些行为抽离到一个独立的框架里\n- 模式：Segregated Core\n  - 增强Core的内聚性\n- 模式：Abstract Core\n  - 对核心领域进一步抽象 降低复杂度\n\n### 大型结构\n\n通过重构来得到这些结构\n\n- 模式：Evolving Order\n  - 让结构随着代码一起演变\n- 模式：System Metaphor\n  - 一种促进系统一致性的隐喻\n- 模式：Responsibility Layer\n  - 注意系统中的依赖 根据依赖可能会形成自然的层次结构 进而进行抽取\n- 模式：Knowledge Level\n  - 分层提高定制灵活度\n- 模式：Pluggable Component Framework\n  - 设计一个可插拔的灵活框架","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}