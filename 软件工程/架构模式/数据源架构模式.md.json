{"content":"# 数据源架构模式\n\n## 表数据入口\n\n一个实例代表处理一张表中所有的行\n\n通常是无状态的\n\n```java\ninterface Person {\n    RecordSet find(int id);\n    RecordSet findWithXXX(...);\n    void update(...);\n}\n```\n\n表数据入口可能是最简单的数据库接口模式\n\n## 行数据入口\n\n一个实例代表一条记录 内存对象的数据与数据库操作混杂在一起会带来一些麻烦 如不好测试 并会增加复杂度\n\n```java\nclass Person {\n    name,age;\n    insert();\n    update();\n}\ninterface PersonFinder {\n    Person find(...);\n}\n```\n\n## 活动记录\n\n一个包装表或视图中某一行的对象，封装了对数据库的操作访问\n\n```java\nclass Person {\n    name,age;\n    insert();\n    delete();\n\n    bool isAudlt();\n}\n```\n\n活动记录的本质是一个领域模型\n\n活动记录的数据结构应该与数据库完全吻合\n\n活动记录与行数据入口的区别在于行数据入口只有数据访问，二活动记录封装了一些逻辑\n\n### 使用\n\n- 活动记录适用于不太复杂的逻辑\n- 活动记录使对象与数据库的耦合过紧\n\n## 数据映射器\n\n随着ORM框架的发展，前面3种方式已逐渐过时，使用数据映射器的方式可以很好地处理大型应用下的数据源使用\n\n在对象和数据库之间的一个中间层\n\n数据映射器自身不被领域层所察觉\n\n```java\ninterface PersonMapper {\n    Person select(...);\n    update(Person);\n}\n```\n\n当需要分离对象与数据库时，使用数据映射器\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}