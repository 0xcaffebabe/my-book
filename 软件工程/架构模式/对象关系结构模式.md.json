{"content":"# 对象-关系结构模式\n\n## 标识域\n\n在对象中保存的一个数据库标识域\n\n### 键的选择\n\n- 有意义键与无意义键\n  - 危险在于有意义键由人指定，可能会发生错误\n- 简单键与组合键\n  - 组合键的好处在于当处于多个表相关的上下文时，更容易使用\n- 表唯一键与数据库唯一键\n\n### 键的表示\n\n对于组合键，最好的方式是建立一个键类，来存放基本类型键值\n\n### 键的生存\n\n- 自动生成域：不断递增\n- 数据库计数器：没有统一的标准，并非所有数据库都支持\n- GUID：保证了同一时空的所有机器生成的GUID都是不唯一的，但是生成的串比较大\n- 键表，通过在数据库保存下一个有效值来生成键\n\n## 外键映射\n\n把对象的之间的关联映射到表之间的外键关联\n\n## 关联表映射\n\n将多对多的对象关联映射为数据库中的关联表\n\n## 依赖映射\n\n一个类为依赖它的类执行数据库映射\n\n## 嵌入值\n\n把对象映射成另一个对象表的一部分\n\n## 序列化LOB\n\n将小对象之间的关系保存到大对象中，并将大对象保存序列化到数据库\n\n## 单表继承\n\n将类的整个继承层次表示为一张表\n\n![](https://chuhang123.github.io/images/97.png)\n\n加载数据的时候需要决定用哪个类来实例化这些数据\n\n- 类名\n- 代码域\n\n## 类表继承\n\n一个类一张表\n\n![](https://chuhang123.github.io/images/98.png)\n\n将数据映射成对象需要比较复杂的方案\n\n## 具体表继承\n\n一个层次一张表\n\n![](https://chuhang123.github.io/images/100.png)\n\n## 继承映射器\n\n一种可以处理继承层次的数据库映射器\n\n子类调用父类映射器加载数据后，再加载子类的特有数据\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}