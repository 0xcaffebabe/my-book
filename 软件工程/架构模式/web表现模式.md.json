{"content":"# web表现模式\n\n## MVC\n\n把用户界面的交互拆分到三个角色里\n\n模型：表示领域信息的对象\n\n视图：模型的显式\n\n控制器：协调模型与视图\n\n- 表现与模型关注点不同，表现侧重于可视化界面，而模型侧重于业务逻辑\n- 同样的模型可以有不同的表现\n- 不可见对象更容易测试\n\n当系统有了一些不可见的逻辑时，就需要注意实现分离\n\n## 页面控制器\n\n为特定页面或动作处理请求的对象\n\n![202001201433](/assets/202001201433.gif)\n\n一个控制器绑定在一个请求上\n\n基本责任：\n\n- 解码数据\n- 处理数据\n- 调用视图\n\nservlet与jsp\n\n## 前端控制器\n\n处理所有请求的控制器，执行一些通用的行为，并且行为可以在运行时动态修改\n\n每次请求都会产生新对象，可以避免线程安全问题\n\n## 模板视图\n\n通过在HTML标记一些数据，来让处理器渲染\n\n模板引擎\n\n- 辅助对象\n- 条件显示\n- 迭代显示\n\n缺点\n\n- 很容易被插入复杂的逻辑\n- 难以测试\n\n## 转换视图\n\n转换视图把领域数据作为输入，HTML作为输出\n\n与模板视图的区别是转换视图侧重于数据的输入，而模板视图更侧重于输出\n\n## 两步视图\n\n类似于编译，把业务数据转换为一种中间表示，再从中间表示渲染视图\n\n两步视图的价值来源于分离了第一阶段与第二阶段，使改变更加容易\n\n## 应用控制器\n\n一个处理程序流的集中控制点\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}