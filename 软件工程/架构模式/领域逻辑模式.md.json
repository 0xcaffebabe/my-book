{"content":"# 领域逻辑模式\n\n## 事务脚本\n\n使用过程来组织业务逻辑，每个过程处理来自表现层的单个请求\n\n- 面向过程编程\n\n![屏幕截图 2021-07-23 153021](/assets/屏幕截图%202021-07-23%20153021.png)\n\n### 事务脚本的组织\n\n- 将同一主题的事务脚本放到同一个类当中\n- 一个脚本对应一个类\n\n当业务逻辑变得越来越复杂时，这一模式很难继续保持良好的设计\n\n许多问题本身是简单的，一个简单的解决方案可以加快开发速度\n\n## 领域模型\n\n合并了行为和数据\n\n![屏幕截图 2021-07-23 155109](/assets/屏幕截图%202021-07-23%20155109.png)\n\n### 组织\n\n- 实体bean\n- ORM\n\n当使用领域模型时，使用数据映射器有助于保持领域模型与数据库的独立性\n\n领域模型的要点在于隐藏数据库的存在，使其对于上层不可见\n\n## 表模块\n\n处理数据库中表或视图中所有行的业务逻辑的一个封装\n\n![屏幕截图 2021-07-23 160457](/assets/屏幕截图%202021-07-23%20160457.png)\n\n表模块与事务脚本的区别在于表模块的所有操作都是围绕表来进行，而事务脚本则是围绕事务过程来进行。\n\n### 组织\n\n表模块以一个类对应数据库中的一个表来组织领域逻辑，仅使用一个单一实例\n\n表模块很大程度依赖于以表方式组织的数据\n\n## 服务层\n\n通过服务层提供一组可用的操作集合给外部使用\n\n服务层定义了应用程序的边界和从接口客户层角度所看到的的系统、\n\n![屏幕截图 2021-07-23 161253](/assets/屏幕截图%202021-07-23%20161253.png)\n\n### 业务逻辑的种类\n\n- 领域逻辑\n- 应用逻辑\n\n### 实现\n\n- 领域外观\n  - 做的事不多，属于瘦客户端\n- 操作脚本\n  - 拥有较多的业务逻辑，对领域层进行操作\n\n### 服务识别与操作\n\n服务层操作的起点是用例模型以及用户界面\n\n如果系统只有一种用户，那可能不需要使用服务层\n\n定义服务层的考虑就是为了复用\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}