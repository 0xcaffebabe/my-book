{"content":"# 基本模式\n\n## 入口\n\n入口对象是对外部系统或资源访问的封装\n\n- 封装外部资源，创建一个简单的API\n\n入口模式可以使简单的接口转发，与外观模式不同的是，外观接口通常由服务端提供，具有通用性\n\n## 映射器\n\n在两个独立的对象之间的中间层\n\n主要是在两个子系统之间建立通信，并且不被子系统所感知\n\n要达到这样的目的，需要监听子系统的通信请求\n\n## 层超类型\n\n某一类型充当一层中所有类型的超类型\n\n当一层中的所有对象都具有共同的一些特性时，这些特性就可以被抽取成超类代码\n\n## 分离接口\n\n在与接口定义分离的地方实现该接口\n\n## 注册表\n\n一个全局可见的对象，其他对象可以通过此对象获得\n\n- 可以使用单例模式\n\n但当增加一种新类型时，注册表必须被修改\n\n但也可以使用隐式注册表，只是会失去编译时检查的优点\n\n## 值对象\n\n小而简单的对象，判等时不依据标识ID\n\n## 货币\n\n表示一个货币值的对象\n\n## 特殊情况\n\n提供特殊行为的子类\n\n- 主要是为了避免针对特殊情况进行编程而引入的\n\n## 插件\n\n通过配置来连接类\n\n## 服务桩\n\n在测试时mock外部服务\n\n## 记录集\n\n表格数据在内存的表现形式\n\n- 离线记录集","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}