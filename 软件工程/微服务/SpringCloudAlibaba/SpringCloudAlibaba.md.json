{"content":"# SpringCloudAlibaba\n\n>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务\n\n## SpringCloud 第二代\n\n项        | Spring Cloud第一代        | Spring Cloud第二代\n-------- | ---------------------- | -----------------------------------------\n网关       | Spring Cloud Zuul      | Spring Cloud Gateway\n注册中心     | eureka(不再更新)，Consul,ZK | 阿里Nacos，拍拍贷radar等可选\n配置中心     | spring cloud config    | 阿里Nacos，携程Apollo，随行付Config Keeper\n客户端软负载均衡 | Ribbon                 | spring-cloud-loadbalancer\n熔断器      | Hystrix                | spring-cloud-r4j(Resilience4J)，阿里Sentinel\n\n## Nacos\n\n- 服务发现和服务健康监测\n- 动态配置服务\n- 动态DNS服务\n- 服务即其元数据管理\n\n### 概念\n\n- 地域 物理的数据中心，资源创建成功后不能更换\n- 可用区 同一地域内，电力和网络互相独立的物理区域\n- 接入点 地域的某个服务的入口域名\n- 命名空间 不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离\n- 配置\n- 配置管理 系统配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等\n- 配置项 一个具体的可配置的参数与其值域，通常以 param-key=param-value 的形式存在\n- 配置集 一组相关或者不相关的配置项的集合\n- 配置集ID\n- 配置分组 \n- 配置快照 Nacos 的客户端 SDK 会在本地生成配置的快照 类似于缓存\n- 服务\n- 服务名\n- 服务注册中心\n- 服务发现 对服务下的实例的地址和元数据进行探测\n- 元信息 服务或者配置的描述信息\n- 应用\n- 服务分组\n- 虚拟集群 同一个服务下的所有服务实例组成一个默认集群\n- 实例\n- 权重\n- 健康检查\n- 健康保护阈值 止因过多实例不健康导致流量全部流向健康实例\n\n![屏幕截图 2020-09-23 163728](/assets/屏幕截图%202020-09-23%20163728.png)\n\n### 架构\n\n![屏幕截图 2020-09-23 163102](/assets/屏幕截图%202020-09-23%20163102.png)\n\n### 注册中心\n\n### 使用\n\n- 生产者\n\n```xml\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n```\n```properties\nspring.application.name=provider\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\n```\n\n- 消费者\n\n```java\n@FeignClient(\"provider\")\npublic interface ProviderClient {\n    @GetMapping(\"/name\")\n    String name();\n}\n\n@RestController\npublic static class Api {\n\n    @Autowired\n    private ProviderClient client;\n    @GetMapping(\"/\")\n    public String home() {\n        return client.name();\n    }\n}\n```\n\n#### vs Zookeeper & Eureka\n\n不同点:\n\n- Zookeeper采用CP保证数据的一致性的问题\n- Eureka采用ap的设计理念架构注册中心，完全去中心化思想\n- Nacos.从1.0版本支持CP和AP混合模式集群，默认是采用Ap保证服务可用性，CP的形式底层集群raft协议保证数据的一致性的问题。\n\n**最主要的是Eureka集群中的各个节点是对等的，而Nacos则有主从之分**\n\n### 配置中心\n\n```xml\n<dependency>       \n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n</dependency>\n```\n\n```properties\n# bootstrap.properties\nspring.cloud.nacos.config.server-addr=127.0.0.1:8848\nspring.cloud.nacos.config.name=provider-config\n# 指定配置文件后缀名\nspring.cloud.nacos.config.file-extension=properties\n```\n\n![批注 2020-04-02 143345](/assets/批注%202020-04-02%20143345.png)\n\n默认格式：${config-name}-${profile}.#{file-extension}\n\n- 使用\n\n```java\napplicationContext.getEnvironment().getProperty(\"app.name\")\n```\n\n#### 自定义namespace\n\n不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离\n\n通过指定 ${spring.cloud.nacos.config.namespace} 配置来实现\n\n#### 自定义Group\n\n${spring.cloud.nacos.config.group}\n\n#### 自定义data-id\n\n```properties\nspring.cloud.nacos.config.extension-configs[0].data-id=xxx\n# 配置支持刷新\nspring.cloud.nacos.config.extension-configs[0].refresh=true\n```\n\n### 配置的优先级\n\n- 高：通过内部相关规则(应用名、应用名+ Profile )自动生成相关的 Data Id 配置\n- 中：通过 spring.cloud.nacos.config.extension-configs[n].data-id 的方式支持多个扩展 Data Id 的配置\n- 低：通过 spring.cloud.nacos.config.shared-dataids 支持多个共享 Data Id 的配置\n\n#### 配置中心集群\n\n![批注 2020-04-02 151146](/assets/批注%202020-04-02%20151146.png)\n\n## Sentinel\n\n### 基本概念\n\n- 资源：可以是 Java 应用程序中的任何内容\n- 规则：包括流量控制规则、熔断降级规则以及系统保护规则\n\n流量控制：Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状\n\n![屏幕截图 2020-09-28 160547](/assets/屏幕截图%202020-09-28%20160547.png)\n\n流量控制可以从以下角度切入：\n\n- 资源的调用关系，例如资源的调用链路，资源和资源之间的关系\n- 运行指标，例如 QPS、线程池、系统负载等\n- 控制的效果，例如直接限流、冷启动、排队等\n\n熔断降级：\n\nHystrix 通过线程池的方式，来对依赖(在我们的概念中对应资源)进行了隔离。这样做的好处是资源和资源之间做到了最彻底的隔离。缺点是除了增加了线程切换的成本\n\nsentinel 通过使用以下方式限制：\n\n- 并发线程数 同计数器 当线程数达到一定数量 新的请求就会被拒绝\n- 响应时间 当资源响应时间超过阈值 对该资源的访问会直接拒绝\n\n### 基本原理\n\n所有的资源都对应一个资源名称以及一个 Entry。Entry 可以通过对主流框架的适配自动创建，也可以通过注解的方式或调用 API 显式创建\n\n通过一系列的Slot来实现相对应的功能\n\n![屏幕截图 2020-09-28 163146](/assets/屏幕截图%202020-09-28%20163146.png)\n\n### vs hystrix\n\nitem    | Sentinel                          | Hystrix\n------- | --------------------------------- | ----------------------------\n隔离策略    | 信号量隔离                             | 线程池隔离/信号量隔离\n熔断降级策略  | 基于响应时间或失败比率                       | 基于失败比率\n实时指标实现  | 滑动窗口                              | 滑动窗口（基于 RxJava）\n规则配置    | 支持多种数据源                           | 支持多种数据源\n扩展性     | 多个扩展点                             | 插件的形式\n基于注解的支持 | 支持                                | 支持\n限流      | 基于 QPS，支持基于调用关系的限流                | 有限的支持\n流量整形    | 支持慢启动、匀速器模式                       | 不支持\n系统负载保护  | 支持                                | 不支持\n控制台     | 开箱即用，可配置规则、查看秒级监控、机器发现等           | 不完善\n常见框架的适配 | Servlet、Spring Cloud、Dubbo、gRPC 等 | Servlet、Spring Cloud Netflix\n\n### 基本使用\n\n```xml\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n</dependency>\n```\n\n```java\n@GetMapping(\"/name\")\n@SentinelResource(value = \"resource1\",blockHandlerClass = {ServiceFallback.class})\npublic String name() { return \"provider\"+port; }\n```\n\n#### sentinel-dashboard\n\n- 添加流控规则\n\n![屏幕截图 2020-09-28 162556](/assets/屏幕截图%202020-09-28%20162556.png)\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}