{"content":"# 服务提供与调用\n\n## 生产者\n\n- 引入依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```\n\n- 配置\n\n```properties\nspring.application.name=producer\nserver.port=9000\neureka.client.serviceUrl.defaultZone=http://localhost:8001/eureka/\n```\n\n```java\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class ProducerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProducerApplication.class, args);\n    }\n\n}\n```\n\n## 消费者\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n```\n\n```java\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class ConsumerApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ConsumerApplication.class, args);\n    }\n}\n\n@FeignClient(\"producer\")\npublic interface HelloRemote {\n\n    @RequestMapping(\"/hello\")\n    String hello(@RequestParam String name);\n}\n```\n\n- 使用\n\n```java\n@RestController\npublic class ConsumerController {\n    @Autowired\n    HelloRemote helloRemote;\n\n    @RequestMapping(\"/hi\")\n    public String hi(){\n        return helloRemote.hello(\"my\");\n    }\n\n}\n```\n\n- 请求压缩\n\n```yml\nfeign:\n  compression:\n    request:\n      enabled: true # 开启请求压缩\n    response:\n      enabled: true # 开启响应压缩\n```\n\n## 负载均衡\n\n> 分别启动两个生产者，则两个生产者同时提供服务\n\n- 客户端负载均衡\n  - 从注册中心服务器端上获取服务注册信息列表，缓存到本地。后在本地实现轮训负载均衡策略\n- 服务端负载均衡\n  - 客户端所有请求统一交给一台服务器，由这台服务器进行实现负载均衡请求转发\n\n本地负载均衡的实现\n\n```java\n// 随机负载均衡\nList<ServiceInstance> list = discoveryClient.getInstances(\"producer\");\nRandom random = new Random();\nServiceInstance serviceInstance = list.get(random.nextInt(list.size()));\n```\n\n```java\n// 使用Ribbon\n@RestController\npublic class Controller {\n    @Autowired\n    LoadBalancerClient client;\n\n    @RequestMapping(\"/user\")\n    public String user(){\n        return new RestTemplate().getForObject(\n                client.choose(\"user-service\").getUri().toString()+\"/user\",String.class);\n    }\n}\n```\n\n```java\n// 另外一种方法\n@Autowired\nRestTemplate restTemplate;\n\n@RequestMapping(\"/user\")\npublic String user(){\n    return restTemplate.getForObject(\"http://user-service/user\",String.class);\n}\n\n@Bean\n@LoadBalanced\npublic RestTemplate restTemplate(){\n    return new RestTemplate();\n}\n```\n\n- 负载均衡策略\n\n```properties\n# 修改负载均衡策略\nuser-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule \n```","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}