{"content":"# 开放平台\n\n- SpringCloudOAuth2\n\n## 使用\n\n### 授权服务端\n\n- 依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-oauth2</artifactId>\n</dependency>\n```\n\n- 配置\n\n```java\n@Configuration\n@EnableAuthorizationServer\npublic class AuthorizationServerConfig  extends AuthorizationServerConfigurerAdapter {\n    // accessToken有效期\n    private int accessTokenValiditySeconds = 7200; // 两小时\n\n    // 添加商户信息\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        // withClient appid\n        clients.inMemory().withClient(\"client_1\")\n                .redirectUris(\"http://www.baidu.com\")\n                .secret(passwordEncoder().encode(\"123456\"))\n                .authorizedGrantTypes(\"password\",\"client_credentials\",\"refresh_token\",\"authorization_code\").scopes(\"all\").accessTokenValiditySeconds(accessTokenValiditySeconds);\n    }\n\n    // 设置token类型\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n        endpoints.authenticationManager(authenticationManager()).allowedTokenEndpointRequestMethods(HttpMethod.GET,\n                HttpMethod.POST);\n    }\n\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer oauthServer) {\n        // 允许表单认证\n        oauthServer.allowFormAuthenticationForClients();\n        // 允许check_token访问\n        oauthServer.checkTokenAccess(\"permitAll()\");\n    }\n\n    @Bean\n    AuthenticationManager authenticationManager() {\n        return authentication -> daoAuhthenticationProvider().authenticate(authentication);\n    }\n\n    @Bean\n    public AuthenticationProvider daoAuhthenticationProvider() {\n        DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();\n        daoAuthenticationProvider.setUserDetailsService(userDetailsService());\n        daoAuthenticationProvider.setHideUserNotFoundExceptions(false);\n        daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());\n        return daoAuthenticationProvider;\n    }\n\n    // 设置添加用户信息,正常应该从数据库中读取\n    @Bean\n    UserDetailsService userDetailsService() {\n        InMemoryUserDetailsManager userDetailsService = new InMemoryUserDetailsManager();\n        userDetailsService.createUser(User.withUsername(\"user_1\").password(passwordEncoder().encode(\"123456\"))\n                .authorities(\"ROLE_USER\").build());\n        userDetailsService.createUser(User.withUsername(\"user_2\").password(passwordEncoder().encode(\"123456\"))\n                .authorities(\"ROLE_USER\").build());\n        return userDetailsService;\n    }\n\n    @Bean\n    PasswordEncoder passwordEncoder() {\n        // 加密方式\n        return new BCryptPasswordEncoder();\n    }\n}\n\n@Component\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    // 授权中心管理器\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n    \n    // 拦截所有请求,使用httpBasic方式登陆\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests().antMatchers(\"/**\").fullyAuthenticated().and().httpBasic();\n    }\n}\n```\n\n通过 <http://localhost:9000/oauth/authorize?response_type=code&client_id=client_1&redirect_uri=http://www.baidu.com&scope=all>获取code\n\n根据code获取获取access_token\n\n<http://localhost:9000/oauth/token?grant_type=authorization_code&code=zCn8Gl&redirect_uri=http://www.baidu.com&scope=all&password=123456>\n\n### 资源端\n\n- 依赖同授权服务端\n- 配置\n\n```yml\nsecurity:\n  oauth2:\n    resource:\n      ####从认证授权中心上验证token\n      tokenInfoUri: http://localhost:9000/oauth/check_token\n      preferTokenInfo: true\n    client:\n      accessTokenUri: http://localhost:9000/oauth/token\n      userAuthorizationUri: http://localhost:9000/oauth/authorize\n      ###appid\n      clientId: client_1\n      ###appSecret\n      clientSecret: 123456\n```\n\n```java\n@Configuration\n@EnableResourceServer\npublic class ResourceServerConfiguration extends ResourceServerConfigurerAdapter {\n\n    @Override\n    public void configure(HttpSecurity http) throws Exception {\n        // 对 api 请求进行拦截\n        http.authorizeRequests().antMatchers(\"/api\").authenticated();\n    }\n\n}\n```\n\n```java\n@EnableOAuth2Sso\n```","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}