{"content":"# 配置中心\n\n>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库 中。在spring cloud config 组件中，分两个角色，一是config server，二是config client\n\n![20203620834](/assets/20203620834.png)\n\n## 配置中心应该提供的功能\n\n- 服务端与客户端支持\n- 集中管理各环境的配置文件\n- 修改之后可以快速生效\n- 版本管理\n- 并发查询\n- 多语言支持\n\n## 服务端\n\n- 依赖\n\n```xml\n<dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-config-server</artifactId>\n</dependency>\n```\n\n- 配置\n\n```yml\nserver:\n  port: 8003\nspring:\n  application:\n    name: spring-cloud-config-server\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/0xcaffebabe/config/     # 配置git仓库的地址\n          search-paths: config1                               # git仓库地址下的相对地址，可以配置多个，用,分割。\n```\n\n```java\n@EnableConfigServer\n```\n\n- 仓库中的文件\n\n  ![批注 2019-07-24 161419](/assets/批注%202019-07-24%20161419.png)\n\n这时候访问 server/config/dev即可获取配置信息\n\n## 客户端\n\n- 依赖\n\n```xml\n<dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-config</artifactId>\n</dependency>\n```\n\n- 配置\n\n  - application.properties\n\n    ```properties\n    server.port=8004\n    spring.application.name=config-client\n    ```\n\n  - bootstrap.properties\n\n    ```properties\n    spring.cloud.config.name=config\n    spring.cloud.config.profile=dev\n    spring.cloud.config.uri=http://localhost:8003/\n    spring.cloud.config.label=master\n    ```\n\n- 获取\n\n```java\n@Value(\"${config.hello}\")\n  private String port;\n```\n\n## 配置刷新\n\n- 添加依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```\n\n- 开启更新机制\n\n```java\n@RestController\n// 一定要加这个\n@RefreshScope\npublic class MyController {\n\n    @Value(\"${config.hello}\")\n    private String port;\n\n    @RequestMapping(\"/hello\")\n    public String hello(){\n        return port;\n    }\n}\n```\n\n- 配置\n\n```properties\nmanagement.endpoints.web.exposure.include=refresh,health,info\n```\n\n当配置文件发生更新时，调用客户端接口刷新配置\n\n```shell\ncurl -X POST http://localhost:8004/actuator/refresh\n```\n\n发起对该地址的请求可让客户端去向配置中心获取最新配置并应用到相关成员变量上\n\n## 配置中心服务化\n\n- 添加依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```\n\n- 配置\n\n```yml\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8001/eureka/   # 注册中心eureka地址\n```\n\n```java\n@EnableDiscoveryClient\n```\n\n## 客户端改造\n\n- 添加依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```\n\n- 删除 spring.cloud.config.uri\n- 添加\n\n  - spring.cloud.config.discovery.enabled\n  - spring.cloud.config.discovery.serviceId\n  - eureka.client.serviceUrl.defaultZone\n  - @EnableDiscoveryClient\n\n## 高可用\n\n> 启动多个配置中心实例\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}