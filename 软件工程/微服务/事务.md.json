{"content":"# 微服务事务SAGA\n\n- [Saga](/软件工程/架构/系统设计/分布式事务.md#SAGA)（消息驱动的本地事务序列）\n\n**分布式事务的问题**\n\n- 许多NoSQL不支持XA标准\n- 会降低可用性\n\n## 使用SAGA维护一致性\n\n使用SAGA完成一个跨服务的订单创建：\n\n![屏幕截图 2021-01-21 111838](/assets/屏幕截图%202021-01-21%20111838.png)\n\n这意味着每一步所产生的子事务都会被写入数据库，必须通过补偿事务的方式来进行回滚。同时也意味着这样的事务缺少隔离性。\n\n## 协作模式\n\nsaga参与方如何进行协调：\n\n### 协同式\n\n事务的决策和执行逻辑分布在每个参与方中\n\n![屏幕截图 2021-01-21 112848](/assets/屏幕截图%202021-01-21%20112848.png)\n\n### 编排式\n\n决策和执行逻辑集中在编排器类，由该中心指挥各个参与方\n\n![屏幕截图 2021-01-21 141422](/assets/屏幕截图%202021-01-21%20141422.png)\n\n为避免编排器类含有过多的业务逻辑，可通过设计只负责排序的编排器解决这个问题。\n\n## 实现隔离\n\nsaga包含三种事务类型：\n\n- 可补偿事务\n- 关键性事务：执行成功，则saga将一直运行到完成\n- 可重复事务\n\n### 对策\n\n- 语义锁：通过对数据设置一个PENDING状态避免其他事务修改\n- 交换式更新：类似于git版本管理，使用新增数据的方式撤销更新\n- 悲观视图：对事务操作重排序，以降低脏读导致的风险\n- 重读值：通过重读验证数据未被修改\n- 版本文件：通过记录对数据执行的操作，以将不可交换的操作转换为可交换操作\n- 业务风险评级：只在低风险业务应用saga\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}