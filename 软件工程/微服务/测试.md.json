{"content":"# 测试\n\n![屏幕截图 2021-01-28 152729](/assets/屏幕截图%202021-01-28%20152729.png)\n\n对于微服务来说，服务的拥有者应该负责测试代码的编写。\n\n测试运行的缓慢会影响修复错误的效率，从而影响开发\n\n## 类型\n\n- 面向技术的测试：如单元测试，非功能性测试（安全、性能）\n- 面向业务的测试：验收测试，探索性测试\n\n## 范围\n\n**测试金字塔**\n\n![202002131527](/assets/202002131527.png)\n\n**测试象限**\n\n![屏幕截图 2021-01-28 153152](/assets/屏幕截图%202021-01-28%20153152.png)\n\n### 单元测试\n\n但测试通常是只测试一个函数和方法调用，并且应该跟外部环境无关\n\n同时，单元测试对代码重构非常重要\n\n### 服务测试\n\n只对单个服务进行测试可以提高测试的隔离性，针对服务所需要的外部合作者，一般都是mock或者打桩\n\n**契约测试**\n\n侧重于验证服务提供者的参数定义是否符合消费者的期望\n\n```groovy\norg.springframework.cloud.contract.spec.Contract.make {\n    request { // (1)\n        method 'PUT' // (2)\n        url '/fraudcheck' // (3)\n        body([ // (4)\n               \"client.id\": $(regex('[0-9]{10}')),\n               loanAmount : 99999\n        ])\n        headers { // (5)\n            contentType('application/json')\n        }\n    }\n    response { // (6)\n        status OK() // (7)\n        body([ // (8)\n               fraudCheckStatus  : \"FRAUD\",\n               \"rejection.reason\": \"Amount too high\"\n        ])\n        headers { // (9)\n            contentType('application/json')\n        }\n    }\n}\n```\n\n### 用户界面测试\n\n这种测试覆盖了整个系统\n\n### 各种测试的比例\n\n根据经验，下面一层的测试通常要比上面一层的测试多一个数量级，因为越往上的测试，反馈周期越长，出了错误就没有那么快可以解决\n\n## 实现服务测试\n\n**打桩**：为被测服务的一些请求创建一些预设的响应\n\n**mock**：mock会验证请求是否被正确调用\n\n引入mock可能会更加复杂，所以可以创建一个智能的打桩服务\n\n## 用户界面测试\n\n集成的服务数量越多，测试就会越脆弱，不确定性也就越强\n\n- 消费者驱动测试：针对消费者的需求产生测试\n\n## 部署后再测试\n\n- 平均修复时间胜于平均故障时间\n\n## 跨功能测试\n\n### 性能测试\n\n性能测试需要有目标","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}