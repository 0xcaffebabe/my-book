{"content":"# 监控\n\n![批注 2020-06-21 084850](/assets/批注%202020-06-21%20084850.png)\n\n## 目的\n\n- 长期趋势分析\n- 对照分析\n- 告警\n- 故障分析与定位\n\n## 度量指标\n\n- 时延\n- 错误量\n- 通信量\n- 资源使用率\n\n## 链路追踪\n\n- 监控服务间的行为\n\n链路追踪的组成：\n\n![批注 2020-06-21 091223](/assets/批注%202020-06-21%20091223.png)\n\n## 日志中有用的信息\n\n- 时间\n- 标识\n  - 系统标识\n  - 用户标识\n  - 事件标识...\n- 来源\n- 日志级别\n\n## 分类\n\n![批注 2020-04-13 160526](/assets/批注%202020-04-13%20160526.png)\n\n## Prometheus\n\n### 架构\n\n![批注 2020-04-22 150857](/assets/批注%202020-04-22%20150857.png)\n\n## 单服务单主机\n\n主要监控主机的CPU、内存等数据以及服务所产生的日志\n\n## 单服务多主机\n\n如果所有主机都发生问题，那么可能是服务的问题\n\n否则如果只是某一主机出现异常，问题定位就比较简单\n\n同时，单一服务部署到多台主机，一般需要负载均衡器来分发请求，所以也要对负载均衡器进行监控\n\n## 多服务多主机\n\n此时问题定位就没那么容易了，必须收集到足够多的数据\n\n## 日志\n\n应该有一个专门的日志系统来聚合服务的日志\n\n## 服务指标\n\n需要有一个专门的系统来对收集来的信息进行聚合，分类展示\n\n## 综合监控\n\n通常可以对系统一些资源指标进行监控，判断实际值是否超出设定的阈值，但这些数据并不能直接说明服务是否能正常工作\n\n### 语义监控\n\n通过端到端的测试来监控服务的工作正常与否\n\n## 关联标识\n\n微服务架构系统提供的功能通常是由一系列的服务调用配合来完成，但是如果上游服务出现了一个错误，将错误扩展到下游，如何定位这个错误？\n\n解决这个问题的方法，是给一个个调用链分配一个标识，这样就可以根据这个标识找到这个调用链上的所有调用\n\n## 标准化\n\n无论是日志的格式，还是工具，都需要标准化\n\n## 考虑受众\n\n需要对日志的使用者，他们需要知道什么，想要什么以及如何消费数据等考虑清楚\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}