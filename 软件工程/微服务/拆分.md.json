{"content":"# 分解单块系统\n\n## 单体地狱\n\n早期单体架构的好处：\n\n1. 应用开发简单\n2. 易于大规模更改\n3. 测试部署扩展简单\n\n随着应用的不断丰富，单体暴露出了下列问题：\n\n1. 复杂性\n2. 影响开发效率\n3. 扩展难\n4. 错误无法隔离，软件变得不那么可靠\n\n## 定义微服务架构\n\n1. 定义系统操作：根据用户需求\n  - 命令操作\n  - 查询操作\n2. 定义服务\n3. 定义服务API与协作方式\n\n## 拆分单体\n\n根据改变速度，团队结构，安全需求以及实现技术等对其进行分离\n\n绞杀单体应用：\n\n![屏幕截图 2021-02-01 102751](/assets/屏幕截图%202021-02-01%20102751.png)\n\n### 拆分维度\n\n- 压力模型：隔离高频低频并发流量\n- 主线支线链路模型：隔离主链路业务与直线业务链路\n- [DDD](/软件工程/领域驱动设计.md)\n- 用户群体模型：隔离不同类型的用户\n\n### 停止挖掘\n\n当开发新功能时不应该为旧单体应用添加新代码，最佳方法应该是将新功能开发成独立微服务\n\n![批注 2020-03-24 093946](/assets/批注%202020-03-24%20093946.png)\n\n### 前后端分离\n\n将单体应用进行前后端分离，有两个好处：\n\n- 使得可以接入微服务\n- 界面与业务逻辑可以独立部署\n\n### 抽出服务\n\n- 对抽取成服务的模块进行优先级排序\n  - 经常变化的业务逻辑\n  - 资源消耗大户\n  - 粗粒度边界\n- 抽取模块\n  - 定义粗粒度接口\n  - 将调用变为远程调用\n\n### 与单体协作\n\n单体重构的过程中，微服务肯定需要与单体进行协作，需要定义好一个它们之间的协作方式。\n\n- 集成胶水API\n  - 进程间通信接口\n  - 反腐层：建立一个中间层，避免不同领域的概念相互污染\n- 维护好数据一致性\n- 身份验证与授权机制\n\n## 拆分服务\n\n- 扩展\n\n![批注 2020-06-18 163522](/assets/批注%202020-06-18%20163522.png)\n\n- 迁移\n\n![批注 2020-06-18 163534](/assets/批注%202020-06-18%20163534.png)\n\n- 收缩\n  - 删除原先服务的无用代码\n\n![202032494927](/assets/202032494927.png)\n\n那么如何将对应的系统操作拆分为独立的服务？\n\n### 根据业务能力\n\n组织的业务是做什么。\n\n从业务能力到服务的映射是一个非常主观的判断。围绕业务能力建模的好处在于最终的架构会趋于稳定。\n\n### 根据子域\n\n利用DDD子域的概念来避免不同子领域复用相同术语所带来的混乱。\n\n### 服务API定义\n\n- 将系统操作分配给服务\n- 确定服务所暴露的API\n\n## 依赖处理\n\n### 数据库\n\n- 分析数据库表的依赖关系，把不同的表或者不同的数据分到不同的限界上下文里\n\n#### 外键\n\n放弃，改用api调用来实现数据查询\n\n#### 共享数据\n\n- 静态数据\n\n如果要求不苛刻，可以使用配置文件，否则使用一个专门的服务器来管理静态数据\n\n- 动态数据\n\n独立出一个服务，专门来处理\n\n- 共享表\n\n需要重新审视设计，进行分表操作\n\n### 数据库重构\n\n先分离数据库再分离服务，虽然这样会破坏事务完整性，但是可以保证随时可以回退\n\n### 事务\n\n分离数据库之后，如何保证事务的安全性？\n\n如果一个事务中的部分操作成功，部分操作失败，该如何？\n\n- 再试一次\n  - 也就是最终一致性，如果失败了，将其放入队列，稍后重试\n- 终止操作\n  - 发起一个补偿事务，来撤销成功的操作\n  - 但是如果补偿事务再失败的话，可以引入重试或者人工操作\n- 分布式事务\n  - 也就是两阶段提交，每个事务参与者需要向事务管理器投票，如果所有参与者都同意，则事务管理器告诉所有参与者提交，否则只要有一个不同意，则所有事务参与者都有放弃此次事务\n\n引入这些都会增加系统的复杂性，最好的方式是避免这种跨服务的事务\n\n### 报表问题\n\n如果分离了数据库，那么如何解决需要所有数据的后台报表应用？\n\n- 服务调用\n  - SQL接口\n  - 提供一个批量API\n    - 指导系统将数据写入到一个共享位置来解决传输问题\n- 数据导出\n  - 由服务主动推送数据到报表服务器\n- 事件数据导出\n  - 当服务发生事件时，服务主动推送这些事件到一个中间件上\n\n## 拆分单体到服务的难点\n\n- 网络延迟\n- 同步通信导致的可用性降低\n- 数据一致性问题\n- 不同子域对同一业务实体复用造成的上帝类","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}