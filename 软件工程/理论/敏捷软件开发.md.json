{"content":"# 敏捷软件开发\n\n>敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。\n\n## 敏捷联盟\n\n- 个体交互 胜过 过程和工具\n\n项目的关键因素是人 但是一个好过程并不能帮助项目成功\n\n- 可以工作的软件 胜过 面面俱到的文档\n\n过多的文档比过少的文档更糟\n\n- 客户合作 胜过 合同谈判\n\n成功的项目需要有序频繁的客户反馈\n\n- 响应变化 胜过 遵循计划\n\n对于下两周 做好详细的计划\n\n为下三个月做好粗略的计划\n\n三个月以后的事 就做极为粗糙的计划\n\n## 原则\n\n- 尽早交付\n- 欢迎需求变更\n- 交付间隔越短越好\n- 客户与开发团队一起工作\n- 重视人的因素\n- 使用可以工作的软件衡量工作进度\n- 提倡恒定的开发速度\n- 简单就好\n- 自组织的团队\n- 不断反省 调整自身\n\n## 极限编程\n\n### 实践原则\n\n- 客户作为团队成员\n- 用户故事\n- 短交付周期\n  - 迭代\n  - 发布\n- 验收测试\n- 结对编程\n  - 减少缺陷率\n  - 促进知识传播\n- 测试驱动开发\n- 集体所有权\n- 持续集成\n- 可持续的开发速度\n- 开放的工作空间\n- 计划游戏\n- 简单设计\n- 重构\n- 隐喻\n\n## 测试\n\n单元测试\n\n- 验证操作的正确性\n- 站在调用者的角度\n- 促使解耦\n\n验收测试\n\n针对每个特性编写测试脚本\n\n## 敏捷设计\n\n拙劣设计的症状\n\n- 僵化性\n  -  设计难以改变\n- 脆弱性\n  - 设计容易被破坏\n- 牢固性\n  - 设计难以重用\n- 粘滞性\n  - 难以做正确的事\n- 不必要的复杂性\n  - 过分设计\n- 不必要的复制\n- 晦涩性\n  - 表达令人混乱\n\n敏捷设计致力于保持系统设计在任何时间都尽可能简单 干净 富有表现力\n\n## 设计模式\n\n- SOLID原则\n\n### COMMAND 模式\n\n```java\ninterface Command{\n  do();\n  undo();\n}\n```\n\n### ACTIVE OBJECT 模式\n\n```java\nwhile(commandListNotEmpty){\n  getCommandAndExecute();\n}\n```\n\n### MONSTATE 模式\n\n通过封装来使整个系统的某个对象以单一的形式展示\n\n- 无需对外暴露其本身性质\n\n### NULL OBJECT 模式\n\n使用一个空对象来代替空指针\n\n# Scrum模型\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}