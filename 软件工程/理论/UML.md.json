{"content":"# 面向对象方法\n\n> 面向对象(Object Oriented,OO)是软件开发方法。 面向对象的概念和应用已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。 面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术 发展到一定阶段后的产物。\n\n## 特点\n\n- 封装\n- 多态\n- 抽象\n- 继承\n\n## 基本思想\n\n# UML\n\n> 统一建模语言（英语：Unified Modeling Language，缩写 UML）是非专利的第三代建模和规约语言。UML是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法。UML展现了一系列最佳工程实践，这些最佳实践在对大规模，复杂系统进行建模方面，特别是在软件架构层次已经被验证有效。\n\n## 术语与符号\n\n- 类与对象 [维基百科-类图](https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%88%A5%E5%9C%96)\n\n  - 类名\n  - 属性\n  - 操作\n  - 操作的多态性\n\n- 接口\n\n- 协作\n\n  > 协作是一组类、接口和其他元素的群体，他们共同工作以提供比组成部分的总和更强的合作行为。\n\n  - 交互各方\n  - 交互方式\n  - 交互内容\n\n- 用况\n\n  > 对一组动作序列的描述\n\n- 主动类\n\n  > 体现并发行为抽象\n\n- 构件\n\n  > 可替换的成分，遵循提供了一组接口的实现\n\n- 制品\n\n  > 物理的、可替代的部件\n\n- 节点\n\n- 包\n\n## 表达关系的术语\n\n- 关联\n- 泛化\n- 实现\n- 依赖\n\n# UML模型表达工具\n\n- 静态部分建模工具\n- 动态部分建模工具\n\n  - 用况图\n  - 状态图\n  - 活动图\n  - 顺序图\n  - 通信图\n  - 交互概观图\n  - 定时图\n\n## 类图\n\n- 类\n- 接口\n- 依赖\n- 泛化\n- 关联关系\n\n## 用况图\n\n- 主题\n- 用况\n- 参与者\n- 依赖\n- 泛化\n- 关联\n\n----\n\n- 使用视角\n- 设计视角\n\n## 顺序图\n\n> 刻画对象间的交互消息\n\n## 状态图\n\n> 一个状态到另一个状态的控制流\n\n- 简单状态和组合状态\n- 事件\n- 转换\n\n# UML总结\n\n## 作用\n\n- 对自顶向下的建模人员来说，提供了概念建模以及软件建模\n\n\n\n\n\n\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}