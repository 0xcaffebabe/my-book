{"content":"# 数据的表示\n\n组织数据,方便计算机硬件直接使用\n\n## 机器内的数据表示\n\n- 原码\n\n原码(true form)是一种计算机中对数字的二进制定点表示方法。原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为0，负数该位为1（0有两种表示：+0和-0），其余位表示数值的大小\n\n- 反码\n\n反码跟原码是正数时，一样；负数时，反码就是原码符号位除外，其他位按位取反\n\n- 补码\n\n在计算机系统中，数值一律用补码来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理\n\n- 移码\n\n对补码的符号位取反\n\n## 定点与浮点数据表示\n\n### 定点数据\n\n- 可表示定点小数和整数\n\n### 浮点数据\n\n![批注 2020-01-10 135646](/assets/批注%202020-01-10%20135646.png)\n\n不同系统可能根据自己的浮点数格式从中提取不同位数的阶码\n\n- IEEE 754格式\n\nS | 8位偏指数E | 23位有效尾数M | 单精度\n- | ------ | -------- | --------\n  | S      | 11位偏指数E  | 52位有效尾数M | 双精度\n\n## 数据校验\n\n受元器件的质量、电路故障或噪音干扰等因素的影响，数据 在被处理、传输、存储的过程中可能出现错误，若能设计硬件层面的错误检测机制，可以减少基于软件检错的代价\n\n### 基本原理\n\n- 增加冗余码\n\n### 码距\n\n- 同一编码中，任意两个合法编码之间不同二进数位数的最小值\n- 校验码中增加冗余项的目的就是为了增大码距\n\n1) 码距≥e+1:可检测e个错误\n2) 码距≥2t+1:可纠正t个错误\n3) 码距≥e+t+1:可纠正t个错误，同时检测e个错误(e >= t)\n\n### 奇偶校验\n\n![批注 2020-01-11 091806](/assets/批注%202020-01-11%20091806.png)\n\n- 编码与检错简单\n- 编码效率高\n- 不能检测偶数位错误, 无错结论不可靠，是一种错误检测码\n- 不能定位错误，因此不具备纠错能力\n\n### CRC校验\n\n### 海明校验\n\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}