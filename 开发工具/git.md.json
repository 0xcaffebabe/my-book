{"content":"# GIT\n\nGit属于分布式版本控制系统\n\n![批注 2019-09-09 193656](/assets/批注%202019-09-09%20193656.png)\n\n## 整体流程\n\n![2020318102131](/assets/2020318102131.png)\n\n## 初始化仓库\n\n```shell\ngit init\n```\n\n## 配置信息\n\n```shell\ngit config --global user.name my\ngit config --global user.email 715711877@qq.com\n```\n\n**配置默认编辑器**\n\n```shell\ngit config core.editor vim\n```\n\n## 查看状态\n\n```shell\ngit status\n```\n\n## 工作流\n\n![批注 2020-03-18 103355](/assets/批注%202020-03-18%20103355.png)\n\n- 把文件的修改添加到暂存区\n\n```shell\ngit add .\n```\n\n- 把暂存区的修改提交到当前分支，提交之后暂存区就被清空了\n\n```shell\ngit commit\n```\n\n-  使用当前分支上的修改覆盖暂存区\n\n```shell\ngit reset -- files\n```\n\n- 将某个分支的操作添加到某个分支\n\n```sh\ngit rebase branch1 branch2 # 1 添加的分支 2 被添加的分支\n```\n\n-  使用暂存区的修改覆盖工作目录\n\n```shell\ngit checkout -- file\n```\n\n- 直接把所有文件的修改添加到暂存区然后执行提交\n\n```shell\ngit commit -a\n```\n\n- 取出最后一次修改，可以用来进行回滚操作\n\n```shell\ngit checkout HEAD -- files\n```\n\n- 将一些提交添加到当前分支\n\n```sh\ngit cheery-pick hash1 hash2 hash3...\n```\n\n- 交互式rebase\n\n```sh\ngit rebase -i HEAD~4 # 通过UI界面的方式调整提交记录顺序\n```\n\n## 查看提交日志\n\n```shell\ngit log\n```\n\n## 回滚到某一次提交\n\n```shell\ngit reset --hard 33ea7586bfe2d14e9ddbe9b07c5653159541338c # 通过将HEAD指向某一提交记录实现\ngit revert ... # 通过创建一个新提交记录实现\n```\n\n## 添加远程仓库\n\n```shell\n$ git remote add origin https://github.com/cjp715711877/test.git\n```\n\n## 推送到远程仓库\n\n```shell\n$ git push -u origin master\n```\n\n## 克隆仓库\n\n```shell\n$ git clone https://github.com/996icu/996.ICU.git\n```\n\n## 分支\n\nHEAD 指针指向当前分支指针\n\n![批注 2020-03-18 103706](/assets/批注%202020-03-18%20103706.png)\n\n- 新建分支\n\n新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支\n\n![批注 2020-03-18 103810](/assets/批注%202020-03-18%20103810.png)\n\n```shell\ngit branch x\n```\n\n- 切换分支\n\n```shell\ngit checkout x\n```\n\n每次提交只会让当前分支指针向前移动，而其它分支指针不会移动\n\n![批注 2020-03-18 103915](/assets/批注%202020-03-18%20103915.png)\n\n- 分支合并\n\n合并分支也只需要改变指针即可\n\n![批注 2020-03-18 103957](/assets/批注%202020-03-18%20103957.png)\n\n```shell\ngit merge x\n```\n\n### 冲突\n\n两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突\n\nGit 会使用 <<<<<<< ，======= ，>>>>>>> 标记出不同分支的内容，只需要把不同分支中冲突部分修改成一样就能解决冲突\n\n### Fast forward\n\n快进式合并\"（fast-farward merge），会直接将 master 分支指向合并的分支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支信息\n\n## 储藏（Stashing）\n\n在一个分支上操作之后，如果还没有将修改提交到分支上，此时进行切换分支，那么另一个分支上也能看到新的修改。这是因为所有分支都共用一个工作区的缘故\n\n使用\n\n```shell\ngit stash\n```\n\n这个命令将当前分支的修改储藏起来，此时工作区就是干净的，可以切换到其他分支\n\n## 推送到远程仓库\n\n- 生成ssh密钥\n\n```shell\nssh-keygen -t rsa\n```\n\n- 添加远程仓库地址\n\n```shell\ngit remote add origin git@github.com:0xcaffebabe/repo1.git\n```\n\n- 推送\n\n```shell\ngit push -u origin master\n```\n\n## 搭建Git私服\n\n- 安装git\n- 初始化服务器本地仓库\n\n```shell\ngit --bare init /home/git/first\n```\n\n- 设置远程仓库地址\n\n```shell\ngit remote add origin ssh://root@my-pc/home/git/first\n```\n\n- 推送\n\n```shell\ngit push --set-upstream origin master\n```\n\n## 从远程仓库下载源码\n\n```shell\ngit clone ssh://root@my-pc/home/git/first\n```\n\n## 一些坑\n\n- 检出错误\n\n```\nssh: connect to host xxx.com port 22: Connection refused\n```\n\n确定是否有权限\n\n- 切换邮箱提交错误\n\n新的账户没有提交权限，然而你在新的账户上有了一次提交，此时代码推不上去，切换回原邮箱依然提示推不上去\n\n此时，需要回滚撤销此次提交，切回有权限的邮箱重新提交并推送\n\n- 切分支错误\n\n拉取新分支时，一定要注意检查父分支\n\n- 提前合并到master\n\n如果相关代码没有准备好，提前将代码合并到master，会引发错误\n\n- merge冲突\n\n此时一定要慎之又慎，来处理冲突\n\n- 一个分支干多件事\n\n如果一个分支干多件事，测试代码没有覆盖，很容易出bug\n\n- 及时合并到master\n\n开发周期较长时，要及时合并到master，避免最后大量冲突\n\n## Pull Request 与 Merge Request\n\n这两种方式本质上是一样的，都是利用了git merge来合并两个分支。\n\n同步fork过来的仓库与源仓库：\n\n方法1：\n\n```sh\ngit remote add upstream 源仓库 # 添加源仓库\ngit fetch upstream # 同步源仓库的内容\ngit reset --hard upstream/main # 将本地仓库设置为源仓库的内容\ngit push -f # 将本地内容推送到远程仓库\n```\n\n方法2：\n\n在 Github 删除后重新 fork\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}