{"content":"# Gradle\n\nGradle 的核心在于基于 Groovy 的丰富而可扩展的域描述语言(DSL)\n\n## 目录结构\n\n```\n├── build.gradle  用于配置当前项目的Gradle构建脚本\n├── gradle \n│   └── wrapper\n│       ├── gradle-wrapper.jar  \tGradle Wrapper可执行jar 文件\n│       └── gradle-wrapper.properties  \tGradle Wrapper 配置\n├── gradlew  类unix下的Gradle Wrapper启动脚本\n├── gradlew.bat  windows下的Gradle Wrapper启动脚本\n└── settings.gradle 用于配置Gradle构建的Gradle设置脚本\n```\n\n## 构建基础\n\n- project：我们的应用\n- task：每个 project 都由多个 tasks 组成。每个 task 都代表了构建执行过程中的一个原子性操作。如编译，打包，生成\n\n### 第一个构建脚本\n\n```groovy\n// build.gradle\ntask copy(type: Copy, group: \"Custom\", description: \"从一个地方复制到另一个地方\") {\n    from \"src\"\n    into \"dest\"\n}\n```\n```sh\n# 执行任务\n./gradlew copy\n```\n\n- 使用插件定义任务\n\n```groovy\nplugins {\n    id \"base\"\n}\ntask zip(type: Zip, group: \"Archive\", description: \"Archives sources in a zip file\") {\n    from \"src\"\n    archiveName \"basic-demo-1.0.zip\"\n}\n```\n\n- 查看可用任务\n\n```sh\n.\\gradlew tasks\n```\n\n## 构建java项目\n\n```\n├── build.gradle\n├── gradle    \n│   └── wrapper\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties\n├── gradlew\n├── gradlew.bat\n├── settings.gradle\n└── src\n    ├── main\n    │   ├── java  \n    │   │   └── demo\n    │   │       └── App.java\n    │   └── resources\n    └── test      \n        ├── java\n        │   └── demo\n        │       └── AppTest.java\n        └── resources\n```\n\n```groovy\n// settings.gradle\nrootProject.name = 'gradle-java' // 项目名\n```\n\n```groovy\n// build.gradle\nplugins {\n    // 使用java插件\n    id 'java'\n    // application插件\n    id 'application'\n}\nrepositories {\n    // 远程仓库\n    jcenter()\n}\n// 一些依赖\ndependencies {\n    implementation 'com.google.guava:guava:28.2-jre'\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'\n}\napplication {\n    // 定义main类\n    mainClassName = 'gradle.java.App'\n}\ntest {\n    // 使用junit5测试\n    useJUnitPlatform()\n}\n```\n```sh\n# 构建项目\n./gradlew build\n```\n\n## 构建JAVA库文件\n\n```groovy\nplugins {\n    // 使用java-library插件\n    id 'java-library'\n}\nrepositories {\n    jcenter()\n}\ndependencies {\n    // 这个依赖会暴露给消费者，也就是说，这个依赖可以在消费者的classpath下找到\n    api 'org.apache.commons:commons-math3:3.6.1'\n    // 内部使用的依赖 不会暴露给消费者\n    implementation 'com.google.guava:guava:28.2-jre'\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'\n}\ntest {\n    useJUnitPlatform()\n}\n```\n\n- 自定义\n\n```groovy\n// build.gradle\nversion = '0.1.0' // 定义jar包版本\n// 自定义manifest属性\njar {\n    manifest {\n        attributes('Implementation-Title': project.name,\n                'Implementation-Version': project.version)\n    }\n}\nrepositories {\n    // 自定义仓库\n    ivy {\n        // URL可以是一个本地目录\n        url \"../local-repo\"\n    }\n    // 可以指定多个仓库\n    jcenter()\n}\n```\n\n## 多项目\n\n```groovy\n// 查看子项目任务\ngradlew :service:tasks\n// 执行子任务测试\ngradle :service:test\n```\n\n## 构建spring boot项目\n\n```groovy\nplugins {\n    id 'java'\n    id 'org.springframework.boot' version '2.2.6.RELEASE'\n    id 'io.spring.dependency-management' version '1.0.9.RELEASE'\n}\n\nrepositories {\n    maven { url 'https://maven.aliyun.com/repository/jcenter/'}\n    maven { url 'https://maven.aliyun.com/repository/spring/'}\n}\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-dependencies:2.2.6.RELEASE'\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n\n    components {\n        withModule('org.springframework:spring-beans') {\n            allVariants {\n                withDependencyConstraints {\n                    // Need to patch constraints because snakeyaml is an optional dependency\n                    it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }\n                }\n            }\n        }\n    }\n}\n\nbootJar {\n    // Define the main class for the application.\n    mainClassName = 'gradle.spring.boot.App'\n}\n```\n\n## Groovy\n\n>Groovy 是JVM 的一个替代语言—替代是指可以用Groovy 在Java 平台上进行Java 编程，使用方式基本与使用Java 代码的方式相同\n\n程序示例：\n```groovy\nclass Foo {\n  doSomething() {\n    data = [\"name\": \"James\", \"location\": \"London\"]\n    for (e in data) {\n      println(\"entry ${e.key} is ${e.value}\")\n    }\n  }\n\n  closureExample(collection) {\n    collection.each { println(\"value ${it}\") }\n  }\n\n  static void main(args) {\n    values = [1, 2, 3, \"abc\"]\n    foo = new Foo()\n    foo.closureExample(values)\n    foo.doSomething()\n  }\n}\n```\n\n## 生命周期\n\n初始化->配置->执行\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}