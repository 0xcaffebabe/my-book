{"content":"# 目录\n[toc]\n# VIM\n## vim的四种模式\n- **正常模式**：启动vim后默认处于正常模式。不论位于什么模式，按下<Esc>键(有时需要按两下）都会进入正常模式\n    - w：跳到下一个单词\n    - b：跳到上一个单词\n    - 0：跳到行首\n    - $：跳到行尾\n    - gg：跳到文档开头\n    - G：跳到文档末尾\n    - ctrl + u :上翻页\n    - ctrl + f ：下翻页\n    - zz：将光标移到屏幕中间\n    - dt{char} : delete to char (删除到char)\n    - ct{char} : delete to char and into insert(删除到char然后进入insert\n    - ctrl+u：向前滚动半页\n    模式)\n- **插入模式**：\n```\ni:进入插入模式\no：新起一行进行添加\na：在光标后进行追加\n在插入模式中，可以使用```ctrl + h``` 或者 ```ctrl + w```来删除上一个单词\nctrl + u ：undo操作\n```\n- **命令模式**：在正常模式中，按下:（英文冒号）键，会进入命令模式。在命令模式中可以执行一些输入并执行一些vim或插件提供的指令，就像在shell里一样。这些指令包括设置环境、文件操作、调用某个功能等等\n    - %s s/{a}/{b}/g：全局把a替换成b\n    - vs:垂直分割屏幕\n    - sp：水平分割屏幕\n    - ctrl + w:移动到上一个屏幕\n- **可视模式**：在正常模式中按下v, V, <Ctrl>+v，可以进入可视模式。可视模式中的操作有点像拿鼠标进行操作，选择文本的时候有一种鼠标选择的即视感，有时候会很方便\n    - y：复制\n    - p：粘贴\n## 宏的使用\n录制宏：\n回放宏：\n## 自动补全\n- 单词自动补全\n    - ctrl + n：下一个单词\n    - ctrl + p: 上一个单词\n- 文件自动补全\nctrl + f\n## 修改VIM的配色\n```\n: colorscheme xx\n```\n其中xx为配色名称\n## 持久化配置\n在~/.vimrc中可以输入一些命令，以此来保存配置：\n```\nset nu\nset autoindent\nset background=dark\ncolorscheme hybrid\nsyntax on\n```\n## 按键映射\n*map：\n其中*可以为i(insert),c(command),n(normal),v(visual)\n*noremap:\n*的取值同上\nnore的区别在于这种按键映射是非递归的。\n举例：\n```\nimap jj <esc> \n```\n这么样一条命令代表在insert模式下按下jj会自动切换到normal模式\n## 插件的安装\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}