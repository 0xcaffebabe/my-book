{"content":"# 测试与思维\n\n## 优秀的测试思维\n\n- 敏感：能敏锐地透过现象看本质\n- 好奇心：对于一件事情，不应该只浅尝表面，而应该朝着探索未知、探索深入的方向\n- 乐观：要记住，编程不是全部，技术不是全部，试着空出一点时间，放松你的身心\n\n## 学习\n\n拿来主义 ≠ 懒惰主义\n\n### 方式\n\n- 在一个能让你沉浸式学习的环境\n\n### 听课\n\n- 预习\n- 听课\n- 实践\n- 复习\n\n## 记忆\n\n各种所谓的记忆技巧，归根到底终是死记硬背，能真正掌握一件东西最好的方式就是你每时每刻都会接触它，应用它\n\n## 测试全流程\n\n- 需求阶段\n  - 头脑风暴\n  - 需求分析\n- 设计阶段\n  - 测试模块划分\n  - 测试计划&测试用例\n- 执行阶段\n  - 冒烟测试\n  - 执行测试\n  - 测试总结\n- 项目上线\n- 自动化测试\n- 监控\n\n### 测试用例\n\n测试用例是通过使用在测试计划中确定的测试技术，对于已确定的测试条件进行逐步推敲，精炼而设计出来的重点说明如何具体操作产生何种结果的文档\n\n#### 等价类划分法\n\n是把所有的输入数据，即程序的输入域划分为若干部分（子集），然后从每一个子集中选取少数具有代表性的数据作为测试用例\n\n#### 边值法\n\n通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界\n\n#### 场景法\n\n通过运用场景来对系统的功能点或业务流程的描述\n\n#### 错误推测法\n\n根据经验或直觉推测程序中可能存在的各种错误，从而有针对性地编写检查这些错误的测试用例的方法\n\n## 测试人员懂代码很重要吗\n\n很重要，而且必要\n\n- 生产问题复现\n- 提升测试效率\n- 问题定位\n- 后续进阶\n  - 自动化测试\n  - 测试框架\n\n## 自动化测试\n\n自动化测试的目的是什么？\n\n小项目、项目的早期不适合自动化\n\n### 自动化测试工具\n\n- 第一代，录制回放类\n- 开源编程类\n\n## 测试设计模式\n\n- page object\n  - 把自动化测试代码以页面进行组织，将同一个页面上的所有信息，相关操作都放到一个类中\n- 分层模式\n  - 进行抽象\n\n## 测试平台\n\n- 无代码，直接上手\n- 可以完成更多类型的测试\n- 效率\n- 节省硬件资源\n\n## 移动端测试\n\n- 安装卸载升级测试\n- 耗电量与发热测试\n- 流量测试\n- 兼容性测试\n- 弱网测试\n- 中断测试\n- 手势测试\n- 权限测试\n- 客户端性能\n- 极限测试\n- 用户体验\n\n### 移动端自动化\n\n- Appium\n\n## 性能测试\n\n- 负载测试：通过逐步加压的方式来确定系统的处理能力，确定系统能够承受的各项阀值\n- 压力测试：压力测试则是要看服务的临界点\n- 容量测试：容量测试相反，是在一定性能目标的前提下，系统能够处理的最大能力\n- 配置测试：这是通过对被测试软件的软硬件配置的测试，找到系统各项资源的最优分配原则\n\n性能测试≠性能测试工具的使用\n\n需要前期分析，并且能监控调优\n\n## 测试与架构设计\n\n如果你的意识里系统架构都不存在的话，那么你怎么知道架构在什么情况下会出现异常呢\n\n## 精准测试\n\n通过自动化的手段对更新的代码进行范围判断，生成测试用例，自动执行","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}