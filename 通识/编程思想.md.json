{"content":"# 编程思想\n\n- 编程语言\n  - 语法\n  - 数据结构\n- 编程模型\n  - 面向对象\n  - 面向过程\n- 编程思想\n  - 契约编程\n  - 设计模式\n\n## OOP\n\n- 封装继承多态\n\n## AOP\n\n- 静态接口\n- 动态代理\n- 字节码\n\n![批注 2020-05-13 154203](/assets/批注%202020-05-13%20154203.png)\n\n## 面向元数据编程\n\nmetadata\n\n- 泛型\n- 反射\n- 注解\n\n## 函数式编程\n\n- 函数式接口\n- 默认方法\n- 方法引用\n\n## 契约编程\n\n- 语义\n\n## 设计模式\n\n- 最基本：23设计模式\n\n面向对象设计模式,面向切面设计模式...\n\n## 模式驱动\n\n- 接口驱动\n- 配置驱动\n- 注解驱动\n- 函数驱动\n- 模块驱动\n\n## 领域驱动\n\n![批注 2020-05-27 105720](/assets/批注%202020-05-27%20105720.png)\n\n- 解决的问题：系统规模日益变大\n\n### 领域\n\n业务问题模块\n\n### 驱动\n\n- 驱动设计\n  - 关注领域，而非细节\n- 驱动代码实现\n\n### 实施\n\n理解领域\n- 领域专家\n\n拆分领域\n\n细化子域\n- 标准\n- 业务规则\n- 业务场景\n- 业务流程\n\n约束领域\n- 划分边界\n\n## 调试\n\n第一步：重现问题\n\n第二步：思考原因\n\n第三步：验证假设\n\n如果无法确定问题，可以缩小范围\n\n修复bug应了解其产生原因\n\n## 抽象\n\n抽象更接近问题的本质\n\n- 寻找共性\n- 提升抽象层次\n\n## 分治\n\n- 函数分解\n- 优雅的代码不是一次写成的\n- 分治模式\n  - pipline\n- 分层设计\n- 垂直拆分/水平拆分\n\n## 编程珠玑\n\n- 灵光一现的算法\n\n### 数据结构决定程序\n\n使用更合适的数据结构能减少代码量\n\n### 正确的程序\n\n- 断言\n- 测试\n\n### 性能分析\n\n- 问题定义\n- 系统结构\n- 算法与数据结构\n- 代码调优\n- 系统软件\n- 硬件\n\n### 估算\n\n使用小实验获取关键参数\n\n任何事都应尽量简单 但不宜过于简单\n\n### 算法设计\n\n- 保存状态 避免重复计算\n  - 动态规划\n- 对信息进行预处理至数据结构中\n- 分治算法\n- 扫描算法\n  - 还是动态规划\n\n### 代码调优\n\n- 不成熟的优化是大量编程灾害的根源\n- 需要有一个度量工具\n- 注意代码调优是一把双刃剑\n\n一些优化方案：\n\n- 缓存\n- 等价的代数表达式\n- 内联函数避免函数调用开销\n- 循环展开\n- 修改数据结构\n\n### 节省空间\n\n- 调整数据结构\n- 使用计算代替存储\n- 稀疏数据结构\n  - 关键字索引\n- 数据压缩\n- 动态废品\n- 垃圾回收\n\n### 自描述数据\n\n- KV对\n- 注释文档\n- 源代码描述\n\n### 技巧\n\n- 明白用户的真实需求\n- 评估成本与收益\n- 正确评估问题的难度\n- 正确的工具","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}