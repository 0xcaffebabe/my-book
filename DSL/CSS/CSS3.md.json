{"content":"\n## CSS3\n\n### 选择器\n\n#### 属性选择器\n\n选择器                 | 描述\n------------------- | ------------------\n[attribute ]        | 用于选取带有指定属性的元素。\n[attribute=value]   | 用于选取带有指定属性和值的元素。\n[attribute~=value]  | 用于选取属性值中包含指定词汇的元素。\n[attribute          | =value]            | 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。\n[attribute^=valuel  | 匹配属性值以指定值开头的每个元素。\n[attribute$ =value] | 匹配属性值以指定值结尾的每个元素。\n[attribute* =value] | 匹配属性值中包含指定值的每个元素。\n\n```css\ninput[type=search] {\n  color: skyblue;\n}\n``` \n\n#### 结构伪类选择器\n\n伪类元素选择器               | 说明\n--------------------- | ----------------------------------------------------------------------\nE:first-line          | 选择某标签中第一行的元素\nE:first-letter        | 伪类选择器将某标签中第一行的元素首字符\nE:before              | 伪类选择器:将某标签之前加入内容\nE:after               | 伪类选择器将某标签之后加入内容\nE:root                | 将样式绑定到页面根元素中\nE:not                 | 对某个结构元素使用样式但想排除结构下的子结构元素\nE:empty               | 指定当元素样式为空白时使用的样式\nE.target              | 对页面中target元素指定样式此样式只在用户点击了页面中的链接，并且跳转到target元素后才生效\nE:first-child         | 选择同级别此元素的第一个元素\nE:last-child          | 选择同级别此元素的最后一个元素\nE:nth-child           | 对元素中指定序号的子元素设置样式(正数)，:nth-child(n)/nth-child(odd/even) -奇/偶数\nE:nth-last-child      | 对元素中指定序号的子元素设置样式(倒数)，nth-last- child(n)- nth-last-child(odd/even)-奇/偶数\nE:nth-of-type(n)      | 与nth-childO作用类似，但是仅匹配使用同种标签的元素:\nE:nth-last-of-type(n) | 与nth-last-child作用类似但是仅匹配使用同种标签的元素\nE:nth-child(an+b)     | a表示每次循环中包括几张样式b表示指定的样式在循环中的所在位置\nE:only-child          | 匹配父元素下仅有的一个子元素\nE:only-of-type        | 匹配父元素 下使用同种标签的唯一个子元素\nE:enable              | 匹配表单中激活的元素\nE:disabled            | 匹配表单中禁用的元素\nE:checked             | 匹配表单中被选中的radio(单选)或checkbox(复选)元素\nE:selection           | 匹配用户当前选中的元素\n\n\n\nnth-child 详解\n\n- n 可以是数字、关键字、公式\n- n 如果是数字，就是选中第几个\n- 常见的关键字有 `even` 偶数、`odd` 奇数\n- 常见的公式如下(如果 n 是公式，则从 0 开始计算)\n- 但如果是第 0 个元素或者超出了元素的个数会被忽略\n\n`nth-child` 和  `nt-of-type` 的区别\n\n- `nth-child`  选择父元素里面的第几个子元素，不管是第几个类型\n- `nt-of-type`  选择指定类型的元素\n\n#### 伪元素选择器\n\n- ::before 在元素内部的前面插入内容\n- ::after 在元素内部的后面插入内容\n\n注意事项\n\n- `before` 和 `after` 必须有 `content` 属性\n- `before` 在内容前面，after 在内容后面\n- `before` 和 `after` 创建的是一个元素，但是属于行内元素\n- 创建出来的元素在 `Dom` 中查找不到，所以称为伪元素\n- 伪元素和标签选择器一样，权重为 1\n\n### 2D转换\n\n#### 2D转换translate\n\n- x 就是 x 轴上水平移动\n- y 就是 y 轴上水平移动\n\n```css\ntransform: translate(x, y)\ntransform: translateX(n)\ntransfrom: translateY(n)\n```\n\n- `2D` 的移动主要是指 水平、垂直方向上的移动\n- `translate` 最大的优点就是不影响其他元素的位置\n- `translate` 中的100%单位，是相对于本身的宽度和高度来进行计算的\n- 行内标签没有效果\n\n#### 2D旋转rotate\n\n`2D` 旋转指的是让元素在二维平面内顺时针或者逆时针旋转\n\n```css\ntransform: rotate(度数) \n```\n\n- rotate` 里面跟度数，单位是 `deg`\n- 角度为正时，顺时针，角度为负时，逆时针\n- 默认旋转的中心点是元素的中心点\n\n#### 设置元素旋转中心点(transform-origin)\n\n```css\ntransform-origin: x y;\n```\n\n- 注意后面的参数 x 和 y 用空格隔开\n- x y 默认旋转的中心点是元素的中心 (50% 50%)，等价于 `center`  `center`\n- 还可以给 x y 设置像素或者方位名词(`top`、`bottom`、`left`、`right`、`center`)\n\n#### `2D` 转换之 `scale`\n\n用来控制元素的放大与缩小\n\n```css\ntransform: scale(x, y)\n```\n\n- 注意，x 与 y 之间使用逗号进行分隔\n- `transform: scale(1, 1)`: 宽高都放大一倍，相当于没有放大\n- `transform: scale(2, 2)`: 宽和高都放大了二倍\n- `transform: scale(2)`: 如果只写了一个参数，第二个参数就和第一个参数一致\n- `transform:scale(0.5, 0.5)`: 缩小\n- `scale` 最大的优势：可以设置转换中心点缩放，默认以中心点缩放，而且不影响其他盒子\n\n#### 综合写法\n\n- 同时使用多个转换，其格式为 `transform: translate() rotate() scale()`\n- 顺序会影响到转换的效果(先旋转会改变坐标轴方向)\n- 但我们同时有位置或者其他属性的时候，要将位移放到最前面\n\n### 动画\n\n动画是 `CSS3` 中最具颠覆性的特征之一，可通过设置多个节点来精确的控制一个或者一组动画，从而实现复杂的动画效果\n\n- 定义动画\n\n```css\n@keyframes motion {\n    0% {\n        transform: translateX(0);\n    }\n    100% {\n        transform: translateX(1000px);\n    }\n}\n```\n\n- 使用动画\n\n```css\ndiv {\n    width: 200px;\n    height: 200px;\n    background-color: skyblue;\n    animation: motion 5s;\n}\n```\n\n- 0% 是动画的开始，100 % 是动画的完成，这样的规则就是动画序列\n- 在 @keyframs 中规定某项 CSS 样式，就由创建当前样式逐渐改为新样式的动画效果\n- 动画是使元素从一个样式逐渐变化为另一个样式的效果，可以改变任意多的样式任意多的次数\n- 用百分比来规定变化发生的时间，或用 `from` 和 `to`，等同于 0% 和 100%\n\n##### 场景属性\n\n```css\ndiv {\n  width: 100px;\n  height: 100px;\n  background-color: aquamarine;\n  /* 动画名称 */\n  animation-name: move;\n  /* 动画花费时长 */\n  animation-duration: 2s;\n  /* 动画速度曲线 */\n  animation-timing-function: ease-in-out;\n  /* 动画等待多长时间执行 */\n  animation-delay: 2s;\n  /* 规定动画播放次数 infinite: 无限循环 */\n  animation-iteration-count: infinite;\n  /* 是否逆行播放 */\n  animation-direction: alternate;\n  /* 动画结束之后的状态 */\n  animation-fill-mode: forwards;\n}\n```\n\n- 简写\n\n```css\nanimation: name duration timing-function delay iteration-count direction fill-mode\n```\n\n- 简写属性里面不包含 `animation-paly-state`\n- 暂停动画 `animation-paly-state: paused`; 经常和鼠标经过等其他配合使用\n- 要想动画走回来，而不是直接调回来：`animation-direction: alternate`\n- 盒子动画结束后，停在结束位置：`animation-fill-mode: forwards` \n\n## 3D转换\n\n### 三维坐标系\n\n![202001170927](/assets/202001170927.gif)\n\n### 3D 移动 translate3d\n\n```css\n/* 注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充 */\ntransform: translate3d(x, y, z)\n```\n\n### 透视 perspective\n\n![202001170939](/assets/202001170939.png)\n\n**透视需要写在被视察元素的父盒子上面**\n\n```css\nbody {\n  perspective: 1000px;\n}\n```\n\n### 3D 旋转rotate\n\n>3D 旋转指可以让元素在三维平面内沿着 x 轴、y 轴、z 轴 或者自定义轴进行旋转\n\n```css\ntransform: rotate3d(x, y, z, deg)\n```\n\n```css\nrotateY\nrotateX\nrotateZ\n/* 沿着对角线旋转 */\ntransform: rotate3d(1, 1, 0, 180deg)\n```\n\n### 3D 呈现 transform-style\n\n- 控制子元素是否开启三维立体环境\n- `transform-style: flat`  代表子元素不开启 `3D` 立体空间，默认的\n- `transform-style: preserve-3d` 子元素开启立体空间\n\n## 浏览器私有前缀\n\n- 火狐-moz-\n- ie-ms-\n- -webkit-\n- -o-\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}