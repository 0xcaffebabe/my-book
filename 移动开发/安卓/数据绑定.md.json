{"content":"# 概念\n\n与MVVM\n\n# 配置\n\n```groovy\nandroid {\n    ...\n    dataBinding{\n        enabled = true\n    }\n}\n```\n\n# UI绑定\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout>\n    <data>\n        <variable\n            name=\"title\"\n            type=\"String\" />\n    </data>\n    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".MainActivity\">\n\n\n        <TextView\n            android:id=\"@+id/tv1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{title}\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</layout>\n```\n\n```java\nActivityMainBinding binding = DataBindingUtil.setContentView(MainActivity.this,R.layout.activity_main);\n\nbinding.setTitle(\"avcd\");\n```\n\n# 事件绑定\n\n```java\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ActivityMainBinding binding = DataBindingUtil.setContentView(MainActivity.this,R.layout.activity_main);\n\n        binding.setPresenter(new Presenter());\n    }\n    public class Presenter{\n\n        public void onClick(){\n            Toast.makeText(MainActivity.this,\"click\",Toast.LENGTH_SHORT).show();\n        }\n    }\n```\n\n```xml\n<Button\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:onClick=\"@{()-> presenter.onClick()}\"\n            />\n```\n\n# 数据绑定原理\n\n编译 - 处理layout文件 - 解析表达式 - java编译 - 解析依赖\n\n# 运算符\n\n- 空指针避免\n- 数组越界\n\n# include\n\n## viewstub\n\n# 观察者模式\n\n```java\npublic class UserInfo extends BaseObservable {\n\n    private String name;\n    private String password;\n    private Integer age;\n\n    public void setName(String name) {\n        this.name = name;\n        notifyChange();\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n        notifyChange();\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n        notifyChange();\n    }\n}\n\n\nprivate UserInfo userInfo = new UserInfo();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ActivityMainBinding binding = DataBindingUtil.setContentView(MainActivity.this,R.layout.activity_main);\n\n        binding.setPresenter(new Presenter());\n        binding.setUser(userInfo);\n\n    }\n    public class Presenter implements TextWatcher {\n\n        @Override\n        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n\n        }\n\n        @Override\n        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {\n            userInfo.setName(charSequence.toString());\n        }\n\n        @Override\n        public void afterTextChanged(Editable editable) {\n\n        }\n    }\n```\n\n```xml\n<layout>\n    <data>\n        <variable\n            name=\"user\"\n            type=\"wang.ismy.databinding.UserInfo\" />\n\n        <variable\n            name=\"presenter\"\n            type=\"wang.ismy.databinding.MainActivity.Presenter\" />\n    </data>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        tools:context=\".MainActivity\">\n\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:onTextChanged=\"@{presenter::onTextChanged}\"\n            />\n\n        <TextView\n            android:id=\"@+id/tv1\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{user.name}\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n    </LinearLayout>\n</layout>\n```\n\n# 高级绑定\n\n## 列表绑定\n\n- 创建适配器\n\n```java\npublic class UserAdapter extends RecyclerView.Adapter<BindingViewHolder> {\n\n    private final LayoutInflater layoutInflater;\n\n    private List<UserInfo> userInfoList = new ArrayList<>();\n\n    public UserAdapter(Context context) {\n        layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n\n    }\n\n    @Override\n    public int getItemViewType(int position) {\n\n        return super.getItemViewType(position);\n    }\n\n    @NonNull\n    @Override\n    public BindingViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        ViewDataBinding binding =\n                DataBindingUtil.inflate(layoutInflater,R.layout.item_user,parent,false);\n\n        return new BindingViewHolder(binding);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull BindingViewHolder holder, int position) {\n        final UserInfo userInfo = userInfoList.get(position);\n        holder.getBinding().setVariable(wang.ismy.databinding.BR.item,userInfo);\n        holder.getBinding().executePendingBindings();\n\n    }\n\n    @Override\n    public int getItemCount() {\n        return userInfoList.size();\n    }\n\n    public void addAll(List<UserInfo> list){\n        userInfoList.addAll(list);\n    }\n\n    public void add(UserInfo userInfo){\n        userInfoList.add(userInfo);\n        notifyItemInserted(userInfoList.size());\n    }\n\n    public void remove(){\n        if (userInfoList.size() == 0) return;\n        userInfoList.remove(0);\n        notifyItemRemoved(0);\n    }\n\n}\n```\n\n- 创建holder\n\n```java\npublic class BindingViewHolder<T extends ViewDataBinding> extends RecyclerView.ViewHolder {\n\n    private T binding;\n\n    public BindingViewHolder(@NonNull T itemView) {\n        super(itemView.getRoot());\n        binding = itemView;\n    }\n\n    public T getBinding() {\n        return binding;\n    }\n}\n```\n\n- 使用\n\n```java\nbinding = DataBindingUtil.setContentView(MainActivity.this,R.layout.activity_main);\n        binding.recyclerView.setLayoutManager(new LinearLayoutManager(this));\n        userAdapter = new UserAdapter(getApplicationContext());\n        binding.setPresenter(new Presenter());\n        binding.recyclerView.setAdapter(userAdapter);\n\n        userAdapter.addAll(Arrays.asList(new UserInfo(\"1\"),\n                new UserInfo(\"2\"),new UserInfo(\"3\"),\n                new UserInfo(\"4\")));\n```\n\n## 自定义属性\n\n```java\n@BindingAdapter({\"app:imageUrl\",\"app:placeholder\"})\n    public static void loadImage(ImageView view,\n                                 String url, Drawable drawable\n                                 ){\n        Glide.with(view.getContext())\n                .load(url)\n                .placeholder(drawable)\n                .into(view);\n    }\n\nbinding.setUrl(url);\n```\n\n```xml\n<layout>\n    \n    <data>\n        <variable\n            name=\"url\"\n            type=\"String\" />\n    </data>\n\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        tools:context=\".MainActivity\">\n\n        <ImageView\n            android:layout_width=\"150dp\"\n            android:layout_height=\"150dp\"\n            app:imageUrl=\"@{url}\"\n            app:placeholder=\"@{@drawable/ic_launcher_foreground}\"\n            />\n\n    </LinearLayout>\n</layout>\n```\n\n## 双向绑定\n\n```xml\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@={model.username}\"\n            />\n\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@={model.password}\"\n            />\n\n        <Button\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{model.toString()}\"\n            />\n```\n\n## 表达式链\n\n```xml\n\n<data>\n\n        <import type=\"android.view.View\" />\n\n</data>\n\n<EditText\n            android:id=\"@+id/username\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@={model.username}\"\n            android:visibility=\"@{model.username.length() != 5 ?View.VISIBLE:View.GONE}\"\n            />\n\n        <EditText\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@={model.password}\"\n            android:visibility=\"@{username.visibility}\"\n            />\n\n        <Button\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{model.toString()}\"\n            android:visibility=\"@{username.visibility}\"\n            />\n```\n\n### 隐式更新\n\n```xml\n        <CheckBox\n            android:id=\"@+id/checkbox\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\" />\n\n        <EditText\n            android:id=\"@+id/username\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@={model.username}\"\n            android:visibility=\"@{checkbox.checked ?View.VISIBLE:View.GONE}\"\n            />\n```\n\n\n## Lambda表达式\n\n```xml\n<Button\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@{model.toString()}\"\n            android:visibility=\"@{username.visibility}\"\n            android:onClick=\"@{()->presenter.click()}\"\n            />\n```\n\n## 动画\n\n- Transition\n\n```java\n        binding.addOnRebindCallback(new OnRebindCallback() {\n            @Override\n            public boolean onPreBind(ViewDataBinding binding) {\n\n                ViewGroup viewGroup = (ViewGroup) binding.getRoot();\n                TransitionManager.beginDelayedTransition(viewGroup);\n\n                return true;\n            }\n        });\n```\n\n\n\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}