{"content":"# RecyclerView\n> A flexible view for providing a limited window into a large data set.\n## 基本使用\n- 定义一个Adapter，其用来控制数据与Item的绑定关系\n    ```java\n    public class MyAdapter extends RecyclerView.Adapter<MyViewHolder> {\n\n    LayoutInflater layoutInflater;\n    Context context;\n    List<String> data;\n\n    public MyAdapter(Context context, List<String> data) {\n        this.context = context;\n        this.data = data;\n        layoutInflater = LayoutInflater.from(context);\n    }\n\n    @NonNull\n    @Override\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {\n        View view = layoutInflater.inflate(R.layout.single_view,viewGroup,false);\n\n        return new MyViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull MyViewHolder myViewHolder, int i) {\n        myViewHolder.textView.setText(data.get(i));\n    }\n\n    @Override\n    public int getItemCount() {\n        return data.size();\n    }\n}\n    ```\n- 其中，ViewHolder则是控制单条Item的显示\n    ```java\n    public class MyViewHolder extends RecyclerView.ViewHolder {\n\n   TextView textView;\n\n    public MyViewHolder(@NonNull View itemView) {\n        super(itemView);\n        textView = itemView.findViewById(R.id.tv);\n    }\n}\n    ```\n在使用时，只要指定布局管理器以及适配器，就可以自定义数据的显示方式\n```java\nRecyclerView.LayoutManager manager = new GridLayoutManager(this,3);\n        rw.setAdapter(adapter);\n        rw.setLayoutManager(manager);\n```\n也就是说，RecyclerView提供了一种插拔式的体验，类似于模板方法模式，只要修改一下细节，就可以重新定义数据的显示方式\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}