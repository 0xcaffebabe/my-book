{"content":"# 消息队列\n\n## 消息模型\n\n### 点对点\n\n只能被一个消费者消费一次\n\n![批注 2020-03-17 153818](/assets/批注%202020-03-17%20153818.png)\n\n### 发布订阅\n\n消息生产者向频道发送一个消息之后，多个消费者可以从该频道订阅到这条消息并消费\n\n![批注 2020-03-17 153854](/assets/批注%202020-03-17%20153854.png)\n\n## 使用场景\n\n- 异步处理\n  - 发送者发送消息之后无需等待，可以直接返回\n- 流量削峰\n  - 高并发的情况下，将请求发送到消息队列，服务器按照处理能力对请求进行处理\n- 应用解耦\n  - 如果模块之间不直接进行调用，模块之间耦合度就会很低\n\n## 可靠性\n\n### 发送端的可靠性\n\n通过本地消息表实现\n\n### 接收端的可靠性\n\n- 保证消费幂等性\n- 保证消息具有唯一编号\n\n## 消息堆积\n\n如果消费端出现问题，可能就会造成队列的消息堆积\n\n此时，处理方案只需要恢复消费端的处理能力即可\n\n但是如果消息队列即将被写满，就必须将快要满的这个队列的消息分发到其他消息队列，临时加派消费者加快处理这些消息\n\n## 消息失效\n\n消息失效导致的大量消息丢失，只能写程序慢慢将丢失的那些消息补回来\n\n## 消息中间件带来的好处\n\n- 解耦\n- 异步\n- 横向扩展\n- 安全可靠\n- 顺序保证\n\n> 中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源。 中间件位于客户机/ 服务器的操作系统之上，管理计算机资源和网络通讯。\n\n> 消息中间件是指一种在需要进行网络通信的系统进行通道的建立，数据或文件发送的中间件。消息中间件的一个重要作用是可以跨平台操作，为不同操作系统上的应用软件集成提供便利。\n\n## JMS\n\n> Java消息服务（Java Message Service，JMS）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。 Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。\n\n- 队列模型\n- 主题模型\n\n### JMS编码接口之间的关系\n\n![批注 2019-07-18 152532](/assets/批注%202019-07-18%20152532.png)\n\n## AMQP\n\n> 高级消息队列协议即Advanced Message Queuing Protocol（AMQP）是一个用于统一面向消息中间件实现的一套标准协议，其设计目标是对于消息的排序、路由（包括点对点和订阅-发布）、保持可靠性、保证安全性。\n\n## 对比\n\n![批注 2019-07-18 150607](/assets/批注%202019-07-18%20150607.png)\n\n## 消息队列设计\n\n从几个方面考虑：\n\n- 可伸缩性\n  - 也就是能根据系统负载动态增减节点\n- 持久化\n  - 持久化的开销\n- 高可用\n  - 主节点的选举，主从之间的数据复制\n- 消息可靠性保证\n\n## 消息可靠投递方案\n\n![批注 2019-07-21 113405](/assets/批注%202019-07-21%20113405.png)\n\n### 生产者弄丢数据\n\n可能由于网络原因，数据没有到MQ，就在半路没了\n\n这可以使用`confirm`机制，`confirm`机制当MQ接收到消息后，会给生产者回传一个ack，如果MQ没能处理这个消息，会回传nack，整个过程都是异步的\n\n### MQ弄丢数据\n\n只要开启数据持久化，消息丢失的可能性很小\n\n### 消费端弄丢数据\n\n使用消息确认机制，处理完消息手动ack\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}