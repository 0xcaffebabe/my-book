{"content":"# 视图和存储程序\n\n## 视图\n\n- 虚拟表\n\n使用：\n\n```sql\nCREATE VIEW v AS SELECT ...;\nCREATE VIEW v(c1,c2) AS SELECT ...; -- 对SELECT结果的列重命名\n\nCREATE VIEW v AS SELECT id FROM tb WHERE i>1;\nUPDATE v SET i = i+1; -- 对于单张表的简单视图 是可以进行更新的\n```\n\nMySQL视图的实现：\n\n- 合并算法：将对视图的查询条件合并到原表的查询条件上去\n- 临时表算法：将创建视图时的SELECT语句结果存放到一张临时表 查询视图时查询这张临时表\n\n![屏幕截图 2021-03-23 161026](/assets/屏幕截图%202021-03-23%20161026.png)\n\n使用EXPLAIN查看视图实现方式，如果视图包含聚合函数、UNION或者子查询，则都会使用临时表实现\n\n## 存储程序\n\n### 存储过程\n\n不能用在 sql 表达式中 可以返回多个结果集\n\n```sql\nCREATE PROCEDURE show_tables ()\n  SELECT * FROM information_schema.tables;\nCALL show_tables(); -- 调用存储过程\n\nCREATE PROCEDURE print_2 () -- 复合语句\nBEGIN\n\tSELECT * FROM staff;\n\tSELECT * FROM actor;\nEND;\n\n-- 存储过程参数\nCREATE PROCEDURE count_people_1(OUT ret INT)\nBEGIN\n\tSET ret = (SELECT COUNT(*) FROM staff);\nEND;\nCALL count_people_1(@ret);\nSELECT @ret;\n```\n\n### 存储函数\n\n可以有参数 有返回值\n\n存储函数不能对调用它的那条语句正操作的表进行修改\n\n```sql\nCREATE FUNCTION count_people() RETURNS INT\nBEGIN\n\tRETURN (SELECT COUNT(*) FROM staff);\nEND;\nSELECT count_people();\n```\n\n### 触发器\n\n- 对于每张表的每个事件 只能定义一个触发器\n- MySQL的触发器是基于行的触发\n\n```sql\n-- 插入前检验\nCREATE TRIGGER tri_person BEFORE INSERT ON person\n\tFOR EACH ROW BEGIN\n\t\tIF NEW.name != 'cxk' THEN\n\t\t\tSET NEW.name = 'cxk';\n\t\tEND IF;\nEND;\n```\n\n### 事件\n\n开启事件调度：`SET GLOBAL event_scheduler = ON;`\n\n```sql\n-- 每秒插入一条记录\nCREATE EVENT insert_people\n\tON SCHEDULE EVERY 1 SECOND\n\tDO\n\t\tINSERT INTO person VALUES('cxk');\n```\n\n如果上一个事件的上一次调度没有执行完，时间一到，下一次调度就会开始，这种并发需要用户自己处理\n\n## 安全性\n\n对于视图或者存储程序\n\n默认调用者的身份都是创建者\n\n可以在CREATE 语句后面加上`DEGINER = xxx` 来指定定义者","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}