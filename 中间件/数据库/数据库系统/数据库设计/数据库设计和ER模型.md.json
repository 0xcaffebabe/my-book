{"content":"# 数据库设计和ER模型\n\n## 设计过程概览\n\n### 设计阶段\n\n- 需求分析\n- 概念设计\n- 逻辑设计\n- 物理设计\n\n### 设计选择\n\n在设计时，我们必须确保避免两个主要的缺陷：\n\n- 冗余\n- 不完整\n\n## 实体 - 联系模型\n\n### 实体集\n\n实体：对象\n实体集：实体构成的集合\n实体通过一组属性来表示，每个属性都有一个值。\n\n### 联系集\n\n联系是指多个实体间的相互关联\n联系集就是相同类型联系的集合\n实体在联系中扮演的功能称为实体的角色\n联系也可以具有描述性属性\n\n### 属性\n\n每个属性都有一个可取值的集合，称为该属性的域\n属性类型的划分：\n- 简单和复合\n- 单值和多值\n- 派生属性\n\n## 约束\n\n### 映射基数\n\n- 一对一\n- 一对多\n- 多对一\n- 多对多\n\n### 参与约束\n\n- 全部参与\n- 部分参与\n\n### 码\n\n实体的码是一个足以分区每个实体的属性集\n同样，码也可以用于唯一标识联系\n\n## 从实体集中删除冗余属性\n\n当决定好实体集后，必须挑选合适的属性\n\n## 实体 - 联系 图（ER图）\n\n### 基本结构\n\n- 分割成两部分的矩形：实体集\n- 菱形：联系集\n- 未分割的矩形：联系集的属性\n- 线段：实体集与联系集的连接\n- 虚线：联系集到联系集的连接\n- 双线：实体在联系集中的参与度\n- 双菱形：连接到弱实体集的标志性联系集\n- 带箭头的线：代表箭头所指的那方实体映射基数为1\n- 不带箭头的线：代表箭头所指的那方实体映射基数为多\n\n### 复杂的属性\n\n比如\nAddress\n    - city\n    - street\n### 角色\n通过再菱形和矩形之间的连线上进行标注来表示角色\n\n### 非二元的联系集\n\n即一个联系连接了两个以上的实体\n\n![批注 2020-03-08 205525](/assets/批注%202020-03-08%20205525.png)\n\n### 继承关系\n\n![批注 2020-03-08 205614](/assets/批注%202020-03-08%20205614.png)\n\n### 弱实体集\n\n没有足够的属性以形成主码的实体集称为**弱实体集**\n有主码的实体集称为**强实体集**\n  ## 转换为关系模式\n  ### 具有简单属性的强实体集表示\n  比如实体集student，有三个属性：ID、name、credit\n  可以转换成如下关系模式：\n  ```\n  student(ID,name,credit)\n  ```\n  ### 具有复杂属性的强实体集的表示\n  比如student有一个属性address，又有子属性city，street，\n  那么可生成关系模式：\n  ```\n  student(ID,name,credit,city,street)\n  ```\n  ### 弱实体集的表示\n  设A为一个弱实体集，B为A所依赖的一个强实体集。\n  那么可以创建一个关系模式：\n  B(a1,a2,a3,x)，其中a1，a2，a3为B的属性，x为B到A的外键约束\n  ### 联系集的表示\n  设R为联系集，a1，a2...an为参与R的实体集构成的属性集合，\n  b1，b2...bn为R的属性，则R的属性为：\n  {a1,a2..an}∪{b1,b2,...bn}\n  如何选取主码：\n  - 对于多对多的二元联系：参与实体集的主码属性并集成为主码\n  - 对于一对一的联系集：任何一个实体的主码都可以选作为主码\n  - 对于多对一或者一对多：多的那一方的实体集可以选取作为主码\n\n#### 模式冗余\n一般情况下，连接弱实体集与其所依赖的强实体集的联系集模式是冗余的。\n#### 模式的合并\n- 在一对一的联系的情况下：联系集的关系模式可以跟参与联系的任何一个实体集的模式进行合并\n## 实体-联系设计问题\n### 用实体集还是用属性\n什么构成实体集，什么构成属性？这个问题要根据现实情况进行回答。\n**一个常见的错误是用一个实体集的主码作为另一个实体集的属性，而不是用联系**\n**另一个错误是将相关实体集的主码属性作为联系集的属性**\n### 用实体集还是用联系集\n一个原则是：**当描述发生在实体间的行为时采用联系集**\n### 二元还是n元联系集\n数据库中的联系通常都是二元的。\n一些非二元的联系可以通过拆分分为二元联系，但是这样做，有时并不那么自然\n### 联系属性的布局\n属性放到哪里，是实体集还是联系集？\n这也是要根据实际情况进行决定\n## 扩展的E-R特性\n### 特化\n自顶向下的，可以看做OOP当中父类转换成子类的这么样一个过程\n### 概化\n同上，类似于OOP中的向上转型\n### 属性继承\n高层实体集的属性可以被底层实体集继承\n### 概化上的约束\n数据库设计者可以决定哪些实体能成为给定低层实体集的成员，条件可以如下：\n- 条件定义\n- 用户定义\n### 聚集\nE-R模型的一个局限性在于它不能表达联系间的联系。\n聚集是一种抽象，它把联系视为高层实体，这样就可以表达联系之间的联系了\n### 转换为关系模式\n#### 概化的表示\n- 为高层实体集创建一个模式，为每个低层实体集创建一个模式\n- 如果概化是不相交并且完全的，就是说不存在同时属于两个同级的低层实体集的实体\n#### 聚集的表示\n聚集的主码是定义该聚集的联系集的主码\n## 数据库建模的其他表示法\n- ER图的其他表示法\n- 统一建模语言UML\n## 数据库设计的其他方面\n- 数据约束和关系数据库设计\n显示声明约束的优点：\n  - 自动保持数据的一致性\n  - 一些约束在数据库模式的设计中非常有用\n  - 当然也可以提高访问效率\n缺点：\n但是在数据更新时，执行约束会在性能上带来潜在的高代价\n### 使用需求：查询、性能\n主要的两个度量方法：\n- 吞吐量\n- 响应时间\n### 授权需求\n### 数据流、工作流\n工作流表示一个流程中的数据和任务的组合\n当用户在执行工作流中的任务时，工作流会与数据库系统进行交互，除了工作流操作的数据之外，数据库还可以存储工作流自身的数据\n### 数据库设计的其他问题\n数据库设计要求设计者可以预先估计一个组织将来的需求，设计出的模式在需求发生变更时只要做最少的改动即可满足要求。\n\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}