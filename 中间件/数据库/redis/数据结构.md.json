{"content":"## 数据结构\n\n二进制安全：底层没有类型概念，只有byte数组\n所以客户端需要将数据序列化成字节数组\n\n![批注 2020-06-18 132234](/assets/批注%202020-06-18%20132234.png)\n\n### string\n\n- 字符串、数值、bit位图\n\n![屏幕截图 2020-09-24 142014](/assets/屏幕截图%202020-09-24%20142014.png)\n\n内部编码：\n\n- int：8个字节的长整型\n- embstr：小于等于39个字节的字符串\n- raw：大于39个字节的字符串\n\n应用场景：\n\n- 做简单的KV缓存\n\n![屏幕截图 2020-09-24 144551](/assets/屏幕截图%202020-09-24%20144551.png)\n\n设计合理的键名，有利于防止键冲突和项目的可维护性，比较推荐的方式是使用`业务名：对象名：id：[属性]`作为键名\n\n- incr（计数）：抢购，秒杀，详情页，点赞，评论\n- session服务器\n\n![屏幕截图 2020-09-24 145419](/assets/屏幕截图%202020-09-24%20145419.png)\n\n- 限速 通过对key设置过期时间的方式限制用户请求频率\n- 使用位图来处理海量数据\n\n2. 哈希类型 hash\n  - 做对象属性读写\n3. 列表类型 list\n  - 可以做消息队列或者可以来存储列表信息，进行分页查询\n4. 集合类型 set\n  - 自动去重\n  - 推荐系统：数据交集\n5. 有序集合类型 sortedset\n  - 排序\n\n### 内部数据结构\n\n![屏幕截图 2020-09-23 154040](/assets/屏幕截图%202020-09-23%20154040.png)\n\n#### 字典\n\n```c\ntypedef struct dictht {\n    dictEntry **table;\n    unsigned long size;\n    unsigned long sizemask;\n    unsigned long used;\n} dictht;\ntypedef struct dictEntry {\n    void *key;\n    union {\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n        double d;\n    } v;\n    struct dictEntry *next;\n} dictEntry;\n```\n\nredis使用了两张哈希表来方便扩容时的rehash操作\n\n在进行rehash时，为避免给服务器带来过大负担，并不是一次性将所有值rehash到另外一张表，而是通过渐进的方式，每次对字典执行添加、删除、查找或者更新操作时，都会执行一次渐进式 rehash。\n\n#### 跳跃表\n\n![202031284446](/assets/202031284446.png)\n\n查找时，从上层开始查找，找到对应的区间后再到下一层继续查找，类似于二分查找\n\n这种查找数据结构跟红黑树相比：\n\n- 插入非常快，因为不需要在插入后进行旋转\n- 实现容易\n- 支持无锁操作","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}