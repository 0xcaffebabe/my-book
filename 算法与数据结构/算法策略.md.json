{"content":"# 算法策略\n\n## 贪心算法\n\n一个贪心算法总是做出当前最好的选择，也就是说，它期望通过局部最优选择从而得到全局最优的解决方案。\n\n- 做出选择 不可反悔\n- 可能得不到最优解\n- 贪心策略决定算法好坏\n\n确定贪心策略 选择当前看上去最好的方案\n\n一步一步得到局部最优解\n\n将所有局部最优解合并称为一个原来问题的最优解\n\n- 冒泡排序就使用了贪心算法\n\n### 原则\n\n- 贪心原则\n  - 所谓贪心选择性质是指原问题的整体最优解可以通过一系列局部最优的选择得到\n- 最优子结构\n  - 当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质\n\n- 背包问题\n\n选择一个最好的贪心策略\n\n物品可分割称为背包问题 物品不可分割称为0-1背包问题\n\n- 会议安排问题\n- 最短路径问题\n- 哈夫曼编码\n- 最小生成树\n\n## 分治法\n\n其本质就是将一个大规模的问题分解为若干个规模较小的相同子问题，分而治之\n\n- 递归\n\n### 分支算法要素\n\n- 原问题可以分解为若干个规模较小的相同子问题\n- 子问题相互独立\n- 子问题解可以合并为原问题的解\n\n---\n\n- 二分查找\n- 归并排序\n- 快速排序\n- 大整数乘法\n\n## 动态规划\n\n### 基础\n\n动态规划的思想类似于分治法\n\n不过动态规划是从最小子问题求起 将小问题的解存储起来\n\n求解大问题时 如果需要用到小问题的解 直接使用即可 无需再重复计算\n\n### 要素\n\n- 最优子结构\n  - 问题的最优解包含其子问题的最优解\n- 子问题重叠\n  - 不是必要条件 但是是动态规划的优势\n\n---\n\n- 兔子序列\n- 最长公共子串\n\n## 回溯法\n\n>回溯法是一种选优搜索法，按照选优条件深度优先搜索，以达到目标。当搜索到某一步时，发现原先选择并不是最优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术称为回溯法，而满足回溯条件的某个状态称为“回溯点”。\n\n### 要素\n\n- 解空间\n  - 由所有可能解组成的空间\n  - 将这些解按一定结构组织起来：解空间树\n- 隐约束\n  - 不满足隐元素的分支无需搜索 直接剪掉 也称为剪枝函数\n\n---\n\n- 0-1背包\n- 最大图\n- 地图着色\n- n皇后\n\n## 分支限界法\n\n- 广度优先\n\n回溯法找出所有解\n\n分支限界法找出一个接\n\n回溯法深度优先\n分支限界法广度优先\n\n回溯法搜索一次生成一个孩子节点\n分支限界法一次生成所有节点\n\n## 线性规划网络流\n\n### 解决\n\n- 确定决策变量\n  - 哪些变量对模板有影响\n- 确定目标函数\n  - 含有决策变量的线性函数\n- 找出约束条件\n  - 将对决策变量的约束表示为方程或者不等式\n- 求最优解","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}