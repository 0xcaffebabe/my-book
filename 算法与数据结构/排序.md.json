{"content":"# 排序\n\n**为什么要学习O(N^2)的排序算法**\n\n- 是其他算法的基础\n- 编码简单\n- 作为子过程，用于改进复杂的排序算法\n\n**排序算法的稳定性**\n\n对于相等的元素，在排序后，相对位置没有发生改变\n\n## 选择排序\n\n![202002070942](/assets/202002070942.gif)\n\n每一轮循环找到数组中最小的元素，第一次找到的最小元素将它与第一个元素交换位置，第二次找到的最小元素交换将它与第二个位置交换，以此类推\n\n```java\nfor (int i = 0; i < arr.length; i++) {\n    // 寻找[i,n)里的最小值\n    int min = i;\n    for (int j = i + 1; j < arr.length; j++) {\n        if (less(arr[j],arr[min])) {\n            min = j;\n        }\n    }\n    swap(arr, i, min);\n}\n```\n\n## 插入排序\n\n![202002070926](/assets/202002070926.gif)\n\n插入排序是从后往前扫描的\n\n第一次从后到前逐个扫描下标1-0的元素，如果发现后面一个比前面小，则两个交换位置，否则就开始下一次扫描\n\n第二次从后到前逐个扫描下标2-0的元素，如果发现后面一个比前面小，则两个交换位置 ，否则就开始下一次扫描\n\n依此类推\n\n- 插入排序对近乎有序的数组性能很强\n\n```java\nfor (int i = 1; i < a.length; i++) {\n    // 从右到左扫描，如果右值小于左值，则交换，否则跳出本轮循环\n    for (int j = i; j > 0; j--) {\n        if (less(a[j], a[j - 1])) {\n            swap(a, j, j - 1);\n        }else {\n            break;\n        }\n    }\n}\n\n// 改进后的插入排序\nfor (int i = 1; i < a.length; i++) {\n    var e = a[i];\n    int j;\n    for (j = i; j > 0 && greater(a[j - 1], e); j--) {\n        // 将\n        a[j]=a[j-1];\n    }\n    a[j]=e;\n}\n```\n\n## 冒泡排序\n\n![202002081000](/assets/202002081000.gif)\n\n第一次扫描下标为0的元素到最后一个元素\n\n第二次扫描下标为0的元素到倒数第二个元素\n\n每次扫描如果发现右边比左边小 则两个交换位置\n\n以此类推\n\n```java\nfor (int i = 1; i < a.length; i++) {\n    for (int j = 0; j < a.length - i; j++) {\n        if (less(a[i],a[j])){\n            swap(a,i,j);\n        }\n    }\n}\n// 改进的冒泡排序\nfor (int i = 1; i < a.length; i++) {\n    int lastSwap = 1;\n    for (int j = 0; j < a.length - i && j < lastSwap; j++) {\n        if (less(a[i], a[j])) {\n            swap(a, i, j);\n            // 记录最后一次交换的位置，该位置后的元素在下一轮扫描后不会被扫描\n            lastSwap = j;\n        }\n    }\n}\n```\n\n## 希尔排序\n\n![202002081040](/assets/202002081040.gif)\n\n希尔排序是将插入排序中的交换相邻元素改为交换不相邻元素\n\n- 选择一个增量序列t1，t2，…，tk\n- 按增量序列个数k，对序列进行k 趟排序\n\n```java\nint h = 1;\n// 计算增长序列，1,4，13,40...\nwhile (h < a.length / 3) {\n    h = 3 * h + 1;\n}\nwhile (h>=1){\n    for (int i = h; i < a.length; i++) {\n        // 对第i,i-h,i-2*h,i-3*h进行插入排序\n        var e = a[i];\n        int j;\n        for (j = i; j > h && less(a[j - h], e); j-=h) {\n            a[j]=a[j-h];\n        }\n        a[j]=e;\n    }\n    h/=3;\n}\n```\n\n## 归并排序\n\n![202002081126](/assets/202002081126.gif)\n\n- 把长度为n的输入序列分成两个长度为n/2的子序列；\n- 对这两个子序列分别采用归并排序；\n- 将两个排序好的子序列合并成一个最终的排序序列\n\n对两个有序子序列进行合并，得到一个更大的有序子序列，以此类推，直到只剩下一个序列\n\n- 但是一个缺点是需要额外的O(N)空间\n\n```java\nprivate void mergeSort(Comparable<?>[] a, int l, int r) {\n    if (l >= r) {\n        return;\n    }\n    int mid = (l + r) / 2;\n    mergeSort(a, l, mid); // 对左边排序\n    mergeSort(a, mid + 1, r); // 对右边排序\n    merge(a, l, mid, r); // 对两个数组进行归并\n}\nprivate void merge(Comparable<?>[] a, int l, int mid, int r) {\n    // 开辟一块新空间给l-r之间的元素\n    Comparable<?>[] aux = new Comparable<?>[r - l + 1];\n    for (int i = l; i <= r; i++) {\n        aux[i - l] = a[i];\n    }\n\n    int i = l, j = mid + 1;\n    // 对l到r之间的元素进行扫描，将它们放到指定位置\n    for (int k = l; k <= r; k++) {\n        if (i > mid) { // 如果左指针已经跑过了mid，那此时让右指针去跑\n            a[k] = aux[j - l];\n            j++;\n        } else if (j > r) { // 如果右指针已经跑完了，则此时让左指针去跑\n            a[k] = aux[i - l];\n            i++;\n        } else if (less(a[i - l], a[j - l])) { // 否则就比较左右两指针谁的值比较小，谁小就把谁的值复制到结果里，然后该指针往后移动\n            a[k] = aux[i - l];\n            i++;\n        } else {\n            a[k] = aux[j - l];\n            j++;\n        }\n    }\n}\n```\n\n### 优化\n\n当mid+1位置的元素大于mid位置的元素时，就没有必要进行归并了\n\n```java\nif (greater(a[mid],a[mid+1])){\n    merge(a, l, mid, r);\n}\n```\n\n也可以当被归并排序的数组数量小于某一数量级时，使用其他排序算法，来提高性能\n\n### 自底向上的归并排序\n\n```java\n// 每次归并的数组大小依次为1 2 4 ...\nfor (int sz = 1; sz <= a.length; sz += sz) {\n    for (int i = 0; i < a.length; i += sz + sz) {\n        // 归并a[i...i+size-1] 与 a[i+size...i+2*size-1]\n        if (i + sz < a.length) { // 只有左数组长度小于整个排序数组长度使（代表目前没有右数组），才进行归并（否则数组就是有序的了）\n            merge(a, i, i + sz - 1, min(i + sz + sz - 1, a.length - 1));\n        }\n    }\n}\n```\n\n## 快速排序\n\n![202002081411](/assets/202002081411.gif)\n\n选定一个元素，将比该元素小的元素放其左边，比它大的放在其右边，并递归地对它左右两边的子序列进行排序\n\n- 快速排序在最差的情况下，会退化为O(N^2)\n\n```java\nprivate void quickSort(Comparable<?>[] a, int l, int r) {\n    if (l >= r) {\n        return;\n    }\n    int p = partition(a, l, r);\n    quickSort(a, l, p - 1);\n    quickSort(a, p + 1, r);\n}\n\n/**\n * 返回一个p，使得a[l...p-1] < a[p] 并且 a[p+1...r] > a[p]\n */\nprivate int partition(Comparable<?>[] a, int l, int r) {\n    var v = a[l];\n    int j = l;\n    // 从左到右扫描（一）\n    for (int i = l + 1; i <= r; i++) {\n        //如果扫描的元素小于v，则将该元素跟大数组的第一个元素交换，同时，小数组的位置扩张1（二）\n        if (less(a[i], v)) {\n            swap(a, j + 1, i);\n            j++;\n        }\n    }\n    // 最后，将v与小数组的最后一个元素交换位置（三）\n    swap(a, l, j);\n    return j;\n}\n```\n\n**一**\n\n![批注 2020-02-08 134532](/assets/批注%202020-02-08%20134532.png)\n\n**二**\n\n![批注 2020-02-08 134637](/assets/批注%202020-02-08%20134637.png)\n\n**三**\n\n![批注 2020-02-08 134920](/assets/批注%202020-02-08%20134920.png)\n\n### 优化\n\n当数组里有大量相同的元素，快速排序的时间复杂度为退化到N^2,解决方法是在两侧使用双指针向中间扫描\n\n![批注 2020-02-08 142132](/assets/批注%202020-02-08%20142132.png)\n\n- 双路快速排序\n\n```java\nprivate int partition(Comparable<?>[] a, int l, int r) {\n    var v = a[l];\n    // i:a[l+1...i] <=v  j:[j...r] >=v\n    int i = l + 1, j = r;\n    while (true) {\n        while (i <= r && less(a[i], v)) i++;\n        while (j >= l + 1 && greater(a[j], v)) j--;\n        if (i > j) {\n            break;\n        } else {\n            swap(a, i, j);\n            i++;j--;\n        }\n    }\n    swap(a,l,j);\n    return j;\n}\n```\n\n- 三路快速排序\n\n```java\nprivate void quickSort(Comparable[] a, int l, int r) {\n    if (l >= r) {\n        return;\n    }\n\n    // partition\n    var v = a[l];\n\n    int lt = l; // a[l+1...lt] < v\n    int gt = r + 1; // a[gt...r] > v\n    int i = l + 1; // a[lt+1...i) == v\n    while (i < gt) {\n        if (a[i].compareTo(v) < 0) {\n            swap(a, i, lt + 1);\n            lt++;\n            i++;\n        } else if (a[i].compareTo(v) > 0) {\n            swap(a, i, gt - 1);\n            gt--;\n        }else {\n            i++;\n        }\n    }\n    swap(a,i,lt);\n\n    quickSort(a, l, lt - 1);\n    quickSort(a, gt, r);\n}\n```\n\n## 归并排序与快速排序的背后\n\n- 两个算法都使用了分治算法\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}