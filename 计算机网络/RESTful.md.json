{"content":"# RESTful\n\n一套关于设计请求的规范，本质上谈不上规范，更多的是一种风格\n\n- 资源：代表一个抽象实体\n- 表征（表现层）：资源的表现形式\n- 状态：在特定上下文下产生的信息\n- 转移：状态发生了变化\n- 超文本驱动：通过服务端返回的超文本来决定客户端行为\n\n>URI代表一种资源、客户端与服务器，传递资源的某种表现层、客户端通过HTTP动词，对服务器资源进行操作\n\nGET：      获取数据\nPOST：    添加数据\nPUT：      更新数据\nDELETE： 删除数据\n\n## 常见错误\n\n- URI包含动词\n- URI包含版本\n\n## 范例\n\n请求方式    | URL                              | 含义\n------- | -------------------------------- | -------------\nGET：    | <http://www.example.com/users>   | 获取用户列表数据\nPOST：   | <http://www.example.com/users>   | 创建(添加)用户数据\nGET：    | <http://www.example.com/users/1> | 获取用户ID为1的用户信息\nPUT：    | <http://www.example.com/users/1> | 修改用户ID为1的用户信息\nDELETE： | <http://www.example.com/users/1> | 删除用户ID为1的用户信息\n\n## RESTful的系统\n\n1. 服务端与客户端分离\n2. 无状态\n3. 可缓存\n4. 分层系统\n5. 统一接口\n6. 按需代码\n\n### REST风格的好处\n\n1. 降低服务接口的学习成本\n2. 资源之间有天然的集合或者层次结构\n\n### RMM成熟度\n\n0. The Swamp of Plain Old XML：完全不REST。另外，关于Plain Old XML这说法，SOA表示感觉有被冒犯到。\n1. Resources：开始引入资源的概念。\n2. HTTP Verbs：引入统一接口，映射到HTTP协议的方法上。\n3. Hypermedia Controls：超媒体控制在本文里面的说法是“超文本驱动”\n\n### 不足\n\n- 面向资源（也就是REST）更适合做CRUD，面向过程面向对象才能表达更加复杂的逻辑\n- REST绑定HTTP 既是优点，同时也是缺点，不适合用于高性能的场景\n- REST本身没有传输可靠性支持 需要自己做好幂等性处理\n- REST缺乏对资源进行“部分”和“批量”的处理能力\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}