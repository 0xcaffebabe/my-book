{"content":"# HTTP协议\n\n## 基础概念\n\n- URI\n\n![批注 2020-03-07 204209](/assets/批注%202020-03-07%20204209.png)\n\n- 请求报文\n\n![202037204550](/assets/202037204550.png)\n\n- 响应报文\n\n![202037204611](/assets/202037204611.png)\n\n## HTTP方法\n\n- GET\n\n获取资源\n\n- HEAD\n\n与GET类似，但不返回报文的实体主体\n\n- POST\n\n主要用来传输数据\n\n- PUT\n\n上传文件\n\n- PATCH\n\n对资源进行部分修改\n\n- DELETE\n\n删除文件\n\n- OPTIONS\n\n查询指定的 URL 能够支持的方法\n\n- CONNECT\n\n要求在与代理服务器通信时建立隧道\n\n- TRACE\n\n服务器会将通信路径返回给客户端\n\n## 状态码\n\n分类  | 分类描述\n--- | -----------------------\n1** | 信息，服务器收到请求，需要请求者继续执行操作\n2** | 成功，操作被成功接收并处理\n3** | 重定向，需要进一步的操作以完成请求\n4** | 客户端错误，请求包含语法错误或无法完成请求\n5** | 服务器错误，服务器在处理请求的过程中发生了错误\n\n### 1XX\n\n100 Continue ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应\n\n### 2XX\n\n- 200 OK\n- 204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用\n- 206 Partial Content ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容\n\n### 3XX\n\n- 301 Moved Permanently ：永久性重定向\n- 302 Found ：临时性重定向\n- 303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源\n- 304 Not Modified ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码\n- 307 Temporary Redirect ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法\n\n### 4XX\n\n- 400 Bad Request:语法错误\n- 401 Unauthorized:需要认证\n- 403 Forbidden:请求被拒绝\n- 404 Not Found\n\n### 5XX\n\n- 500 Internal Server Error ：服务器正在执行请求时发生错误\n- 503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求\n\n## 具体应用\n\n### 连接管理\n\n- 短连接\n\n每进行一次 HTTP 通信就要新建一个 TCP 连接\n\n- 长连接\n\n从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 Connection : close\n在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 Connection : Keep-Alive\n\n- 流水线\n\n流水线是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟\n\n### Cookie\n\nCookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一客户端\n\n#### 用途\n\n- 会话状态管理\n- 个性化设置\n- 浏览器行为跟踪\n\n#### 创建过程\n\n服务的响应头Set-Cookie头部：\n\n```html\nSet-Cookie: yummy_cookie=choco\nSet-Cookie: tasty_cookie=strawberry\n```\n\n客户端之后对同一服务器发送请求时，都会在请求头Cookie头部带上这个Cookie\n\n```html\nCookie: yummy_cookie=choco; tasty_cookie=strawberry\n```\n\n#### 分类\n\n- 会话期Cookie：浏览器关闭之后它会被自动删除，没有指定过期时间就是会话期Cookie\n- 持久性 Cookie：指定过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie\n\n```html\nSet-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2020 07:28:00 GMT;\n```\n\n#### 作用域\n\nDomain 标识Cookie在哪些域名下有效，如果不指定，默认是当前文档的主机\n\n如果指定了Domain，则一般包括子域名，如baidu.com，包含map.baidu.com\n\n#### JS访问\n\nJavaScript可以通过document.cookie来创建cookie或者访问非HttpOnly的Cookie\n\n#### HttpOnly\n\n标记为 HttpOnly 的 Cookie 不能被 JavaScript 脚本调用\n\n```html\nSet-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2020 07:28:00 GMT; Secure; HttpOnly\n```\n\n#### Secure\n\n标记为 Secure 的 Cookie 只能通过被 HTTPS 协议加密过的请求发送给服务端\n\n#### Session\n\nSession是通过在服务端生成一个key，使用这个key为索引在服务器端存放用户信息，后将这个key作为cookie返回给客户端，让客户端使用这个key来操作\n\n应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，还需要使用二重验证的方式\n\n## 特点\n\n- 基于TCP/IP的高级协议\n- 默认端口号:80\n- 基于请求/响应模型的:一次请求对应一次响应\n- 无状态的：每次请求之间相互独立，不能交互数据\n\n#### 浏览器禁用cookie\n\n当浏览器无法使用Cookie，只能使用session，此外，session id也不能通过cookie来传递，而是需要通过URL传参的方式来传递，如wap时代的sid\n\n#### Cookie与Session\n\n比较类别 | Session | Cookie\n---- | ------- | ------\n存储方式 | 服务端     | 客户端\n大小限制 | 无       | 有\n安全   | 较安全     | 较不安全\n\n## 缓存\n\n### 优点\n\n- 缓解服务器压力\n- 提升客户端速度\n\n### 实现方法\n\n- 代理服务器缓存\n- 客户端缓存\n\n### Cache-Control\n\n- 禁止进行缓存\n\n```html\nCache-Control: no-store\n```\n\n- 强制确认缓存\n\n只有当缓存资源有效时，才能使用这个响应\n\n```html\nCache-Control: no-cache\n```\n\n- 禁止修改\n\n```http\nCache-Control: no-transform\n```\n\n禁止代理服务器修改HTTP响应头或者响应体\n\n- 私有缓存\n\n只能单独给用户使用，一般用在浏览器\n\n```html\nCache-Control: private\n```\n\n- 公共缓存\n\n可以被多个用户使用，一般存储在代理服务器中\n\n```html\nCache-Control: public\n```\n\n- min-fresh和only-if-cached\n\n仅用于客户端的请求Header。min-fresh后续跟随一个以秒为单位的数字，用于建议服务器能返回一个不少于该时间的缓存资源 only-if-cached表示要求客户端要求不发送网络请求，只使用缓存来进行响应\n\n- must-revalidate和proxy-revalidate\n\nmust-revalidate表示在资源过期后，一定需要从服务器中进行获取 proxy-revalidate用于提示代理、CDN等设备资源过期后的缓存行为\n\n- 缓存过期\n\n出现在响应报文，超过这个时间 缓存就被认为过期\n\n```html\nCache-Control: max-age=31536000\n```\n\nExpires 首部字段也可以用于告知缓存服务器该资源什么时候会过期\n\n```html\nExpires: Wed, 04 Jul 2012 08:26:05 GMT\n```\n\n但Expires有如下问题：\n\n1. 受限于客户端的时间\n2. 无法缓存客户私有资源\n3. 无法描述“不缓存”，如js文件引用后面要加个版本号\n\n### 缓存验证\n\nETag 是资源的唯一标识\n\n```http\nIf-None-Match: \"82e22293907ce725faf67773957acd12\"\n```\n\n如果服务器接收到ETage后，判断资源没有发生改变，会返回一个304\n\nLast-Modified 首部字段也可以用于缓存验证，如果响应首部字段里含有这个信息，客户端可以在后续的请求中带上 If-Modified-Since 来验证缓存。服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 OK。如果请求的资源从那时起未经修改，那么返回一个不带有实体主体的 304 Not Modified 响应报文\n\n### 内容协商\n\n#### 服务端驱动\n\n客户端设置Accept、Accept-Charset、Accept-Encoding、Accept-Language等首部，服务端根据这些首部返回特定资源\n\n#### 代理驱动\n\n服务器返回 300 Multiple Choices 或者 406 Not Acceptable，客户端从中选出最合适的那个资源\n\n#### vary\n\n一个客户端发送了一个包含 Accept-Language 首部字段的请求之后，源服务器返回的响应包含 Vary: Accept-Language 内容，缓存服务器对这个响应进行缓存之后，在客户端下一次访问同一个 URL 资源，并且 Accept-Language 与缓存中的对应的值相同时才会返回该缓存\n\n### 内容编码\n\n内容编码有：gzip、compress、deflate、identity\n\n浏览器发送 Accept-Encoding 首部，其中包含有它所支持的压缩算法，以及各自的优先级。服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 Content-Encoding 首部来告知浏览器它选择了哪一种算法\n\n### 范围请求\n\n- Range\n\n请求报文中添加 Range 首部字段指定请求的范围\n\n```html\nRange: bytes=0-1023\n```\n\n成功的话服务器返回的响应包含 206 Partial Content\n\n请求的范围越界的情况下，服务器会返回 416 Requested Range Not Satisfiable 状态码\n\n不支持范围请求的情况下，服务器会返回 200 OK 状态码\n\n- Accept-Range\n\n用于告知客户端是否能处理范围请求，可以处理使用 bytes，否则使用 none\n\n### 分块传输\n\nChunked Transfer Encoding，可以把数据分割成多块，让浏览器逐步显示页面\n\n### 多部分对象集合\n\n一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔\n\n如\n\n```html\nContent-Type: multipart/form-data; boundary=AaB03x\n\n--AaB03x\nContent-Disposition: form-data; name=\"submit-name\"\n\nLarry\n--AaB03x\nContent-Disposition: form-data; name=\"files\"; filename=\"file1.txt\"\nContent-Type: text/plain\n\n... contents of file1.txt ...\n--AaB03x--\n```\n\n### 虚拟主机\n\nHTTP/1.1 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器\n\n### 通信数据转发\n\n#### 代理\n\n- 目的\n  - 缓存\n  - 负载均衡\n  - 网络访问控制\n  - 访问日志记录\n- 正向代理\n\n用户可以察觉正向代理的存在\n\n![2020389347](/assets/2020389347.png)\n\n- 反向代理\n\n反向代理一般位于内部网络中，用户察觉不到\n\n![20203893445](/assets/20203893445.png)\n\n#### 网关\n\n网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务\n\n#### 隧道\n\n使用 SSL 等加密手段，在客户端和服务器之间建立一条安全的通信线路\n\n## 重定向原理\n\n当服务端对客户端进行重定向时，会设置一个Location响应头，并将状态码设置为302\n\n客户端（浏览器）接收到这样的响应之后，就会跳转到Location里面的网址\n\n## HTTPS\n\n### HTTP的问题\n\n- 明文通信\n- 无法确认通信方\n- 无法验证报文完整性\n\n### 原理\n\n1. 客户端向服务端发送HTTPS请求\n2. 服务端收到HTTPS请求返回公钥证书\n3. 客户端收到服务端的公钥证书，验证是否有效（验证颁发机构、过期时间等等）\n4. 如果有效，生成一个随机数用公钥加密，然后发送给服务端\n5. 服务端使用私钥将该随机数解密，然后用该随机数作为密钥加密一串字符给客户端\n6. 如果客户端解密这串字符成功，这串字符将作为接下来客户端与服务端通信的密钥\n\n这个过程的关键在于密钥传递使用了非对称加密，数据传输采用了对称加密\n\n所以这就保证了对称加密的密钥不会通过网络直接传输，之所以数据传输采用了对称加密，主要是因为非对称加密性能很低\n\n### 证书\n\n通过使用 证书 来对通信方进行认证\n\n数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构\n\n服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起\n\n### 完整性保护\n\nSSL 提供报文摘要功能来进行完整性保护\n\n### HTTPS的缺点\n\n- 加解密有性能损失\n- 证书授权需要高额费用\n\n### nginx配置证书\n\n```\n server {\n     ....  \n     ssl on;\n     ssl_certificate fullchain.pem;\n     ssl_certificate_key privkey.pem;\n }\n```\n\n## ### HTTP/2.0\n\n### HTTP/1.x缺陷\n\n- 使用多个连接提升性能\n- 没有压缩请求与响应\n- 不支持资源优先级\n\n### 二进制分帧\n\n![20203894642](/assets/20203894642.png)\n\n只会有一个TCP连接，一个连接会有任意数量的双向数据流\n\n一个数据流会有一个一个唯一的标识符，一个数据流可以承载一来一回双向信息\n\n消息是请求消息或者响应消息\n\n帧是最小的通信单位，不同数据流的帧可以交错发送，然后根据唯一标识符来重新组装\n\n![20203895038](/assets/20203895038.png)\n\n### 服务端推送\n\nHTTP/2.0 在客户端请求一个资源时，服务端会把相关的资源一起发送给客户端\n\n![20203895124](/assets/20203895124.png)\n\n### 首部压缩\n\nHTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输\n\n![2020389543](/assets/2020389543.png)\n\n不仅如此，HTTP/2.0 也使用 Huffman 编码对首部字段进行压缩\n\n## GET与POST\n\nGET 用于获取资源，而 POST 用于传输实体主体。\n\n### 参数\n\nGET是通过URL携带参数的，而 POST 的参数存储在实体主体中\n\n### 安全\n\nGET语义来说是安全的，因为GET操作只是获取资源\n\n而POST的语义是不安全的，因为POST是上传数据\n\n### 幂等性\n\n幂等方法不应该具有副作用，所有的安全方法也都是幂等的\n\n在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的\n\n### 可缓存\n\n一般来说GET和HEAD是可缓存的，PUT和DELETE不可缓存，POST在大多数情况下不可缓存\n\n## CDN\n\n>CDN加速意思就是在用户和我们的服务器之间加一个缓存机制,动态获取IP地址根据地理位置，让用户到最近的服务器访问\n\n![屏幕截图 2020-09-27 113806](/assets/屏幕截图%202020-09-27%20113806.png)\n\n### 原理\n\n1) 用户向浏览器提供要访问的域名；\n\n2) **路由解析**：浏览器调用域名解析库对域名进行解析，由于CDN对域名解析过程进行了调整，所以解析函数库一般得到的是该域名对应的CNAME记录（CDN地址），为了得到实际IP地址，浏览器需要再次对获得的CNAME进行解析以得到实际的IP地址；在此过程中，使用的全局负载均衡DNS解析，如根据地理位置信息解析对应的IP地址，使得用户能就近访问；\n\n3) 此次解析得到CDN缓存服务器的IP地址，浏览器在得到实际的IP地址以后，向缓存服务器发出访问请求\n\n4) 缓存服务器根据浏览器提供的要访问的域名，通过Cache内部专用DNS解析得到此域名的实际IP地址，再由缓存服务器向此实际IP地址提交访问请求\n\n5) 缓存服务器从实际IP地址得得到内容以后，一方面在本地进行保存，以备以后使用，二方面把获取的数据返回给客户端，完成数据服务过程\n\n6) 客户端得到由缓存服务器返回的数据以后显示出来并完成整个浏览的数据请求过程\n\n### 内容分发\n\n缓存节点中必须有用户想要请求的资源副本，那么这些节点资源时如何获取以及存储的？\n\n- 主动分发：分发由源站主动发起，将内容从源站或者其他资源库推送到用户边缘的各个CDN缓存节点上\n- 被动回源：CDN缓存节点发现自己没有该资源，就会实时从源站中获取\n\n对于资源的管理，一般分为主动失效与被动失效：\n\n- 被动失效：一段时间后资源过期，需要重新回源\n- 主动失效：某些事件强行使资源失效\n\n### CDN 动态加速\n\n通过动态的链路探测来寻找回源最好的一条路径\n\n![屏幕截图 2020-09-27 114519](/assets/屏幕截图%202020-09-27%20114519.png)\n\n## 跨域问题\n\n同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互，所以通常情况下一个源无法通过ajax与另外一个源进行交互\n\n![批注 2020-02-29 141744](/assets/批注%202020-02-29%20141744.png)\n\n### 解决方案\n\n- JSONP（缺陷很多）\n\n服务端将返回数据封装成js函数调用并返回，客户端js通过动态加载script标签加载服务器的js数据，加载完成后执行封装的js函数获取数据\n\n所以jsonp这种请求方式与ajax有着本质的不同\n\n- 被调服务端设置响应头允许跨域\n\n```java\nresponse.setHeader(\"Access-Control-Allow-Origin\",\"*\");\n```\n\n- 后端请求转发\n\n前端所在的服务端调用被调服务端，将结果返回给前端\n\n- nginx反向代理\n\n```\nserver {\n    listen 80;\n    server_name api.domain;\n    location /api1 {\n        proxy_pass http://outter_server;\n    }\n}\n```\n\n- 使用应用网关\n\n使可以通过一个统一入口访问各个项目\n\n## 传输链路优化\n\n前端会通过一些诸如精灵图、文件合并、请求合并的方式方法来降低HTTP请求数 又或者是HTTP1.1引入的Keep-Alive机制 使用一条连接来处理请求 但这就会导致请求被阻塞的问题\n\nHTTP2的出现很好地解决了这个问题 它将数据拆分为小端 并且使用id标识 在客户端进行组装，这样多个请求阻塞整条连接的情况出现的概率就比较小了\n\n另外一种优化方式是通过压缩 但一旦压缩 并且只使用一个连接 那如何判断内容以及传输完毕？使用分块编码 最后以一个长度值为0的分块来表示资源结束\n\n### 快速UDP网络连接\n\nQUIC的可靠传输能力并不是由底层协议提供的，而是完全由自己来实现\n\nQUIC的另一个设计目标是面向移动设备的专门支持，使用了一个标识符来处理由于移动网络断开重新连接的客户端识别问题","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}