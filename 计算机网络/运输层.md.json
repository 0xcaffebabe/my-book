{"content":"# 运输层\n\n- 运输层的功能：为不同主机上的进程提供逻辑通信 \n\n**运输层与网络层的关系**：网络层为运输层提供服务，运输层构建在网络层之上\n\n## 运输层协议\n\n- TCP\n- UDP\n\n运输层通过Socket端口来实现多路复用与多路分解\n\n## UDP\n\n- 对发送时间以及发送内容控制能力更强\n- 无连接\n- 无状态\n- 分组首部小\n- 支持一对一、一对多、多对一和多对多的交互通信\n\n虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如： QQ 语音、 QQ 视频 、直播等等\n\n### UDP首部\n\n![2020379295](/assets/2020379295.jpg)\n\n## TCP\n\n面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流，每一条 TCP 连接只能是点对点的\n\n### TCP首部\n\n![20203793059](/assets/20203793059.png)\n\n序号：对字节流进行编号，序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401\n\n确认号：期望收到的下一个报文段的序号，例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701\n\n数据偏移：也就是首部的长度\n\nRST/SYN/FIN 用于连接的建立与拆除\nURG 代表是上层紧急数据\nACK 确认\nPSH 尽快交给应用层\n\n窗口：窗口值作为接收方让发送方设置其发送窗口的依据\n\n### RTT 估计\n\n一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT\n\n```java\n均值RTT = 0.875 * 均值RTT + 0.125 * 样本RTT\n```\n\n### 可靠数据传输\n\n#### 原理\n\n使用基于停等操作的可靠传输协议效率不高，一个分组必须等到ACK后下一个分组才能开始传送\n\n![屏幕截图 2021-07-13 160141](/assets/屏幕截图%202021-07-13%20160141.png)\n\n为提高效率，可使用流水线操作，流水线操作要求发送接收方具有缓存n个分组的能力，出现差错时，有两种方式来进行恢复，\n\n![屏幕截图 2021-07-13 160320](/assets/屏幕截图%202021-07-13%20160320.png)\n\n分别是回退N步(GBN)\n\n![屏幕截图 2021-07-13 160653](/assets/屏幕截图%202021-07-13%20160653.png)\n\nGBN通过累积确认的方式来确认已接收到的分组位置，以及重传已发送但还未确认的分组来进行错误恢复。\n\n和选择重传，发送方仅重传怀疑接收方出错的分组\n\n![屏幕截图 2021-07-13 161611](/assets/屏幕截图%202021-07-13%20161611.png)\n\n![20203795214](/assets/20203795214.png)\n\nTCP使用以下方式保证可靠传输：\n\n1. 应用数据被分割成 TCP 认为最适合发送的数据块。\n2. TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。\n校验和： TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。\n3. TCP 的接收端会丢弃重复的数据。\n4. 流量控制： TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）\n5. 拥塞控制： 当网络拥塞时，减少数据的发送。\n6. ARQ协议： 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。\n7. 超时重传： 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。\n\n### ARQ协议\n\n通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输\n\n#### 停止等待ARQ协议\n\n每发完一个分组就停止发送，等待对方确认（回复ACK）。如果过了一段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组\n\n#### 连续ARQ协议\n\n发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认\n\n### 流量控制\n\n- 滑动窗口\n\n![2020379557](/assets/2020379557.jpg)\n\n接收方通过在报文段中添加接口窗口字段来进行双方之间的速度匹配\n接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据\n\n### 拥塞控制\n\n拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载\n\n为了进行拥塞控制，TCP 发送方要维持一个 拥塞窗口(cwnd) 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化\n\n#### 原则\n\n- 报文段丢失时发送方降低速率\n- 未确认报文段确认到达时，发送方增加速率\n- 带宽探测\n\n#### 慢启动\n\n慢开始算法的思路是当主机开始发送数据时 较好的方法是先探测一下，即由小到大逐渐增大发送窗口\n\n![20203795753](/assets/20203795753.jpg)\n\n不断增加直到超时，超时后将cwnd/2\n\n#### 拥塞避免\n\n让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1.\n\n#### 快重传与快恢复\n\n![20203710029](/assets/20203710029.png)\n\n### 公平性\n\nUDP源有可能压制TCP流量\n\n- 明确拥塞通知：由路由器在报文中插入当前路由器的拥塞情况\n\n### 连接管理\n\n#### 三次握手\n\n![20203793532](/assets/20203793532.png)\n\n- 客户端–发送带有 SYN 标志的数据包–一次握手–服务端\n- 服务端–发送带有 SYN/ACK 标志的数据包–二次握手–客户端\n- 客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端\n\n第一次握手：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常\n\n第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常\n\n第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常\n\n所以三次握手就能确认双发收发功能都正常，缺一不可\n\n客户端：A 服务端: B\n\n![屏幕截图 2020-09-13 105531](/assets/屏幕截图%202020-09-13%20105531.png)\n\n为什么要回传SYN：\n\n接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了\n\n同样 使用ACK服务端就能验证客户端\n\n#### 四次挥手\n\n![20203794049](/assets/20203794049.jpg)\n\n- 客户端发起一个关闭连接的请求，服务器响应这个关闭请求\n- 此时，客户端不能再向服务端发送数据，但是服务器可以发送数据给客户端，当服务器的数据传送完毕，向客户端发送一个关闭连接的请求\n- 客户端接收到服务端的关闭请求后，再发送一个确认消息，等待2MSL的时间，关闭\n- 服务端接收到客户端的最后一个关闭请求后，关闭\n\n等待2MSL时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文\n\n### TCP状态转化\n\n![屏幕截图 2020-09-28 135050](/assets/屏幕截图%202020-09-28%20135050.png)\n\n影响网络传输的因素：\n\n- 网络带宽\n- 传输距离造成的时延\n- 拥塞控制\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}