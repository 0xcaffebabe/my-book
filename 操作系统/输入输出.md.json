{"content":"# 输入/输出\n\n操作系统IO接口对于所有设备都应该是相同的，即设备无关性\n\n## I/O 硬件管理\n\n### I/O设备\n\n- 块设备：以块为单位进行读写\n- 字符设备：以字符为单位发送或接收字符流\n\n### 设备控制器\n\nIO设备由机械部件与电子部件构成 电子部件称为**设备控制器**或者**适配器**\n\n**控制器的任务**： 将串行的比特流转换为字节块，并完成纠错工作\n\n### 内存映射IO\n\n控制器使用寄存器或者一块操作系统可以操作的RAM进行通信\n\n给控制寄存器分配一个IO端口，所有IO端口形成IO端口空间吗，可以通过一条特殊的指令来来对控制寄存器进行读取或写入\n\n```asm\nIN REG, PORT ; CPU从指定IO端口读取数据到REG寄存器\nOUT PORT, REG ; CPU写入数据\n```\n\n另外一种方式是将IO设备寄存器映射到内存上，对内存的读写都会通过总线信号映射到IO设备的寄存器。内存映射IO优点：\n\n- 无需使用特殊指令读取IO设备寄存器，映射后能直接通过访问内存你的指令读写\n- 不需要特殊保护机制阻止用户进程进行IO操作，操作系统只需要避免把映射的那块内存暴露在用户地址空间就能避免用户进程进行IO操作\n- 可以应用于内存的指令也能应用于控制寄存器\n\n缺点：\n\n- 不能使用高速缓存，对IO映射内存做缓存的后果是灾难性的\n\n计算机如何确定一个内存地址对应的是内存还是IO设备寄存器？现代的计算机大都包含高速内存总线，对内存的读写可以通过专用总线来进行，而对IO设备的读写则可以通过通用总线。\n\n第二种设计是通过一个内存总线探查设备，该设备会对IO设备访问放行。\n\n第三种设计则是对内存地址进行过滤，规定一个区域的地址为IO内存映射。\n\n### 直接存储器存取（DMA）\n\n![屏幕截图 2021-01-07 162819](/assets/屏幕截图%202021-01-07%20162819.png)\n\n加入一个中间层 从CPU-设备 变成 CPU - DMA - 设备\n\n- 突发模式：DMA直接让设备获得总线发起一连串传送，然后再释放总线\n  - 如果传送时间较长 有可能阻塞CPU或者其他设备\n- 飞越模式： 让设备控制器将数据直接写到主存\n\n**设备控制器内部缓存区存在的原因**\n\n- 校验数据\n- 总线可能忙\n\n### 中断\n\n![屏幕截图 2021-01-07 163944](/assets/屏幕截图%202021-01-07%20163944.png)\n\n当设备发起一个中断信号，这个信号会被中断控制器芯片检测到。如果有设备同时发起中断，此时该设备中断不会被处理，不被处理的设备会不断发起信号，直至得到CPU的服务。\n\n中断控制器在放置一个数字信号表明需要处理哪个设备，这个数字信号被称为**中断向量**，中断向量是一个服务过程的程序地址，CPU需要保存相关好相关信息，如PC，然后跳转到指定地址指向相应的服务过程。\n\n由于现代CPU都会采用流水线技术，所以中断后一些指令执行了一部分，怎么确保这个状态是明确的\n\n![屏幕截图 2021-01-07 164930](/assets/屏幕截图%202021-01-07%20164930.png)\n\n- **精确中断**：机器停留在一个明确状态的中断\n\n  - 程序计数器保留在一个已知的地方\n  - 所指向的指令之前的所有指令已执行完毕\n  - 所执行的指令之后的所有指令都还未执行\n  - 所指向的指令的执行状态是已知的\n\n- **不精确中断**\n\n## IO软件原理\n\n### IO软件的目标\n\n- 设备独立性：面向接口编程\n- 统一命名：设备的命名映射为一个简单的字符串或数字，不依赖于设备\n- 错误处理：低层能处理的问题，就不要交给高层\n- 同步与异步：大多数物理IO是异步的，只是read系统调用后，进程被挂起直至数据到达，如果IO是同步的，用户程序编写器就会很容易\n- 缓冲：数据通常不能直接从源传输到目的地，所以需要缓冲区\n\n### 程序控制IO\n\n让CPU做全部工作 程序控制IO伪代码:\n\n```c\ncopy_from_user(buffer,p,count);\nfor(i = 0;i<count;i++){ // 循环写操作\n    while (*p_regs != READY){ // 检查IO设备是否就绪\n        *p_regd = p[i]; // 向IO设备写入数据\n    }\n}\nreturn_to_user();\n```\n\n这种IO模型好处在与简单，缺点在于在IO操作完成之前，要占用全部CPU时间\n\n### 中断驱动IO\n\n程序控制IO浪费的地方在于如果IO设备不就绪，CPU的时间就浪费在无谓的循环的上面了。\n\n中断驱动IO改进的地方在于当IO设备就绪，由IO设备主动产生一个中断，CPU在中断之前可以去调度其他进程。\n\n### 使用DMA的IO\n\n让DMA控制数据传输，而不必打扰CPU。本质上还是程序控制IO，只不过使用了DMA后CPU可以每次写入一整个缓冲区的数据。\n\n## IO软件层次\n\n![屏幕截图 2021-01-13 162227](/assets/屏幕截图%202021-01-13%20162227.png)\n\n### 中断处理程序\n\n> 在响应一个特定中断的时候，内核会执行一个函数，该函数叫中断处理程序\n\n隐藏中断的最好方式是将会引起中断的操作阻塞起来。但中断处理需要花费相当多的CPU指令。\n\n### 设备驱动程序\n\n> 每个链接到计算机上的IO设备都需要某些设备特定代码进行控制，称之为**设备驱动程序**\n\nUSB设备驱动通过堆栈式来达到不同的设备基于同样的技术效果。为了访问设备的硬件，大多数操作系统都要求驱动程序运行在内核中，这也是系统崩溃的一个源头之一。\n\n**可重入性**：驱动必须意识到第一次调用完成之前第二次调用会到来\n\n### 与设备无关的IO软件\n\n- 设备驱动程序的统一接口\n\n对于每种设备类型类型，操作系统定义一组驱动程序必须支持的函数，设备名可以使用设备类型+次版本号来编码，同样，对文件系统的保护规则也适用于设备。\n\n- 缓冲\n\n![屏幕截图 2021-01-14 155141](/assets/屏幕截图%202021-01-14%20155141.png)\n\n双缓冲：使用两个缓冲区交替使用，当一个满了之后直接复制到用户空间，另外一个接替上\n\n环形缓冲：通过两个前后指针不断往前走实现一个逻辑上无限的缓冲区\n\n- 错误报告\n\n对于编程错误，如向一个输入设备发出了一个输出请求，操作系统直接返回错误码即可。\n\n但对于实际的IO错误，应由驱动程序决定做什么，驱动程序解决不了，再向高层传递。但错误抛到高层，操作系统实际上除了返回一个错误码并失败外，并不存在其他多少事情可以做。\n\n- 分配与释放专用设备\n\n对于只允许有限数量进程使用的设备，操作系统必须对设备的使用请求进行检查，可以将得不到设备的进程调用失败掉。另外一种方式可以对得到设备的进程调用进行阻塞，而不是让其失败。\n\n- 提供与设备无关的块大小\n\n上层软件屏蔽掉不同设备的的块大小不一致\n\n### 用户空间的IO软件\n\n部分IO操作在用户空间完成，这是通过库过程来实现，也有通过假脱机的方式及守护进程的方式实现。\n\n假脱机：IO设备通过一个文件来代表IO处理，用户进程直接处理这个文件来实现IO。\n\n守护进程：用户进程通过将文件放置于某个目录下的，该目录称为假脱机目录，只有一个允许访问IO设备的进程，来读取这些文件进行操作，这个进程就是守护进程。\n\n![屏幕截图 2021-01-14 170929](/assets/屏幕截图%202021-01-14%20170929.png)\n\n## 磁盘\n\n磁盘驱动器不本身就包含一个微控制器，这允许磁盘驱动器发出一些诸如高速缓存、坏块重映射等高级命令\n\n### 结构\n\n![2020321928](/assets/2020321928.jpg)\n\n- 盘面（Platter）：一个磁盘有多个盘面\n- 磁道（Track）：盘面上的圆形带状区域，一个盘面可以有多个磁道\n- 扇区（Track Sector）：磁道上的一个弧段，一个磁道可以有多个扇区，它是最小的物理储存单位，目前主要有 512 bytes 与 4 K 两种大小\n- 磁头（Head）：与盘面非常接近，能够将盘面上的磁场转换为电信号（读），或者将电信号转换为盘面的磁场（写）\n- 制动手臂（Actuator arm）：用于在磁道之间移动磁头\n- 主轴（Spindle）：使整个盘面转动\n\n### RAID\n\nRedundant Array of Independent Disks，独立磁盘冗余阵列。通过将多个磁盘组合起来，使用RAID控制器代替磁盘驱动器以完成常规的操作。\n\n- RAID0：将磁盘划分为多个条带，若读取多个条带的数据，可以实现并行IO，但对于每次读取一个条带的操作系统，性能不仅同普通磁盘，而且还有故障率更高的风险\n- RAID1: 在RAID0的基础上整个数据复制一份，写性能比单个磁盘差，但读性能很高，并且拥有容错性，一旦一个磁盘挂掉，使用副本代替即可\n- RAID2：工作在字的基础上，使用了汉明码来进行纠错，即使一个磁盘挂掉，也能恢复出正确数据\n- RAID3:在2的基础上，使用奇偶校验码。如果磁盘挂掉，由于挂掉的磁盘位置已知，所以可以推算出丢失的数据位为0还是0 2和3的性能都不比单个磁盘好\n- RAID4:重新使用了条带，使用一个驱动器专门存放前面4个条带的奇偶校验。但这种设计对小更新的性能很差，因为每次更新都需要更新校验和。\n- RAID5:在4的基础上将校验和平均分布到各个磁盘，但如果某个磁盘挂掉，那就不好恢复了\n- RAID6：在5的基础上使用额外的校验块。\n\n![屏幕截图 2021-01-15 161911](/assets/屏幕截图%202021-01-15%20161911.png)\n\n### 磁盘格式化\n\n低级格式化：对每个扇区设置前导码，ECC，由于前导码与ECC需要占用一定空间，所以可用磁盘容量总比宣传的小\n\n↓\n\n磁盘分区：0扇区包含主引导记录（MBR），MBR包含一些引导代码及分区表\n\n↓\n\n高级格式化：设置引导块、空闲存储管理、根目录、文件系统\n\n_系统的启动流程：BIOS运行->读入MBR并跳转->执行引导程序->找到操作系统内核载入内存执行_\n\n### 磁盘臂调度算法\n\n读写磁盘块所需要的时间多少由以下三个因素决定：\n\n- 旋转时间：主轴转动盘面，使得磁头移动到适当的扇区上需要的时间\n- 寻道时间：制动手臂移动，使得磁头移动到适当的磁道上需要的时间\n- 数据传输时间\n\n调度算法：\n\n- 先来先服务算法\n  - 按照磁盘请求的顺序进行调度\n  - 公平简单，但是没有对寻道做任何优化，平均寻道时间较长\n- 最短寻道优先\n  - 优先调度距距离磁头最近的磁道\n  - 不够公平，如果一个请求距离当前磁头比较远，会出现饥饿现象\n![屏幕截图 2021-01-18 151803](/assets/屏幕截图%202021-01-18%20151803.png)\n- 电梯算法\n  - 总是保持一个方向运行，直到该方向没有请求为止，然后改变运行方向\n![20203219747](/assets/20203219747.png)\n\n旋转时间与寻道时间十分影响性能，所以一次只读取一个或者两个扇区效率很低。现代的磁盘控制器都拥有高速缓存，每次读取多个扇区，并将其缓存。\n\n### 错误处理\n\n对于磁盘坏块的处理，可以在控制器或者在操作系统对他们进行处理。\n\n在控制器中，处理的思想都是一样的，都是使用备用块来替代坏块。\n\n而在操作系统级别进行处理，操作系统必须获的所有坏块列表，并将其进行重映射。\n\n### 稳定存储器\n\n保持磁盘的数据一致性。\n\n- 稳定写：对每个磁盘驱动器轮流进行重复写操作\n- 稳定读：如果有稳定写总是成功，并且一段时间内数据不会自己变坏的前提下，稳定写就总是成功的\n- 崩溃恢复：当写的过程中发生崩溃，后续恢复的原则\n  - 两块都是好的且一样，什么也不做\n  - 一块有ECC错误，则好的覆盖掉有ECC错误的\n  - 两块都是好的但不一样，用第一块覆盖第二块\n\n![屏幕截图 2021-01-18 155800](/assets/屏幕截图%202021-01-18%20155800.png)\n\n## 时钟\n\n### 时钟硬件\n\n可编程时钟：石英晶体每次震荡会将递减计数器，计数器到0时会触发一个中断，软件可以自定义这个计数器来实现对时钟的编程。\n\n![屏幕截图 2021-01-18 160445](/assets/屏幕截图%202021-01-18%20160445.png)\n\n- 一次完成模式：中断发生后等待软件显式启动\n- 方波模式：中断一次之后，又重新开始循环\n\n### 时钟软件\n\n- 维护日时间\n\n通过时钟来维护现在的时间，为了防止32位内存溢出，可以使用64位计数器，但代价过高。也可使用以秒为单位。\n\n- 防止进程超时运行\n\n时钟的每次中断就将时间片-1，当时间片为0，就得重新调度程序。\n\n- 对CPU使用情况进行记账\n\n每次滴答对进程表项的某个域+1来实现记录进程运行时间。\n\n- 处理alarm系统调用\n\n进程可以请求操作系统在一定的时间间隔后向它报警。\n\n一个物理时钟为了模拟出多个时钟，可以通过维护一张表，每次时间发生更新就查找是否达到表中所需要的时刻，如果达到了，就进行触发。然后继续重复这个步骤。\n\n- 为系统各部分提供监视定时器\n\n检测死机之类的问题。如果操作系统可以定时清除计数器，当某个时刻计数器超过某个阈值，就可以确定已经死机了，此时软件介入处理。\n\n- 完成信息收集\n\n### 软定时器\n\nIO有两种方式：中断和轮询。\n\n现代CPU的中断开销是很大的，但轮询的响应时间又会比较高。\n\n所以为了达到一个取舍，可以使用一个软定时器定时中断来进行IO。\n\n## 外设\n\n### 输入软件\n\n#### 键盘软件\n\n- 原始模式：向用户提供原始的ASCII码序列\n- 加工模式：由键盘驱动处理全部行内编辑，将编辑结果存储在缓冲区回车后写入\n\n#### 鼠标软件\n\n鼠标发送的消息包含：$\\Delta$x $\\Delta$y 按钮 ，通常为3字节\n\n鼠标单击与双击则是由GUI来进行区分的\n\n### 输出软件\n\n- 文本窗口\n\n为了控制终端进行文字输出，程序使用了一种被称为“转义序列”的东西来控制终端。\n\n- X窗口系统\n- 图形用户界面\n- 位图\n- 字体\n- 触摸屏\n\n## 瘦客户机\n\n## 电源管理\n\n有两种方法减少电量消耗：\n\n1. 关闭不用的某些计算机硬件\n2. 使应用程序耗能更低\n\n### 硬件问题\n\n- 操作系统问题\n\n  - 显示器\n  - 硬盘\n  - CPU\n  - 内存\n  - 无线通信\n  - 热量管理\n  - 电源管理\n  - 驱动程序接口\n\n- 应用程序问题\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}