{"content":"# 死锁\n\n## 资源\n\n排他性使用的对象\n\n- 可抢占资源\n- 不可抢占起源\n\n1）请求资源 2）使用资源 3）释放资源\n\n### 资源获取\n\n可能产生死锁的编码\n\n```c\nvoid fa(){\n    down(r1);\n    down(r2);\n    up(r1);\n    up(r2);\n}\n\nvoid fb(){\n    down(r2);\n    down(r1);\n    up(r1);\n    up(r2);\n}\n```\n\n## 死锁简介\n\n> 集合中的每一个进程都在等待只能由本集合中的其他进程才能引发的事件，那么该组进程是死锁的\n\n- 资源死锁的条件\n\n  - 互斥：每个资源要么已经分配给了一个进程，要么就是可用的\n  - 占有和等待：已经得到了某个资源的进程可以再请求新的资源\n  - 不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放\n  - 环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源\n\n### 死锁建模\n\n圆形表示进程，方形表示资源\n\n![屏幕截图 2020-08-06 103700](/assets/屏幕截图%202020-08-06%20103700.png)\n\n如果产生环路，则产生死锁\n\n## 处理死锁的策略\n\n- 忽略问题\n- 检测并恢复\n- 仔细分配资源\n- 破坏引起死锁的四个必要条件\n\n### 鸵鸟策略\n\n解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能\n\n### 死锁检测和死锁恢复\n\n- 每种类型一个资源的死锁检测\n\n![202032182320](/assets/202032182320.png)\n\n方框代表资源，圆圈表示进程，资源指向进程表示该资源已经分配给该进程，进程指向资源表示进程请求获取该资源，这样当一个图中出现了环，就代表出现了死锁\n\n可以通过检测有向图环路的算法，进行深度优先搜索，对访问过的节点进行标记，如果发现重复的节点，则代表出现了死锁\n\n- 每种类型多个资源的死锁检测\n\n![202032182611](/assets/202032182611.png)\n\n基于向量检测\n\n- 从死锁中恢复\n\n  - 利用抢占恢复\n  - 利用回滚恢复\n  - 杀死进程恢复\n\n## 死锁避免\n\n在程序运行时避免发生死锁\n\n### 资源轨迹图\n\n### 安全状态和不安全状态\n\n![20203218352](/assets/20203218352.png)\n\n第二列 Has 表示已拥有的资源数，第三列 Max 表示总共需要的资源数，Free 表示还有可以使用的资源数\n从图 a 开始出发，先让 B 拥有所需的所有资源（图 b），运行结束后释放 B，此时 Free 变为 5（图 c）；接着以同样的方式运行 C 和 A，使得所有进程都能成功运行，因此可以称图 a 所示的状态时安全的\n从安全状态出发，系统能保证所有进程都能完成\n\n## 单个资源的银行家算法\n\n## 多个资源的银行家算法\n\n## 死锁预防\n\n在程序运行之前避免发生死锁\n\n- 破坏互斥条件\n  - 使资源可以同时被多个进程共享\n- 破坏占有和等待条件\n  - 规定进程在开始执行前请求所需要的资源\n- 破坏不可抢占条件\n  - 一个进程使用某个资源时，这个资源可以被其他需要的进程抢夺\n- 破坏环路等待\n  - 给资源进行编号，规定资源的获取顺序\n\n条件    | 处理方式\n----- | ----------\n互斥    | 一切都使用假脱机技术\n占有和等待 | 在开始就请求全部资源\n不可抢占  | 抢占资源\n环路等待  | 对资源按序编号\n\n## 其他问题\n\n- 两阶段加锁\n- 通信死锁\n- 活锁\n- 饥饿\n\n\n","commitList":[{"date":"2021-10-08T12:45:10+08:00","author":"cjiping","message":"doc开发期 构建期调整","hash":"704efe7455b7fb2fbd81ec60099191ff982e639a"},{"date":"2021-10-07T19:38:58+08:00","author":"My","message":"init","hash":"4e0456332231ba0523aa526415f9982377358870"}],"hasMoreCommit":false,"totalCommits":0}